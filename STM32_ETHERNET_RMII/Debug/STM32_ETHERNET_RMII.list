
STM32_ETHERNET_RMII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800e4bc  0800e4bc  0000f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011078  08011078  00013088  2**0
                  CONTENTS
  4 .ARM          00000008  08011078  08011078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011080  08011080  00013088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011080  08011080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011084  08011084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08011088  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b58  20000088  08011110  00013088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006be0  08011110  00013be0  2**0
                  ALLOC
 11 .lwip_sec     0000dba3  200071e0  200071e0  000131e0  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181c0  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b01  00000000  00000000  0002b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  0002fd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4c  00000000  00000000  00030f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030b8a  00000000  00000000  00031dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4a6  00000000  00000000  00062956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f905f  00000000  00000000  00081dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017ae5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fe4  00000000  00000000  0017aea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0017fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e4a4 	.word	0x0800e4a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800e4a4 	.word	0x0800e4a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005aa:	f3bf 8f6f 	isb	sy
}
 80005ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b0:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <SCB_EnableICache+0x48>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
}
 80005d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy
}
 80005da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SCB_EnableDCache+0x84>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <SCB_EnableDCache+0x84>)
 8000602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000606:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0b5b      	lsrs	r3, r3, #13
 800060c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000610:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800061a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	015a      	lsls	r2, r3, #5
 8000620:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000624:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800062a:	4911      	ldr	r1, [pc, #68]	@ (8000670 <SCB_EnableDCache+0x84>)
 800062c:	4313      	orrs	r3, r2
 800062e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1ef      	bne.n	800061c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1e5      	bne.n	8000612 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
}
 800064a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <SCB_EnableDCache+0x84>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <SCB_EnableDCache+0x84>)
 8000652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000656:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000678:	f000 f8d8 	bl	800082c <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800067c:	f7ff ff90 	bl	80005a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000680:	f7ff ffb4 	bl	80005ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fb78 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f80e 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f878 	bl	8000780 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000690:	f002 fd04 	bl	800309c <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ethernetif_input(&gnetif);
 8000694:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <main+0x30>)
 8000696:	f002 ff99 	bl	80035cc <ethernetif_input>

	 	  sys_check_timeouts();
 800069a:	f00a fa37 	bl	800ab0c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 800069e:	bf00      	nop
 80006a0:	e7f8      	b.n	8000694 <main+0x20>
 80006a2:	bf00      	nop
 80006a4:	200000ac 	.word	0x200000ac

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00d f84f 	bl	800d75a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a29      	ldr	r2, [pc, #164]	@ (8000778 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a24      	ldr	r2, [pc, #144]	@ (800077c <SystemClock_Config+0xd4>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <SystemClock_Config+0xd4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000714:	23d8      	movs	r3, #216	@ 0xd8
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800071c:	2309      	movs	r3, #9
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f857 	bl	80027d8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000730:	f000 f8bc 	bl	80008ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000734:	f002 f800 	bl	8002738 <HAL_PWREx_EnableOverDrive>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 f8b5 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2107      	movs	r1, #7
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fadd 	bl	8002d20 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800076c:	f000 f89e 	bl	80008ac <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	@ 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_GPIO_Init+0xa4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a22      	ldr	r2, [pc, #136]	@ (8000824 <MX_GPIO_Init+0xa4>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a16      	ldr	r2, [pc, #88]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_GPIO_Init+0xa4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2102      	movs	r1, #2
 80007fa:	480b      	ldr	r0, [pc, #44]	@ (8000828 <MX_GPIO_Init+0xa8>)
 80007fc:	f001 ff82 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_GPIO_Init+0xa8>)
 8000818:	f001 fdc8 	bl	80023ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40022000 	.word	0x40022000

0800082c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800083e:	f000 fc0b 	bl	8001058 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000842:	2301      	movs	r3, #1
 8000844:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000846:	2300      	movs	r3, #0
 8000848:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MPU_Config+0x78>)
 800084c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 800084e:	2309      	movs	r3, #9
 8000850:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000852:	2300      	movs	r3, #0
 8000854:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000856:	2300      	movs	r3, #0
 8000858:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800085a:	2303      	movs	r3, #3
 800085c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fc29 	bl	80010c8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000876:	2301      	movs	r3, #1
 8000878:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20014000;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MPU_Config+0x7c>)
 800087c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800087e:	230d      	movs	r3, #13
 8000880:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000882:	2301      	movs	r3, #1
 8000884:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000886:	2301      	movs	r3, #1
 8000888:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088e:	463b      	mov	r3, r7
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fc19 	bl	80010c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000896:	2004      	movs	r0, #4
 8000898:	f000 fbf6 	bl	8001088 <HAL_MPU_Enable>

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20010000 	.word	0x20010000
 80008a8:	20014000 	.word	0x20014000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x44>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x44>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x44>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x44>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <UsageFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 fa55 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}

0800095e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  return 1;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <_kill>:

int _kill(int pid, int sig)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <_kill+0x20>)
 800097c:	2216      	movs	r2, #22
 800097e:	601a      	str	r2, [r3, #0]
  return -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	20006bd0 	.word	0x20006bd0

08000994 <_exit>:

void _exit (int status)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800099c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ffe5 	bl	8000970 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009a6:	bf00      	nop
 80009a8:	e7fd      	b.n	80009a6 <_exit+0x12>

080009aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e00a      	b.n	80009d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009bc:	f3af 8000 	nop.w
 80009c0:	4601      	mov	r1, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	60ba      	str	r2, [r7, #8]
 80009c8:	b2ca      	uxtb	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dbf0      	blt.n	80009bc <_read+0x12>
  }

  return len;
 80009da:	687b      	ldr	r3, [r7, #4]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e009      	b.n	8000a0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	60ba      	str	r2, [r7, #8]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dbf1      	blt.n	80009f6 <_write+0x12>
  }
  return len;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_close>:

int _close(int file)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a44:	605a      	str	r2, [r3, #4]
  return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_isatty>:

int _isatty(int file)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b085      	sub	sp, #20
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d205      	bcs.n	8000ac0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <_sbrk+0x6c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a06      	ldr	r2, [pc, #24]	@ (8000ae8 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	371c      	adds	r7, #28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	20050000 	.word	0x20050000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200000a4 	.word	0x200000a4
 8000aec:	20006be0 	.word	0x20006be0
 8000af0:	20006bd0 	.word	0x20006bd0

08000af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f00c fe57 	bl	800d7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fd93 	bl	8000674 <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b5c:	08011088 	.word	0x08011088
  ldr r2, =_sbss
 8000b60:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b64:	20006be0 	.word	0x20006be0

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>

08000b6a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00b      	beq.n	8000b92 <LAN8742_RegisterBusIO+0x28>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <LAN8742_RegisterBusIO+0x28>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <LAN8742_RegisterBusIO+0x28>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b96:	e014      	b.n	8000bc2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691a      	ldr	r2, [r3, #16]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d139      	bne.n	8000c5e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e01c      	b.n	8000c3e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f107 020c 	add.w	r2, r7, #12
 8000c0c:	2112      	movs	r1, #18
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	4798      	blx	r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da03      	bge.n	8000c20 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c18:	f06f 0304 	mvn.w	r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c1e:	e00b      	b.n	8000c38 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d105      	bne.n	8000c38 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
         break;
 8000c36:	e005      	b.n	8000c44 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b1f      	cmp	r3, #31
 8000c42:	d9df      	bls.n	8000c04 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b1f      	cmp	r3, #31
 8000c4a:	d902      	bls.n	8000c52 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c4c:	f06f 0302 	mvn.w	r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000c5e:	693b      	ldr	r3, [r7, #16]
 }
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	6810      	ldr	r0, [r2, #0]
 8000c7c:	f107 020c 	add.w	r2, r7, #12
 8000c80:	2101      	movs	r1, #1
 8000c82:	4798      	blx	r3
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	da02      	bge.n	8000c90 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c8a:	f06f 0304 	mvn.w	r3, #4
 8000c8e:	e06e      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6810      	ldr	r0, [r2, #0]
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4798      	blx	r3
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da02      	bge.n	8000cac <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ca6:	f06f 0304 	mvn.w	r3, #4
 8000caa:	e060      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e059      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	6810      	ldr	r0, [r2, #0]
 8000cc2:	f107 020c 	add.w	r2, r7, #12
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4798      	blx	r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da02      	bge.n	8000cd6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cd0:	f06f 0304 	mvn.w	r3, #4
 8000cd4:	e04b      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d11b      	bne.n	8000d18 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <LAN8742_GetLinkState+0x90>
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e03a      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e033      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d10:	2304      	movs	r3, #4
 8000d12:	e02c      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d14:	2305      	movs	r3, #5
 8000d16:	e02a      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6810      	ldr	r0, [r2, #0]
 8000d20:	f107 020c 	add.w	r2, r7, #12
 8000d24:	211f      	movs	r1, #31
 8000d26:	4798      	blx	r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da02      	bge.n	8000d34 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d2e:	f06f 0304 	mvn.w	r3, #4
 8000d32:	e01c      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e015      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f003 031c 	and.w	r3, r3, #28
 8000d48:	2b18      	cmp	r3, #24
 8000d4a:	d101      	bne.n	8000d50 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e00e      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 031c 	and.w	r3, r3, #28
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d101      	bne.n	8000d5e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e007      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f003 031c 	and.w	r3, r3, #28
 8000d64:	2b14      	cmp	r3, #20
 8000d66:	d101      	bne.n	8000d6c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e000      	b.n	8000d6e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d6c:	2305      	movs	r3, #5
    }
  }
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x28>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f931 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fd90 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f93b 	bl	800103e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de0:	f000 f911 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	200000a8 	.word	0x200000a8

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200000a8 	.word	0x200000a8

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x40>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x40>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	05fa0000 	.word	0x05fa0000

08000ed4 <__NVIC_GetPriorityGrouping>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_SetPriority>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff47 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff5c 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffb0 	bl	8000fac <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800105c:	f3bf 8f5f 	dmb	sy
}
 8001060:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_MPU_Disable+0x28>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_MPU_Disable+0x28>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800106c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_MPU_Disable+0x2c>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	e000ed90 	.word	0xe000ed90

08001088 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_MPU_Enable+0x38>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_MPU_Enable+0x3c>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_MPU_Enable+0x3c>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010a6:	f3bf 8f4f 	dsb	sy
}
 80010aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ac:	f3bf 8f6f 	isb	sy
}
 80010b0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed90 	.word	0xe000ed90
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	785a      	ldrb	r2, [r3, #1]
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010d6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010e4:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7adb      	ldrb	r3, [r3, #11]
 80010f6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001100:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7b5b      	ldrb	r3, [r3, #13]
 8001106:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001108:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7b9b      	ldrb	r3, [r3, #14]
 800110e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001110:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7bdb      	ldrb	r3, [r3, #15]
 8001116:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001118:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7a5b      	ldrb	r3, [r3, #9]
 800111e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001120:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7a1b      	ldrb	r3, [r3, #8]
 8001126:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001128:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001132:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001134:	6113      	str	r3, [r2, #16]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed90 	.word	0xe000ed90

08001148 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e086      	b.n	8001268 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001160:	2b00      	cmp	r3, #0
 8001162:	d106      	bne.n	8001172 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2223      	movs	r2, #35	@ 0x23
 8001168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f002 fa9d 	bl	80036ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <HAL_ETH_Init+0x128>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a3e      	ldr	r2, [pc, #248]	@ (8001270 <HAL_ETH_Init+0x128>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b3c      	ldr	r3, [pc, #240]	@ (8001270 <HAL_ETH_Init+0x128>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800118a:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <HAL_ETH_Init+0x12c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a39      	ldr	r2, [pc, #228]	@ (8001274 <HAL_ETH_Init+0x12c>)
 8001190:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001194:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001196:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <HAL_ETH_Init+0x12c>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	4935      	ldr	r1, [pc, #212]	@ (8001274 <HAL_ETH_Init+0x12c>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011a4:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <HAL_ETH_Init+0x12c>)
 80011a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff fe34 	bl	8000e2c <HAL_GetTick>
 80011c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011c6:	e011      	b.n	80011ec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011c8:	f7ff fe30 	bl	8000e2c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011d6:	d909      	bls.n	80011ec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2204      	movs	r2, #4
 80011dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	22e0      	movs	r2, #224	@ 0xe0
 80011e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e03d      	b.n	8001268 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1e4      	bne.n	80011c8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fe18 	bl	8001e34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fec3 	bl	8001f90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 ff19 	bl	8002042 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	461a      	mov	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fe81 	bl	8001f20 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800122c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_ETH_Init+0x130>)
 800123c:	430b      	orrs	r3, r1
 800123e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001252:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2210      	movs	r2, #16
 8001262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	00020060 	.word	0x00020060

0800127c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800128a:	2b10      	cmp	r3, #16
 800128c:	d150      	bne.n	8001330 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2223      	movs	r2, #35	@ 0x23
 8001292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2204      	movs	r2, #4
 800129a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f9f9 	bl	8001694 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0208 	orr.w	r2, r2, #8
 80012b0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fdc2 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0204 	orr.w	r2, r2, #4
 80012d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff fdaf 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fc3c 	bl	8001b6c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001306:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800130a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001322:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2223      	movs	r2, #35	@ 0x23
 8001328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	e000      	b.n	8001332 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001348:	2b23      	cmp	r3, #35	@ 0x23
 800134a:	d14a      	bne.n	80013e2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2223      	movs	r2, #35	@ 0x23
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001366:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800136a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	f023 0302 	bic.w	r3, r3, #2
 800137e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001382:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fd51 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fbde 	bl	8001b6c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0208 	bic.w	r2, r2, #8
 80013be:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fd3b 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2210      	movs	r2, #16
 80013da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e07c      	b.n	800150c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001418:	2b23      	cmp	r3, #35	@ 0x23
 800141a:	d176      	bne.n	800150a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800141c:	2200      	movs	r2, #0
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fe7d 	bl	8002120 <ETH_Prepare_Tx_Descriptors>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001432:	f043 0202 	orr.w	r2, r3, #2
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e065      	b.n	800150c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001440:	f3bf 8f4f 	dsb	sy
}
 8001444:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3206      	adds	r2, #6
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001462:	2b03      	cmp	r3, #3
 8001464:	d904      	bls.n	8001470 <HAL_ETH_Transmit+0x84>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146a:	1f1a      	subs	r2, r3, #4
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3106      	adds	r1, #6
 800147c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001480:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001484:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001486:	f7ff fcd1 	bl	8000e2c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800148c:	e037      	b.n	80014fe <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d011      	beq.n	80014c4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a6:	f043 0208 	orr.w	r2, r3, #8
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e023      	b.n	800150c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014ca:	d018      	beq.n	80014fe <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014cc:	f7ff fcae 	bl	8000e2c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d302      	bcc.n	80014e2 <HAL_ETH_Transmit+0xf6>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e8:	f043 0204 	orr.w	r2, r3, #4
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80014f8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e006      	b.n	800150c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	dbc3      	blt.n	800148e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0a4      	b.n	800168a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001546:	2b23      	cmp	r3, #35	@ 0x23
 8001548:	d001      	beq.n	800154e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e09d      	b.n	800168a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	3212      	adds	r2, #18
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001564:	f1c3 0304 	rsb	r3, r3, #4
 8001568:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800156a:	e066      	b.n	800163a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <HAL_ETH_ReadData+0x88>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015be:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f002 f9fb 	bl	80039f0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	441a      	add	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3301      	adds	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d902      	bls.n	8001628 <HAL_ETH_ReadData+0x114>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b04      	subs	r3, #4
 8001626:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	3212      	adds	r2, #18
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800163e:	2b00      	cmp	r3, #0
 8001640:	db06      	blt.n	8001650 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	429a      	cmp	r2, r3
 8001648:	d202      	bcs.n	8001650 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800164a:	7cfb      	ldrb	r3, [r7, #19]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d08d      	beq.n	800156c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	441a      	add	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f815 	bl	8001694 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001670:	7cfb      	ldrb	r3, [r7, #19]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80016a0:	2301      	movs	r3, #1
 80016a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	3212      	adds	r2, #18
 80016b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016bc:	e042      	b.n	8001744 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d112      	bne.n	80016ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f960 	bl	8003990 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	74fb      	strb	r3, [r7, #19]
 80016da:	e007      	b.n	80016ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	461a      	mov	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	461a      	mov	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d028      	beq.n	8001744 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <ETH_UpdateDescriptor+0x104>)
 8001700:	4313      	orrs	r3, r2
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	6053      	str	r3, [r2, #4]
 8001706:	e005      	b.n	8001714 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3301      	adds	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d902      	bls.n	8001732 <ETH_UpdateDescriptor+0x9e>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	3b04      	subs	r3, #4
 8001730:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	3212      	adds	r2, #18
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	617b      	str	r3, [r7, #20]
      desccount--;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	3b01      	subs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <ETH_UpdateDescriptor+0xbc>
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1b6      	bne.n	80016be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	429a      	cmp	r2, r3
 8001758:	d01a      	beq.n	8001790 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001764:	f3bf 8f5f 	dmb	sy
}
 8001768:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	18ca      	adds	r2, r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001782:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	80004000 	.word	0x80004000

0800179c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 031c 	and.w	r3, r3, #28
 80017b8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	02db      	lsls	r3, r3, #11
 80017be:	b29b      	uxth	r3, r3
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f023 0302 	bic.w	r3, r3, #2
 80017da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80017ec:	f7ff fb1e 	bl	8000e2c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f2:	e00d      	b.n	8001810 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80017f4:	f7ff fb1a 	bl	8000e2c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001802:	d301      	bcc.n	8001808 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e010      	b.n	800182a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ec      	bne.n	80017f4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 031c 	and.w	r3, r3, #28
 800184e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	02db      	lsls	r3, r3, #11
 8001854:	b29b      	uxth	r3, r3
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	019b      	lsls	r3, r3, #6
 8001860:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff face 	bl	8000e2c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001892:	e00d      	b.n	80018b0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001894:	f7ff faca 	bl	8000e2c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a2:	d301      	bcc.n	80018a8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e009      	b.n	80018bc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ec      	bne.n	8001894 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0e6      	b.n	8001aa6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf14      	ite	ne
 800192c:	2301      	movne	r3, #1
 800192e:	2300      	moveq	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00b      	b.n	8001ade <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d105      	bne.n	8001adc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f870 	bl	8001bb8 <ETH_SetMACConfig>

    return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e000      	b.n	8001ade <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 031c 	bic.w	r3, r3, #28
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b00:	f001 fac0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 8001b04:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d804      	bhi.n	8001b18 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e019      	b.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d204      	bcs.n	8001b2a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f043 030c 	orr.w	r3, r3, #12
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e010      	b.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d90c      	bls.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d804      	bhi.n	8001b44 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e003      	b.n	8001b4c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	611a      	str	r2, [r3, #16]
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	02160ebf 	.word	0x02160ebf
 8001b60:	03938700 	.word	0x03938700
 8001b64:	05f5e0ff 	.word	0x05f5e0ff
 8001b68:	08f0d17f 	.word	0x08f0d17f

08001b6c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b8e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff f951 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bac:	6193      	str	r3, [r2, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <ETH_SetMACConfig+0x164>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	7b9b      	ldrb	r3, [r3, #14]
 8001bd6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	7c12      	ldrb	r2, [r2, #16]
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d102      	bne.n	8001be6 <ETH_SetMACConfig+0x2e>
 8001be0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001be4:	e000      	b.n	8001be8 <ETH_SetMACConfig+0x30>
 8001be6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001be8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	7c52      	ldrb	r2, [r2, #17]
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d102      	bne.n	8001bf8 <ETH_SetMACConfig+0x40>
 8001bf2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001bf6:	e000      	b.n	8001bfa <ETH_SetMACConfig+0x42>
 8001bf8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bfa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7fdb      	ldrb	r3, [r3, #31]
 8001c06:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c08:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	7f92      	ldrb	r2, [r2, #30]
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	d102      	bne.n	8001c1e <ETH_SetMACConfig+0x66>
 8001c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1c:	e000      	b.n	8001c20 <ETH_SetMACConfig+0x68>
 8001c1e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7f1b      	ldrb	r3, [r3, #28]
 8001c26:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c28:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d102      	bne.n	8001c48 <ETH_SetMACConfig+0x90>
 8001c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c46:	e000      	b.n	8001c4a <ETH_SetMACConfig+0x92>
 8001c48:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	7bdb      	ldrb	r3, [r3, #15]
 8001c50:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c52:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c60:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c62:	4313      	orrs	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff f8e2 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d101      	bne.n	8001cae <ETH_SetMACConfig+0xf6>
 8001caa:	2280      	movs	r2, #128	@ 0x80
 8001cac:	e000      	b.n	8001cb0 <ETH_SetMACConfig+0xf8>
 8001cae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cb0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001cbe:	2a01      	cmp	r2, #1
 8001cc0:	d101      	bne.n	8001cc6 <ETH_SetMACConfig+0x10e>
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	e000      	b.n	8001cc8 <ETH_SetMACConfig+0x110>
 8001cc6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001cc8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001cd0:	2a01      	cmp	r2, #1
 8001cd2:	d101      	bne.n	8001cd8 <ETH_SetMACConfig+0x120>
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	e000      	b.n	8001cda <ETH_SetMACConfig+0x122>
 8001cd8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001ce2:	2a01      	cmp	r2, #1
 8001ce4:	d101      	bne.n	8001cea <ETH_SetMACConfig+0x132>
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	e000      	b.n	8001cec <ETH_SetMACConfig+0x134>
 8001cea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f7ff f89d 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	fd20810f 	.word	0xfd20810f

08001d20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <ETH_SetDMAConfig+0x110>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7b1b      	ldrb	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <ETH_SetDMAConfig+0x2c>
 8001d46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d4a:	e000      	b.n	8001d4e <ETH_SetDMAConfig+0x2e>
 8001d4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	7b5b      	ldrb	r3, [r3, #13]
 8001d52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	7f52      	ldrb	r2, [r2, #29]
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d102      	bne.n	8001d64 <ETH_SetDMAConfig+0x44>
 8001d5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d62:	e000      	b.n	8001d66 <ETH_SetDMAConfig+0x46>
 8001d64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	7b9b      	ldrb	r3, [r3, #14]
 8001d6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	7f1b      	ldrb	r3, [r3, #28]
 8001d7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	7f9b      	ldrb	r3, [r3, #30]
 8001d82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da4:	461a      	mov	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f7ff f844 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dd4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001dda:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001de0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001de8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001dea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001df2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001df8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff f815 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	f8de3f23 	.word	0xf8de3f23

08001e34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0a6      	sub	sp, #152	@ 0x98
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ea2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001eae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fe7f 	bl	8001bb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001eea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ef0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ef4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001efa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff05 	bl	8001d20 <ETH_SetDMAConfig>
}
 8001f16:	bf00      	nop
 8001f18:	3798      	adds	r7, #152	@ 0x98
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3305      	adds	r3, #5
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	3204      	adds	r2, #4
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <ETH_MACAddressConfig+0x68>)
 8001f42:	4413      	add	r3, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	061a      	lsls	r2, r3, #24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3302      	adds	r3, #2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	4313      	orrs	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	7812      	ldrb	r2, [r2, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <ETH_MACAddressConfig+0x6c>)
 8001f72:	4413      	add	r3, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	6013      	str	r3, [r2, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40028040 	.word	0x40028040
 8001f8c:	40028044 	.word	0x40028044

08001f90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e03e      	b.n	800201c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	3206      	adds	r2, #6
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d80c      	bhi.n	8002000 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68d9      	ldr	r1, [r3, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e004      	b.n	800200a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d9bd      	bls.n	8001f9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002034:	611a      	str	r2, [r3, #16]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e048      	b.n	80020e2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6919      	ldr	r1, [r3, #16]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2200      	movs	r2, #0
 800206c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800208c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	3212      	adds	r2, #18
 80020ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d80c      	bhi.n	80020d2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6919      	ldr	r1, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	e004      	b.n	80020dc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d9b3      	bls.n	8002050 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002112:	60da      	str	r2, [r3, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002120:	b480      	push	{r7}
 8002122:	b091      	sub	sp, #68	@ 0x44
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3318      	adds	r3, #24
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800215e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002162:	d007      	beq.n	8002174 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002168:	3304      	adds	r3, #4
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002174:	2302      	movs	r3, #2
 8002176:	e111      	b.n	800239c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217a:	3301      	adds	r3, #1
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800217e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002186:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4b86      	ldr	r3, [pc, #536]	@ (80023a8 <ETH_Prepare_Tx_Descriptors+0x288>)
 800218e:	4013      	ands	r3, r2
 8002190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002192:	6852      	ldr	r2, [r2, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002198:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80021c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80021ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80021fa:	e082      	b.n	8002302 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002206:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800220e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e005      	b.n	8002228 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002226:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800222a:	3301      	adds	r3, #1
 800222c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800222e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002230:	2b03      	cmp	r3, #3
 8002232:	d902      	bls.n	800223a <ETH_Prepare_Tx_Descriptors+0x11a>
 8002234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002236:	3b04      	subs	r3, #4
 8002238:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002242:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800224c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002250:	d007      	beq.n	8002262 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002256:	3304      	adds	r3, #4
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d029      	beq.n	80022b6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800226a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002270:	2300      	movs	r3, #0
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002274:	e019      	b.n	80022aa <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002276:	f3bf 8f5f 	dmb	sy
}
 800227a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002286:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800228a:	3301      	adds	r3, #1
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800228e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002290:	2b03      	cmp	r3, #3
 8002292:	d902      	bls.n	800229a <ETH_Prepare_Tx_Descriptors+0x17a>
 8002294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002296:	3b04      	subs	r3, #4
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80022a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a6:	3301      	adds	r3, #1
 80022a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3e1      	bcc.n	8002276 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	e072      	b.n	800239c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80022be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80022c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c4:	3301      	adds	r3, #1
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80022c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <ETH_Prepare_Tx_Descriptors+0x288>)
 80022de:	4013      	ands	r3, r2
 80022e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e2:	6852      	ldr	r2, [r2, #4]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	3301      	adds	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80022f0:	f3bf 8f5f 	dmb	sy
}
 80022f4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002300:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f af78 	bne.w	80021fc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e005      	b.n	800232c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800232c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002342:	f3bf 8f5f 	dmb	sy
}
 8002346:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800235a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800235c:	3304      	adds	r3, #4
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002368:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800236a:	f3ef 8310 	mrs	r3, PRIMASK
 800236e:	613b      	str	r3, [r7, #16]
  return(result);
 8002370:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	2301      	movs	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f383 8810 	msr	PRIMASK, r3
}
 800237e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002386:	4413      	add	r3, r2
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3744      	adds	r7, #68	@ 0x44
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	ffffe000 	.word	0xffffe000

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e175      	b.n	80026b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 8164 	bne.w	80026b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x56>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80be 	beq.w	80026b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	4b66      	ldr	r3, [pc, #408]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b63      	ldr	r3, [pc, #396]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800254e:	4a61      	ldr	r2, [pc, #388]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a58      	ldr	r2, [pc, #352]	@ (80026d8 <HAL_GPIO_Init+0x32c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d037      	beq.n	80025ea <HAL_GPIO_Init+0x23e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a57      	ldr	r2, [pc, #348]	@ (80026dc <HAL_GPIO_Init+0x330>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d031      	beq.n	80025e6 <HAL_GPIO_Init+0x23a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a56      	ldr	r2, [pc, #344]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02b      	beq.n	80025e2 <HAL_GPIO_Init+0x236>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a55      	ldr	r2, [pc, #340]	@ (80026e4 <HAL_GPIO_Init+0x338>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x232>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a54      	ldr	r2, [pc, #336]	@ (80026e8 <HAL_GPIO_Init+0x33c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x22e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a53      	ldr	r2, [pc, #332]	@ (80026ec <HAL_GPIO_Init+0x340>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x22a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_GPIO_Init+0x344>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a51      	ldr	r2, [pc, #324]	@ (80026f4 <HAL_GPIO_Init+0x348>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <HAL_GPIO_Init+0x34c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4f      	ldr	r2, [pc, #316]	@ (80026fc <HAL_GPIO_Init+0x350>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x21a>
 80025c2:	2309      	movs	r3, #9
 80025c4:	e012      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025c6:	230a      	movs	r3, #10
 80025c8:	e010      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ca:	2308      	movs	r3, #8
 80025cc:	e00e      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025d2:	2306      	movs	r3, #6
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x240>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3d      	ldr	r3, [pc, #244]	@ (8002700 <HAL_GPIO_Init+0x354>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a29      	ldr	r2, [pc, #164]	@ (8002700 <HAL_GPIO_Init+0x354>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <HAL_GPIO_Init+0x354>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <HAL_GPIO_Init+0x354>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <HAL_GPIO_Init+0x354>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae86 	bls.w	80023cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40022400 	.word	0x40022400
 8002700:	40013c00 	.word	0x40013c00

08002704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002714:	787b      	ldrb	r3, [r7, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002720:	e003      	b.n	800272a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	041a      	lsls	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	619a      	str	r2, [r3, #24]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	4b23      	ldr	r3, [pc, #140]	@ (80027d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002766:	f7fe fb61 	bl	8000e2c <HAL_GetTick>
 800276a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800276c:	e009      	b.n	8002782 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800276e:	f7fe fb5d 	bl	8000e2c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800277c:	d901      	bls.n	8002782 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e022      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278e:	d1ee      	bne.n	800276e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002790:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0f      	ldr	r2, [pc, #60]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800279c:	f7fe fb46 	bl	8000e2c <HAL_GetTick>
 80027a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027a2:	e009      	b.n	80027b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027a4:	f7fe fb42 	bl	8000e2c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b2:	d901      	bls.n	80027b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e007      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027c4:	d1ee      	bne.n	80027a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40007000 	.word	0x40007000

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e291      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8087 	beq.w	800290a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027fc:	4b96      	ldr	r3, [pc, #600]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b04      	cmp	r3, #4
 8002806:	d00c      	beq.n	8002822 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002808:	4b93      	ldr	r3, [pc, #588]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d112      	bne.n	800283a <HAL_RCC_OscConfig+0x62>
 8002814:	4b90      	ldr	r3, [pc, #576]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002820:	d10b      	bne.n	800283a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002822:	4b8d      	ldr	r3, [pc, #564]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d06c      	beq.n	8002908 <HAL_RCC_OscConfig+0x130>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d168      	bne.n	8002908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e26b      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x7a>
 8002844:	4b84      	ldr	r3, [pc, #528]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a83      	ldr	r2, [pc, #524]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e02e      	b.n	80028b0 <HAL_RCC_OscConfig+0xd8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x9c>
 800285a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b7c      	ldr	r3, [pc, #496]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800286c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xd8>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0xc0>
 800287e:	4b76      	ldr	r3, [pc, #472]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a75      	ldr	r2, [pc, #468]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b73      	ldr	r3, [pc, #460]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a72      	ldr	r2, [pc, #456]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xd8>
 8002898:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fab8 	bl	8000e2c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fab4 	bl	8000e2c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e21f      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b61      	ldr	r3, [pc, #388]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe faa4 	bl	8000e2c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe faa0 	bl	8000e2c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e20b      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b57      	ldr	r3, [pc, #348]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x110>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d069      	beq.n	80029ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002916:	4b50      	ldr	r3, [pc, #320]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b4d      	ldr	r3, [pc, #308]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x190>
 800292e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x17a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1df      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b41      	ldr	r3, [pc, #260]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	493d      	ldr	r1, [pc, #244]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e040      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d023      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a38      	ldr	r2, [pc, #224]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fa56 	bl	8000e2c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe fa52 	bl	8000e2c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1bd      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b30      	ldr	r3, [pc, #192]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4929      	ldr	r1, [pc, #164]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
 80029b6:	e018      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b8:	4b27      	ldr	r3, [pc, #156]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a26      	ldr	r2, [pc, #152]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fa32 	bl	8000e2c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe fa2e 	bl	8000e2c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e199      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d038      	beq.n	8002a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d019      	beq.n	8002a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a02:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fa0f 	bl	8000e2c <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe fa0b 	bl	8000e2c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e176      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x23a>
 8002a30:	e01a      	b.n	8002a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a36:	4a08      	ldr	r2, [pc, #32]	@ (8002a58 <HAL_RCC_OscConfig+0x280>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe f9f5 	bl	8000e2c <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe f9f1 	bl	8000e2c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d903      	bls.n	8002a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e15c      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
 8002a58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	4b91      	ldr	r3, [pc, #580]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ee      	bne.n	8002a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80a4 	beq.w	8002bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b88      	ldr	r3, [pc, #544]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a87      	ldr	r2, [pc, #540]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b85      	ldr	r3, [pc, #532]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	4b82      	ldr	r3, [pc, #520]	@ (8002ca8 <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca8 <HAL_RCC_OscConfig+0x4d0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ca8 <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe f9b9 	bl	8000e2c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe f9b5 	bl	8000e2c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	@ 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e120      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad0:	4b75      	ldr	r3, [pc, #468]	@ (8002ca8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x31a>
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af0:	e02d      	b.n	8002b4e <HAL_RCC_OscConfig+0x376>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x33c>
 8002afa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	4a69      	ldr	r2, [pc, #420]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b06:	4b67      	ldr	r3, [pc, #412]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4a66      	ldr	r2, [pc, #408]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b12:	e01c      	b.n	8002b4e <HAL_RCC_OscConfig+0x376>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x35e>
 8002b1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a60      	ldr	r2, [pc, #384]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b28:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b34:	e00b      	b.n	8002b4e <HAL_RCC_OscConfig+0x376>
 8002b36:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b42:	4b58      	ldr	r3, [pc, #352]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b46:	4a57      	ldr	r2, [pc, #348]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe f969 	bl	8000e2c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe f965 	bl	8000e2c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ce      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ee      	beq.n	8002b5e <HAL_RCC_OscConfig+0x386>
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe f953 	bl	8000e2c <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe f94f 	bl	8000e2c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ee      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a4 	beq.w	8002d10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d06b      	beq.n	8002cac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d149      	bne.n	8002c70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a30      	ldr	r2, [pc, #192]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe f920 	bl	8000e2c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe f91c 	bl	8000e2c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e087      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	4313      	orrs	r3, r2
 8002c34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a18      	ldr	r2, [pc, #96]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f8f0 	bl	8000e2c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe f8ec 	bl	8000e2c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e057      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x478>
 8002c6e:	e04f      	b.n	8002d10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f8d6 	bl	8000e2c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe f8d2 	bl	8000e2c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e03d      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4ac>
 8002ca2:	e035      	b.n	8002d10 <HAL_RCC_OscConfig+0x538>
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_RCC_OscConfig+0x544>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d028      	beq.n	8002d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d121      	bne.n	8002d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d11a      	bne.n	8002d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ce2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d111      	bne.n	8002d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0d0      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 020f 	bic.w	r2, r3, #15
 8002d4e:	4965      	ldr	r1, [pc, #404]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d040      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e073      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4936      	ldr	r1, [pc, #216]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe f80a 	bl	8000e2c <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7fe f806 	bl	8000e2c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e053      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d210      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	4922      	ldr	r1, [pc, #136]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	@ (8002eec <HAL_RCC_ClockConfig+0x1cc>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd ff66 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08010e9c 	.word	0x08010e9c
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b090      	sub	sp, #64	@ 0x40
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f04:	2300      	movs	r3, #0
 8002f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f10:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	f200 80a1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x34>
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2a:	e09b      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f30:	e09b      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f32:	4b53      	ldr	r3, [pc, #332]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f36:	e098      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b4f      	ldr	r3, [pc, #316]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f42:	4b4d      	ldr	r3, [pc, #308]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	623b      	str	r3, [r7, #32]
 8002f58:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f60:	2100      	movs	r1, #0
 8002f62:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f64:	fb03 f201 	mul.w	r2, r3, r1
 8002f68:	2300      	movs	r3, #0
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a43      	ldr	r2, [pc, #268]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f72:	fba0 1202 	umull	r1, r2, r0, r2
 8002f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f78:	460a      	mov	r2, r1
 8002f7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f7e:	4413      	add	r3, r2
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f84:	2200      	movs	r2, #0
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	61fa      	str	r2, [r7, #28]
 8002f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f92:	f7fd f98d 	bl	80002b0 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f9e:	e053      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	617a      	str	r2, [r7, #20]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fb2:	f04f 0b00 	mov.w	fp, #0
 8002fb6:	4652      	mov	r2, sl
 8002fb8:	465b      	mov	r3, fp
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	0159      	lsls	r1, r3, #5
 8002fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc8:	0150      	lsls	r0, r2, #5
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	ebb2 080a 	subs.w	r8, r2, sl
 8002fd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fe2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fe6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fea:	ebb2 0408 	subs.w	r4, r2, r8
 8002fee:	eb63 0509 	sbc.w	r5, r3, r9
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	00eb      	lsls	r3, r5, #3
 8002ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003000:	00e2      	lsls	r2, r4, #3
 8003002:	4614      	mov	r4, r2
 8003004:	461d      	mov	r5, r3
 8003006:	eb14 030a 	adds.w	r3, r4, sl
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	eb45 030b 	adc.w	r3, r5, fp
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003032:	2200      	movs	r2, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	60fa      	str	r2, [r7, #12]
 8003038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800303c:	f7fd f938 	bl	80002b0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003058:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetSysClockFreq+0x184>)
 8003066:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800306c:	4618      	mov	r0, r3
 800306e:	3740      	adds	r7, #64	@ 0x40
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	017d7840 	.word	0x017d7840

08003084 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000

0800309c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80030a2:	4b87      	ldr	r3, [pc, #540]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030a4:	22c0      	movs	r2, #192	@ 0xc0
 80030a6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80030a8:	4b85      	ldr	r3, [pc, #532]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030aa:	22a8      	movs	r2, #168	@ 0xa8
 80030ac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80030ae:	4b84      	ldr	r3, [pc, #528]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 80030b4:	4b82      	ldr	r3, [pc, #520]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030b6:	227b      	movs	r2, #123	@ 0x7b
 80030b8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80030ba:	4b82      	ldr	r3, [pc, #520]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80030bc:	22ff      	movs	r2, #255	@ 0xff
 80030be:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80030c0:	4b80      	ldr	r3, [pc, #512]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80030c2:	22ff      	movs	r2, #255	@ 0xff
 80030c4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80030c6:	4b7f      	ldr	r3, [pc, #508]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80030c8:	22ff      	movs	r2, #255	@ 0xff
 80030ca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80030cc:	4b7d      	ldr	r3, [pc, #500]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80030d2:	4b7d      	ldr	r3, [pc, #500]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 80030d4:	22c0      	movs	r2, #192	@ 0xc0
 80030d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80030d8:	4b7b      	ldr	r3, [pc, #492]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 80030da:	22a8      	movs	r2, #168	@ 0xa8
 80030dc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80030de:	4b7a      	ldr	r3, [pc, #488]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80030e4:	4b78      	ldr	r3, [pc, #480]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80030ea:	f000 fcf1 	bl	8003ad0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80030ee:	4b74      	ldr	r3, [pc, #464]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	061a      	lsls	r2, r3, #24
 80030f4:	4b72      	ldr	r3, [pc, #456]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <MX_LWIP_Init+0x224>)
 80030fe:	789b      	ldrb	r3, [r3, #2]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4313      	orrs	r3, r2
 8003104:	4a6e      	ldr	r2, [pc, #440]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003106:	78d2      	ldrb	r2, [r2, #3]
 8003108:	4313      	orrs	r3, r2
 800310a:	061a      	lsls	r2, r3, #24
 800310c:	4b6c      	ldr	r3, [pc, #432]	@ (80032c0 <MX_LWIP_Init+0x224>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	0619      	lsls	r1, r3, #24
 8003112:	4b6b      	ldr	r3, [pc, #428]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	4319      	orrs	r1, r3
 800311a:	4b69      	ldr	r3, [pc, #420]	@ (80032c0 <MX_LWIP_Init+0x224>)
 800311c:	789b      	ldrb	r3, [r3, #2]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	430b      	orrs	r3, r1
 8003122:	4967      	ldr	r1, [pc, #412]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003124:	78c9      	ldrb	r1, [r1, #3]
 8003126:	430b      	orrs	r3, r1
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800312e:	431a      	orrs	r2, r3
 8003130:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	0619      	lsls	r1, r3, #24
 8003136:	4b62      	ldr	r3, [pc, #392]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	4319      	orrs	r1, r3
 800313e:	4b60      	ldr	r3, [pc, #384]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003140:	789b      	ldrb	r3, [r3, #2]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	430b      	orrs	r3, r1
 8003146:	495e      	ldr	r1, [pc, #376]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003148:	78c9      	ldrb	r1, [r1, #3]
 800314a:	430b      	orrs	r3, r1
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003152:	431a      	orrs	r2, r3
 8003154:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	0619      	lsls	r1, r3, #24
 800315a:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <MX_LWIP_Init+0x224>)
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	4319      	orrs	r1, r3
 8003162:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <MX_LWIP_Init+0x224>)
 8003164:	789b      	ldrb	r3, [r3, #2]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	430b      	orrs	r3, r1
 800316a:	4955      	ldr	r1, [pc, #340]	@ (80032c0 <MX_LWIP_Init+0x224>)
 800316c:	78c9      	ldrb	r1, [r1, #3]
 800316e:	430b      	orrs	r3, r1
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	4313      	orrs	r3, r2
 8003174:	4a55      	ldr	r2, [pc, #340]	@ (80032cc <MX_LWIP_Init+0x230>)
 8003176:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003178:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <MX_LWIP_Init+0x228>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	061a      	lsls	r2, r3, #24
 800317e:	4b51      	ldr	r3, [pc, #324]	@ (80032c4 <MX_LWIP_Init+0x228>)
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	4b4f      	ldr	r3, [pc, #316]	@ (80032c4 <MX_LWIP_Init+0x228>)
 8003188:	789b      	ldrb	r3, [r3, #2]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	4313      	orrs	r3, r2
 800318e:	4a4d      	ldr	r2, [pc, #308]	@ (80032c4 <MX_LWIP_Init+0x228>)
 8003190:	78d2      	ldrb	r2, [r2, #3]
 8003192:	4313      	orrs	r3, r2
 8003194:	061a      	lsls	r2, r3, #24
 8003196:	4b4b      	ldr	r3, [pc, #300]	@ (80032c4 <MX_LWIP_Init+0x228>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	0619      	lsls	r1, r3, #24
 800319c:	4b49      	ldr	r3, [pc, #292]	@ (80032c4 <MX_LWIP_Init+0x228>)
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	4319      	orrs	r1, r3
 80031a4:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031a6:	789b      	ldrb	r3, [r3, #2]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4945      	ldr	r1, [pc, #276]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031ae:	78c9      	ldrb	r1, [r1, #3]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80031b8:	431a      	orrs	r2, r3
 80031ba:	4b42      	ldr	r3, [pc, #264]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	0619      	lsls	r1, r3, #24
 80031c0:	4b40      	ldr	r3, [pc, #256]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	4319      	orrs	r1, r3
 80031c8:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031ca:	789b      	ldrb	r3, [r3, #2]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	430b      	orrs	r3, r1
 80031d0:	493c      	ldr	r1, [pc, #240]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031d2:	78c9      	ldrb	r1, [r1, #3]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80031dc:	431a      	orrs	r2, r3
 80031de:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	0619      	lsls	r1, r3, #24
 80031e4:	4b37      	ldr	r3, [pc, #220]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	4319      	orrs	r1, r3
 80031ec:	4b35      	ldr	r3, [pc, #212]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031ee:	789b      	ldrb	r3, [r3, #2]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	430b      	orrs	r3, r1
 80031f4:	4933      	ldr	r1, [pc, #204]	@ (80032c4 <MX_LWIP_Init+0x228>)
 80031f6:	78c9      	ldrb	r1, [r1, #3]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	0e1b      	lsrs	r3, r3, #24
 80031fc:	4313      	orrs	r3, r2
 80031fe:	4a34      	ldr	r2, [pc, #208]	@ (80032d0 <MX_LWIP_Init+0x234>)
 8003200:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003202:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	061a      	lsls	r2, r3, #24
 8003208:	4b2f      	ldr	r3, [pc, #188]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	431a      	orrs	r2, r3
 8003210:	4b2d      	ldr	r3, [pc, #180]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003212:	789b      	ldrb	r3, [r3, #2]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	4313      	orrs	r3, r2
 8003218:	4a2b      	ldr	r2, [pc, #172]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 800321a:	78d2      	ldrb	r2, [r2, #3]
 800321c:	4313      	orrs	r3, r2
 800321e:	061a      	lsls	r2, r3, #24
 8003220:	4b29      	ldr	r3, [pc, #164]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	0619      	lsls	r1, r3, #24
 8003226:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	4319      	orrs	r1, r3
 800322e:	4b26      	ldr	r3, [pc, #152]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	430b      	orrs	r3, r1
 8003236:	4924      	ldr	r1, [pc, #144]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003238:	78c9      	ldrb	r1, [r1, #3]
 800323a:	430b      	orrs	r3, r1
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003242:	431a      	orrs	r2, r3
 8003244:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	0619      	lsls	r1, r3, #24
 800324a:	4b1f      	ldr	r3, [pc, #124]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	4319      	orrs	r1, r3
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	430b      	orrs	r3, r1
 800325a:	491b      	ldr	r1, [pc, #108]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 800325c:	78c9      	ldrb	r1, [r1, #3]
 800325e:	430b      	orrs	r3, r1
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003266:	431a      	orrs	r2, r3
 8003268:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	0619      	lsls	r1, r3, #24
 800326e:	4b16      	ldr	r3, [pc, #88]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	4319      	orrs	r1, r3
 8003276:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003278:	789b      	ldrb	r3, [r3, #2]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	430b      	orrs	r3, r1
 800327e:	4912      	ldr	r1, [pc, #72]	@ (80032c8 <MX_LWIP_Init+0x22c>)
 8003280:	78c9      	ldrb	r1, [r1, #3]
 8003282:	430b      	orrs	r3, r1
 8003284:	0e1b      	lsrs	r3, r3, #24
 8003286:	4313      	orrs	r3, r2
 8003288:	4a12      	ldr	r2, [pc, #72]	@ (80032d4 <MX_LWIP_Init+0x238>)
 800328a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800328c:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <MX_LWIP_Init+0x23c>)
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <MX_LWIP_Init+0x240>)
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	4b0e      	ldr	r3, [pc, #56]	@ (80032d4 <MX_LWIP_Init+0x238>)
 800329a:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <MX_LWIP_Init+0x234>)
 800329c:	490b      	ldr	r1, [pc, #44]	@ (80032cc <MX_LWIP_Init+0x230>)
 800329e:	4810      	ldr	r0, [pc, #64]	@ (80032e0 <MX_LWIP_Init+0x244>)
 80032a0:	f001 f902 	bl	80044a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80032a4:	480e      	ldr	r0, [pc, #56]	@ (80032e0 <MX_LWIP_Init+0x244>)
 80032a6:	f001 fab1 	bl	800480c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80032aa:	480d      	ldr	r0, [pc, #52]	@ (80032e0 <MX_LWIP_Init+0x244>)
 80032ac:	f001 fabe 	bl	800482c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80032b0:	490c      	ldr	r1, [pc, #48]	@ (80032e4 <MX_LWIP_Init+0x248>)
 80032b2:	480b      	ldr	r0, [pc, #44]	@ (80032e0 <MX_LWIP_Init+0x244>)
 80032b4:	f001 fbbc 	bl	8004a30 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200000ec 	.word	0x200000ec
 80032c4:	200000f0 	.word	0x200000f0
 80032c8:	200000f4 	.word	0x200000f4
 80032cc:	200000e0 	.word	0x200000e0
 80032d0:	200000e4 	.word	0x200000e4
 80032d4:	200000e8 	.word	0x200000e8
 80032d8:	0800d2e5 	.word	0x0800d2e5
 80032dc:	0800360d 	.word	0x0800360d
 80032e0:	200000ac 	.word	0x200000ac
 80032e4:	080032e9 	.word	0x080032e9

080032e8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <SCB_InvalidateDCache_by_Addr>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800330e:	2320      	movs	r3, #32
 8003310:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003312:	f3bf 8f4f 	dsb	sy
}
 8003316:	bf00      	nop
    while (op_size > 0) {
 8003318:	e00b      	b.n	8003332 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800331a:	4a0d      	ldr	r2, [pc, #52]	@ (8003350 <SCB_InvalidateDCache_by_Addr+0x54>)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	dcf0      	bgt.n	800331a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003338:	f3bf 8f4f 	dsb	sy
}
 800333c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800333e:	f3bf 8f6f 	isb	sy
}
 8003342:	bf00      	nop
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003360:	4b44      	ldr	r3, [pc, #272]	@ (8003474 <low_level_init+0x120>)
 8003362:	4a45      	ldr	r2, [pc, #276]	@ (8003478 <low_level_init+0x124>)
 8003364:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003366:	2300      	movs	r3, #0
 8003368:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800336e:	23e1      	movs	r3, #225	@ 0xe1
 8003370:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003376:	2300      	movs	r3, #0
 8003378:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800337a:	2300      	movs	r3, #0
 800337c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800337e:	4a3d      	ldr	r2, [pc, #244]	@ (8003474 <low_level_init+0x120>)
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003386:	4b3b      	ldr	r3, [pc, #236]	@ (8003474 <low_level_init+0x120>)
 8003388:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800338c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <low_level_init+0x120>)
 8003390:	4a3a      	ldr	r2, [pc, #232]	@ (800347c <low_level_init+0x128>)
 8003392:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003394:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <low_level_init+0x120>)
 8003396:	4a3a      	ldr	r2, [pc, #232]	@ (8003480 <low_level_init+0x12c>)
 8003398:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800339a:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <low_level_init+0x120>)
 800339c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80033a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80033a2:	4834      	ldr	r0, [pc, #208]	@ (8003474 <low_level_init+0x120>)
 80033a4:	f7fd fed0 	bl	8001148 <HAL_ETH_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80033ac:	2238      	movs	r2, #56	@ 0x38
 80033ae:	2100      	movs	r1, #0
 80033b0:	4834      	ldr	r0, [pc, #208]	@ (8003484 <low_level_init+0x130>)
 80033b2:	f00a f9d2 	bl	800d75a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80033b6:	4b33      	ldr	r3, [pc, #204]	@ (8003484 <low_level_init+0x130>)
 80033b8:	2221      	movs	r2, #33	@ 0x21
 80033ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80033bc:	4b31      	ldr	r3, [pc, #196]	@ (8003484 <low_level_init+0x130>)
 80033be:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80033c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80033c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003484 <low_level_init+0x130>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80033ca:	482f      	ldr	r0, [pc, #188]	@ (8003488 <low_level_init+0x134>)
 80033cc:	f000 ff34 	bl	8004238 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2206      	movs	r2, #6
 80033d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <low_level_init+0x120>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <low_level_init+0x120>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	785a      	ldrb	r2, [r3, #1]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80033f0:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <low_level_init+0x120>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	789a      	ldrb	r2, [r3, #2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <low_level_init+0x120>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	78da      	ldrb	r2, [r3, #3]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <low_level_init+0x120>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	791a      	ldrb	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003414:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <low_level_init+0x120>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	795a      	ldrb	r2, [r3, #5]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003426:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800342e:	f043 030a 	orr.w	r3, r3, #10
 8003432:	b2da      	uxtb	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800343a:	4914      	ldr	r1, [pc, #80]	@ (800348c <low_level_init+0x138>)
 800343c:	4814      	ldr	r0, [pc, #80]	@ (8003490 <low_level_init+0x13c>)
 800343e:	f7fd fb94 	bl	8000b6a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003442:	4813      	ldr	r0, [pc, #76]	@ (8003490 <low_level_init+0x13c>)
 8003444:	f7fd fbc3 	bl	8000bce <LAN8742_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f001 fabe 	bl	80049d0 <netif_set_link_down>
    netif_set_down(netif);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 fa55 	bl	8004904 <netif_set_down>
 800345a:	e008      	b.n	800346e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa08 	bl	8003878 <ethernet_link_check_state>
 8003468:	e001      	b.n	800346e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800346a:	f7fd fa1f 	bl	80008ac <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000100 	.word	0x20000100
 8003478:	40028000 	.word	0x40028000
 800347c:	20010200 	.word	0x20010200
 8003480:	20010000 	.word	0x20010000
 8003484:	200001b0 	.word	0x200001b0
 8003488:	08010eac 	.word	0x08010eac
 800348c:	2000000c 	.word	0x2000000c
 8003490:	200001e8 	.word	0x200001e8

08003494 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b092      	sub	sp, #72	@ 0x48
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2230      	movs	r2, #48	@ 0x30
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f00a f950 	bl	800d75a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	2230      	movs	r2, #48	@ 0x30
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f00a f949 	bl	800d75a <memset>

  for(q = p; q != NULL; q = q->next)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80034cc:	e045      	b.n	800355a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80034ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d902      	bls.n	80034da <low_level_output+0x46>
      return ERR_IF;
 80034d4:	f06f 030b 	mvn.w	r3, #11
 80034d8:	e055      	b.n	8003586 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80034da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3348      	adds	r3, #72	@ 0x48
 80034ea:	443b      	add	r3, r7
 80034ec:	3b3c      	subs	r3, #60	@ 0x3c
 80034ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80034f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f2:	895b      	ldrh	r3, [r3, #10]
 80034f4:	4619      	mov	r1, r3
 80034f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	3348      	adds	r3, #72	@ 0x48
 8003502:	443b      	add	r3, r7
 8003504:	3b38      	subs	r3, #56	@ 0x38
 8003506:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800350e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003510:	1e5a      	subs	r2, r3, #1
 8003512:	f107 000c 	add.w	r0, r7, #12
 8003516:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003518:	460b      	mov	r3, r1
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	440b      	add	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	18c1      	adds	r1, r0, r3
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3348      	adds	r3, #72	@ 0x48
 800352c:	443b      	add	r3, r7
 800352e:	3b34      	subs	r3, #52	@ 0x34
 8003530:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800353a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	3348      	adds	r3, #72	@ 0x48
 8003546:	443b      	add	r3, r7
 8003548:	3b34      	subs	r3, #52	@ 0x34
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800354e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003550:	3301      	adds	r3, #1
 8003552:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	643b      	str	r3, [r7, #64]	@ 0x40
 800355a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1b6      	bne.n	80034ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	891b      	ldrh	r3, [r3, #8]
 8003564:	461a      	mov	r2, r3
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <low_level_output+0xfc>)
 8003568:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <low_level_output+0xfc>)
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003572:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <low_level_output+0xfc>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003578:	2214      	movs	r2, #20
 800357a:	4905      	ldr	r1, [pc, #20]	@ (8003590 <low_level_output+0xfc>)
 800357c:	4805      	ldr	r0, [pc, #20]	@ (8003594 <low_level_output+0x100>)
 800357e:	f7fd ff35 	bl	80013ec <HAL_ETH_Transmit>

  return errval;
 8003582:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003586:	4618      	mov	r0, r3
 8003588:	3748      	adds	r7, #72	@ 0x48
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200001b0 	.word	0x200001b0
 8003594:	20000100 	.word	0x20000100

08003598 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80035a4:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <low_level_input+0x2c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	4619      	mov	r1, r3
 80035b2:	4805      	ldr	r0, [pc, #20]	@ (80035c8 <low_level_input+0x30>)
 80035b4:	f7fd ffae 	bl	8001514 <HAL_ETH_ReadData>
  }

  return p;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200000fc 	.word	0x200000fc
 80035c8:	20000100 	.word	0x20000100

080035cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ffdd 	bl	8003598 <low_level_input>
 80035de:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	4798      	blx	r3
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f001 fd9a 	bl	8005130 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ea      	bne.n	80035d8 <ethernetif_input+0xc>
}
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <ethernetif_init+0x1c>
 800361a:	4b0e      	ldr	r3, [pc, #56]	@ (8003654 <ethernetif_init+0x48>)
 800361c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003620:	490d      	ldr	r1, [pc, #52]	@ (8003658 <ethernetif_init+0x4c>)
 8003622:	480e      	ldr	r0, [pc, #56]	@ (800365c <ethernetif_init+0x50>)
 8003624:	f00a f834 	bl	800d690 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2273      	movs	r2, #115	@ 0x73
 800362c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2274      	movs	r2, #116	@ 0x74
 8003634:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a09      	ldr	r2, [pc, #36]	@ (8003660 <ethernetif_init+0x54>)
 800363c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <ethernetif_init+0x58>)
 8003642:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fe85 	bl	8003354 <low_level_init>

  return ERR_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0800e4bc 	.word	0x0800e4bc
 8003658:	0800e4d8 	.word	0x0800e4d8
 800365c:	0800e4e8 	.word	0x0800e4e8
 8003660:	0800b79d 	.word	0x0800b79d
 8003664:	08003495 	.word	0x08003495

08003668 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	4807      	ldr	r0, [pc, #28]	@ (8003694 <pbuf_free_custom+0x2c>)
 8003678:	f000 fec0 	bl	80043fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <pbuf_free_custom+0x30>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <pbuf_free_custom+0x30>)
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
  }
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	08010eac 	.word	0x08010eac
 8003698:	200000fc 	.word	0x200000fc

0800369c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036a0:	f7fd fbc4 	bl	8000e2c <HAL_GetTick>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08e      	sub	sp, #56	@ 0x38
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3f      	ldr	r2, [pc, #252]	@ (80037c8 <HAL_ETH_MspInit+0x11c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d178      	bne.n	80037c0 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036ce:	4b3f      	ldr	r3, [pc, #252]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	4a3e      	ldr	r2, [pc, #248]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 80036d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036da:	4b3c      	ldr	r3, [pc, #240]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	4a38      	ldr	r2, [pc, #224]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 80036ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f2:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003704:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003708:	6313      	str	r3, [r2, #48]	@ 0x30
 800370a:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003716:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 800371c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003720:	6313      	str	r3, [r2, #48]	@ 0x30
 8003722:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372e:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	4a26      	ldr	r2, [pc, #152]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003734:	f043 0304 	orr.w	r3, r3, #4
 8003738:	6313      	str	r3, [r2, #48]	@ 0x30
 800373a:	4b24      	ldr	r3, [pc, #144]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a20      	ldr	r2, [pc, #128]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <HAL_ETH_MspInit+0x120>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800375e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376c:	2303      	movs	r3, #3
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003770:	230b      	movs	r3, #11
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003778:	4619      	mov	r1, r3
 800377a:	4815      	ldr	r0, [pc, #84]	@ (80037d0 <HAL_ETH_MspInit+0x124>)
 800377c:	f7fe fe16 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003780:	2332      	movs	r3, #50	@ 0x32
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003790:	230b      	movs	r3, #11
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003798:	4619      	mov	r1, r3
 800379a:	480e      	ldr	r0, [pc, #56]	@ (80037d4 <HAL_ETH_MspInit+0x128>)
 800379c:	f7fe fe06 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80037a0:	2386      	movs	r3, #134	@ 0x86
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ac:	2303      	movs	r3, #3
 80037ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037b0:	230b      	movs	r3, #11
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b8:	4619      	mov	r1, r3
 80037ba:	4807      	ldr	r0, [pc, #28]	@ (80037d8 <HAL_ETH_MspInit+0x12c>)
 80037bc:	f7fe fdf6 	bl	80023ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80037c0:	bf00      	nop
 80037c2:	3738      	adds	r7, #56	@ 0x38
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40028000 	.word	0x40028000
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40021800 	.word	0x40021800
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020000 	.word	0x40020000

080037dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80037e0:	4802      	ldr	r0, [pc, #8]	@ (80037ec <ETH_PHY_IO_Init+0x10>)
 80037e2:	f7fe f981 	bl	8001ae8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000100 	.word	0x20000100

080037f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	4807      	ldr	r0, [pc, #28]	@ (8003830 <ETH_PHY_IO_ReadReg+0x30>)
 8003814:	f7fd ffc2 	bl	800179c <HAL_ETH_ReadPHYRegister>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003822:	e000      	b.n	8003826 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000100 	.word	0x20000100

08003834 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	4807      	ldr	r0, [pc, #28]	@ (8003864 <ETH_PHY_IO_WriteReg+0x30>)
 8003848:	f7fd fff3 	bl	8001832 <HAL_ETH_WritePHYRegister>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003856:	e000      	b.n	800385a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000100 	.word	0x20000100

08003868 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800386c:	f7fd fade 	bl	8000e2c <HAL_GetTick>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b0a0      	sub	sp, #128	@ 0x80
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	2264      	movs	r2, #100	@ 0x64
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f009 ff66 	bl	800d75a <memset>
  int32_t PHYLinkState = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003896:	2300      	movs	r3, #0
 8003898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800389a:	2300      	movs	r3, #0
 800389c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800389e:	483a      	ldr	r0, [pc, #232]	@ (8003988 <ethernet_link_check_state+0x110>)
 80038a0:	f7fd f9e2 	bl	8000c68 <LAN8742_GetLinkState>
 80038a4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <ethernet_link_check_state+0x5a>
 80038b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	dc09      	bgt.n	80038d2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80038be:	4833      	ldr	r0, [pc, #204]	@ (800398c <ethernet_link_check_state+0x114>)
 80038c0:	f7fd fd3b 	bl	800133a <HAL_ETH_Stop>
    netif_set_down(netif);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f001 f81d 	bl	8004904 <netif_set_down>
    netif_set_link_down(netif);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f001 f880 	bl	80049d0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80038d0:	e055      	b.n	800397e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d14e      	bne.n	800397e <ethernet_link_check_state+0x106>
 80038e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	dd4b      	ble.n	800397e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80038e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e8:	3b02      	subs	r3, #2
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d82a      	bhi.n	8003944 <ethernet_link_check_state+0xcc>
 80038ee:	a201      	add	r2, pc, #4	@ (adr r2, 80038f4 <ethernet_link_check_state+0x7c>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003917 	.word	0x08003917
 80038fc:	08003927 	.word	0x08003927
 8003900:	08003937 	.word	0x08003937
      duplex = ETH_FULLDUPLEX_MODE;
 8003904:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003908:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800390a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800390e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003910:	2301      	movs	r3, #1
 8003912:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003914:	e017      	b.n	8003946 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003916:	2300      	movs	r3, #0
 8003918:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800391a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800391e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003920:	2301      	movs	r3, #1
 8003922:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003924:	e00f      	b.n	8003946 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800392a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800392c:	2300      	movs	r3, #0
 800392e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003930:	2301      	movs	r3, #1
 8003932:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003934:	e007      	b.n	8003946 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003936:	2300      	movs	r3, #0
 8003938:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800393a:	2300      	movs	r3, #0
 800393c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003942:	e000      	b.n	8003946 <ethernet_link_check_state+0xce>
      break;
 8003944:	bf00      	nop
    if(linkchanged)
 8003946:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d018      	beq.n	800397e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	4619      	mov	r1, r3
 8003952:	480e      	ldr	r0, [pc, #56]	@ (800398c <ethernet_link_check_state+0x114>)
 8003954:	f7fd ffb6 	bl	80018c4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800395c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4619      	mov	r1, r3
 8003966:	4809      	ldr	r0, [pc, #36]	@ (800398c <ethernet_link_check_state+0x114>)
 8003968:	f7fe f8a3 	bl	8001ab2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800396c:	4807      	ldr	r0, [pc, #28]	@ (800398c <ethernet_link_check_state+0x114>)
 800396e:	f7fd fc85 	bl	800127c <HAL_ETH_Start>
      netif_set_up(netif);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 ff5a 	bl	800482c <netif_set_up>
      netif_set_link_up(netif);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fff5 	bl	8004968 <netif_set_link_up>
}
 800397e:	bf00      	nop
 8003980:	3780      	adds	r7, #128	@ 0x80
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200001e8 	.word	0x200001e8
 800398c:	20000100 	.word	0x20000100

08003990 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003998:	4812      	ldr	r0, [pc, #72]	@ (80039e4 <HAL_ETH_RxAllocateCallback+0x54>)
 800399a:	f000 fcc1 	bl	8004320 <memp_malloc_pool>
 800399e:	60f8      	str	r0, [r7, #12]
  if (p)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d014      	beq.n	80039d0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f103 0220 	add.w	r2, r3, #32
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <HAL_ETH_RxAllocateCallback+0x58>)
 80039b4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80039be:	9201      	str	r2, [sp, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2241      	movs	r2, #65	@ 0x41
 80039c6:	2100      	movs	r1, #0
 80039c8:	2000      	movs	r0, #0
 80039ca:	f001 f9f7 	bl	8004dbc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80039ce:	e005      	b.n	80039dc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80039d0:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_ETH_RxAllocateCallback+0x5c>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	08010eac 	.word	0x08010eac
 80039e8:	08003669 	.word	0x08003669
 80039ec:	200000fc 	.word	0x200000fc

080039f0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3b20      	subs	r3, #32
 8003a0e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e003      	b.n	8003a3a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e009      	b.n	8003a5c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	891a      	ldrh	r2, [r3, #8]
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	4413      	add	r3, r2
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f2      	bne.n	8003a48 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fc48 	bl	80032fc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003a6c:	bf00      	nop
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	b21b      	sxth	r3, r3
 8003a90:	b29b      	uxth	r3, r3
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	061a      	lsls	r2, r3, #24
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0e1b      	lsrs	r3, r3, #24
 8003ac2:	4313      	orrs	r3, r2
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003ada:	f000 f8d5 	bl	8003c88 <mem_init>
  memp_init();
 8003ade:	f000 fbdb 	bl	8004298 <memp_init>
  pbuf_init();
  netif_init();
 8003ae2:	f000 fcd9 	bl	8004498 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003ae6:	f007 f853 	bl	800ab90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003aea:	f001 fdaf 	bl	800564c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003aee:	f006 ffc5 	bl	800aa7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003b06:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <ptr_to_mem+0x20>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4413      	add	r3, r2
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20003a34 	.word	0x20003a34

08003b20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <mem_to_ptr+0x20>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	b29b      	uxth	r3, r3
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20003a34 	.word	0x20003a34

08003b44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003b4c:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <plug_holes+0x120>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d206      	bcs.n	8003b64 <plug_holes+0x20>
 8003b56:	4b44      	ldr	r3, [pc, #272]	@ (8003c68 <plug_holes+0x124>)
 8003b58:	f240 12df 	movw	r2, #479	@ 0x1df
 8003b5c:	4943      	ldr	r1, [pc, #268]	@ (8003c6c <plug_holes+0x128>)
 8003b5e:	4844      	ldr	r0, [pc, #272]	@ (8003c70 <plug_holes+0x12c>)
 8003b60:	f009 fd96 	bl	800d690 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003b64:	4b43      	ldr	r3, [pc, #268]	@ (8003c74 <plug_holes+0x130>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d306      	bcc.n	8003b7c <plug_holes+0x38>
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c68 <plug_holes+0x124>)
 8003b70:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003b74:	4940      	ldr	r1, [pc, #256]	@ (8003c78 <plug_holes+0x134>)
 8003b76:	483e      	ldr	r0, [pc, #248]	@ (8003c70 <plug_holes+0x12c>)
 8003b78:	f009 fd8a 	bl	800d690 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	791b      	ldrb	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <plug_holes+0x4e>
 8003b84:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <plug_holes+0x124>)
 8003b86:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8003b8a:	493c      	ldr	r1, [pc, #240]	@ (8003c7c <plug_holes+0x138>)
 8003b8c:	4838      	ldr	r0, [pc, #224]	@ (8003c70 <plug_holes+0x12c>)
 8003b8e:	f009 fd7f 	bl	800d690 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003b9a:	d906      	bls.n	8003baa <plug_holes+0x66>
 8003b9c:	4b32      	ldr	r3, [pc, #200]	@ (8003c68 <plug_holes+0x124>)
 8003b9e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8003ba2:	4937      	ldr	r1, [pc, #220]	@ (8003c80 <plug_holes+0x13c>)
 8003ba4:	4832      	ldr	r0, [pc, #200]	@ (8003c70 <plug_holes+0x12c>)
 8003ba6:	f009 fd73 	bl	800d690 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ffa4 	bl	8003afc <ptr_to_mem>
 8003bb4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d024      	beq.n	8003c08 <plug_holes+0xc4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	791b      	ldrb	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d120      	bne.n	8003c08 <plug_holes+0xc4>
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <plug_holes+0x130>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d01b      	beq.n	8003c08 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c84 <plug_holes+0x140>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d102      	bne.n	8003be0 <plug_holes+0x9c>
      lfree = mem;
 8003bda:	4a2a      	ldr	r2, [pc, #168]	@ (8003c84 <plug_holes+0x140>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	881a      	ldrh	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003bf0:	d00a      	beq.n	8003c08 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ff80 	bl	8003afc <ptr_to_mem>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ff8e 	bl	8003b20 <mem_to_ptr>
 8003c04:	4603      	mov	r3, r0
 8003c06:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	885b      	ldrh	r3, [r3, #2]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff75 	bl	8003afc <ptr_to_mem>
 8003c12:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d01f      	beq.n	8003c5c <plug_holes+0x118>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	791b      	ldrb	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11b      	bne.n	8003c5c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003c24:	4b17      	ldr	r3, [pc, #92]	@ (8003c84 <plug_holes+0x140>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d102      	bne.n	8003c34 <plug_holes+0xf0>
      lfree = pmem;
 8003c2e:	4a15      	ldr	r2, [pc, #84]	@ (8003c84 <plug_holes+0x140>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	881a      	ldrh	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003c44:	d00a      	beq.n	8003c5c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff56 	bl	8003afc <ptr_to_mem>
 8003c50:	4604      	mov	r4, r0
 8003c52:	68b8      	ldr	r0, [r7, #8]
 8003c54:	f7ff ff64 	bl	8003b20 <mem_to_ptr>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd90      	pop	{r4, r7, pc}
 8003c64:	20003a34 	.word	0x20003a34
 8003c68:	0800e510 	.word	0x0800e510
 8003c6c:	0800e540 	.word	0x0800e540
 8003c70:	0800e558 	.word	0x0800e558
 8003c74:	20003a38 	.word	0x20003a38
 8003c78:	0800e580 	.word	0x0800e580
 8003c7c:	0800e59c 	.word	0x0800e59c
 8003c80:	0800e5b8 	.word	0x0800e5b8
 8003c84:	20003a3c 	.word	0x20003a3c

08003c88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003c8e:	4b18      	ldr	r3, [pc, #96]	@ (8003cf0 <mem_init+0x68>)
 8003c90:	3303      	adds	r3, #3
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b16      	ldr	r3, [pc, #88]	@ (8003cf4 <mem_init+0x6c>)
 8003c9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <mem_init+0x6c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003ca8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003cb6:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 8003cba:	f7ff ff1f 	bl	8003afc <ptr_to_mem>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <mem_init+0x70>)
 8003cc2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <mem_init+0x70>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <mem_init+0x70>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003cd4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003cd6:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <mem_init+0x70>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003cde:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <mem_init+0x6c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a05      	ldr	r2, [pc, #20]	@ (8003cfc <mem_init+0x74>)
 8003ce6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000220 	.word	0x20000220
 8003cf4:	20003a34 	.word	0x20003a34
 8003cf8:	20003a38 	.word	0x20003a38
 8003cfc:	20003a3c 	.word	0x20003a3c

08003d00 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff09 	bl	8003b20 <mem_to_ptr>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fef0 	bl	8003afc <ptr_to_mem>
 8003d1c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	885b      	ldrh	r3, [r3, #2]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff feea 	bl	8003afc <ptr_to_mem>
 8003d28:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003d32:	d818      	bhi.n	8003d66 <mem_link_valid+0x66>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	885b      	ldrh	r3, [r3, #2]
 8003d38:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003d3c:	d813      	bhi.n	8003d66 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003d42:	8afa      	ldrh	r2, [r7, #22]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d004      	beq.n	8003d52 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	8afa      	ldrh	r2, [r7, #22]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d109      	bne.n	8003d66 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003d52:	4b08      	ldr	r3, [pc, #32]	@ (8003d74 <mem_link_valid+0x74>)
 8003d54:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d006      	beq.n	8003d6a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	885b      	ldrh	r3, [r3, #2]
 8003d60:	8afa      	ldrh	r2, [r7, #22]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <mem_link_valid+0x6a>
    return 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <mem_link_valid+0x6c>
  }
  return 1;
 8003d6a:	2301      	movs	r3, #1
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20003a38 	.word	0x20003a38

08003d78 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d04c      	beq.n	8003e20 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003d90:	4b25      	ldr	r3, [pc, #148]	@ (8003e28 <mem_free+0xb0>)
 8003d92:	f240 2273 	movw	r2, #627	@ 0x273
 8003d96:	4925      	ldr	r1, [pc, #148]	@ (8003e2c <mem_free+0xb4>)
 8003d98:	4825      	ldr	r0, [pc, #148]	@ (8003e30 <mem_free+0xb8>)
 8003d9a:	f009 fc79 	bl	800d690 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003d9e:	e040      	b.n	8003e22 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b08      	subs	r3, #8
 8003da4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003da6:	4b23      	ldr	r3, [pc, #140]	@ (8003e34 <mem_free+0xbc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d306      	bcc.n	8003dbe <mem_free+0x46>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f103 020c 	add.w	r2, r3, #12
 8003db6:	4b20      	ldr	r3, [pc, #128]	@ (8003e38 <mem_free+0xc0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d907      	bls.n	8003dce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <mem_free+0xb0>)
 8003dc0:	f240 227f 	movw	r2, #639	@ 0x27f
 8003dc4:	491d      	ldr	r1, [pc, #116]	@ (8003e3c <mem_free+0xc4>)
 8003dc6:	481a      	ldr	r0, [pc, #104]	@ (8003e30 <mem_free+0xb8>)
 8003dc8:	f009 fc62 	bl	800d690 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003dcc:	e029      	b.n	8003e22 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	791b      	ldrb	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003dd6:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <mem_free+0xb0>)
 8003dd8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8003ddc:	4918      	ldr	r1, [pc, #96]	@ (8003e40 <mem_free+0xc8>)
 8003dde:	4814      	ldr	r0, [pc, #80]	@ (8003e30 <mem_free+0xb8>)
 8003de0:	f009 fc56 	bl	800d690 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003de4:	e01d      	b.n	8003e22 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff ff8a 	bl	8003d00 <mem_link_valid>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d107      	bne.n	8003e02 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <mem_free+0xb0>)
 8003df4:	f240 2295 	movw	r2, #661	@ 0x295
 8003df8:	4912      	ldr	r1, [pc, #72]	@ (8003e44 <mem_free+0xcc>)
 8003dfa:	480d      	ldr	r0, [pc, #52]	@ (8003e30 <mem_free+0xb8>)
 8003dfc:	f009 fc48 	bl	800d690 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003e00:	e00f      	b.n	8003e22 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003e08:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <mem_free+0xd0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d202      	bcs.n	8003e18 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003e12:	4a0d      	ldr	r2, [pc, #52]	@ (8003e48 <mem_free+0xd0>)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fe93 	bl	8003b44 <plug_holes>
 8003e1e:	e000      	b.n	8003e22 <mem_free+0xaa>
    return;
 8003e20:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	0800e510 	.word	0x0800e510
 8003e2c:	0800e5e4 	.word	0x0800e5e4
 8003e30:	0800e558 	.word	0x0800e558
 8003e34:	20003a34 	.word	0x20003a34
 8003e38:	20003a38 	.word	0x20003a38
 8003e3c:	0800e608 	.word	0x0800e608
 8003e40:	0800e624 	.word	0x0800e624
 8003e44:	0800e64c 	.word	0x0800e64c
 8003e48:	20003a3c 	.word	0x20003a3c

08003e4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	3303      	adds	r3, #3
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003e64:	8bfb      	ldrh	r3, [r7, #30]
 8003e66:	2b0b      	cmp	r3, #11
 8003e68:	d801      	bhi.n	8003e6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003e6e:	8bfb      	ldrh	r3, [r7, #30]
 8003e70:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003e74:	d803      	bhi.n	8003e7e <mem_trim+0x32>
 8003e76:	8bfa      	ldrh	r2, [r7, #30]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d201      	bcs.n	8003e82 <mem_trim+0x36>
    return NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e0cc      	b.n	800401c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003e82:	4b68      	ldr	r3, [pc, #416]	@ (8004024 <mem_trim+0x1d8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d304      	bcc.n	8003e96 <mem_trim+0x4a>
 8003e8c:	4b66      	ldr	r3, [pc, #408]	@ (8004028 <mem_trim+0x1dc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d306      	bcc.n	8003ea4 <mem_trim+0x58>
 8003e96:	4b65      	ldr	r3, [pc, #404]	@ (800402c <mem_trim+0x1e0>)
 8003e98:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8003e9c:	4964      	ldr	r1, [pc, #400]	@ (8004030 <mem_trim+0x1e4>)
 8003e9e:	4865      	ldr	r0, [pc, #404]	@ (8004034 <mem_trim+0x1e8>)
 8003ea0:	f009 fbf6 	bl	800d690 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8004024 <mem_trim+0x1d8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d304      	bcc.n	8003eb8 <mem_trim+0x6c>
 8003eae:	4b5e      	ldr	r3, [pc, #376]	@ (8004028 <mem_trim+0x1dc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d301      	bcc.n	8003ebc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	e0af      	b.n	800401c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b08      	subs	r3, #8
 8003ec0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003ec2:	69b8      	ldr	r0, [r7, #24]
 8003ec4:	f7ff fe2c 	bl	8003b20 <mem_to_ptr>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	8afb      	ldrh	r3, [r7, #22]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b08      	subs	r3, #8
 8003ed8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003eda:	8bfa      	ldrh	r2, [r7, #30]
 8003edc:	8abb      	ldrh	r3, [r7, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d906      	bls.n	8003ef0 <mem_trim+0xa4>
 8003ee2:	4b52      	ldr	r3, [pc, #328]	@ (800402c <mem_trim+0x1e0>)
 8003ee4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8003ee8:	4953      	ldr	r1, [pc, #332]	@ (8004038 <mem_trim+0x1ec>)
 8003eea:	4852      	ldr	r0, [pc, #328]	@ (8004034 <mem_trim+0x1e8>)
 8003eec:	f009 fbd0 	bl	800d690 <iprintf>
  if (newsize > size) {
 8003ef0:	8bfa      	ldrh	r2, [r7, #30]
 8003ef2:	8abb      	ldrh	r3, [r7, #20]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d901      	bls.n	8003efc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e08f      	b.n	800401c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003efc:	8bfa      	ldrh	r2, [r7, #30]
 8003efe:	8abb      	ldrh	r3, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d101      	bne.n	8003f08 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	e089      	b.n	800401c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fdf5 	bl	8003afc <ptr_to_mem>
 8003f12:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	791b      	ldrb	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d13f      	bne.n	8003f9c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003f24:	d106      	bne.n	8003f34 <mem_trim+0xe8>
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <mem_trim+0x1e0>)
 8003f28:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8003f2c:	4943      	ldr	r1, [pc, #268]	@ (800403c <mem_trim+0x1f0>)
 8003f2e:	4841      	ldr	r0, [pc, #260]	@ (8004034 <mem_trim+0x1e8>)
 8003f30:	f009 fbae 	bl	800d690 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003f3a:	8afa      	ldrh	r2, [r7, #22]
 8003f3c:	8bfb      	ldrh	r3, [r7, #30]
 8003f3e:	4413      	add	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3308      	adds	r3, #8
 8003f44:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003f46:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <mem_trim+0x1f4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d106      	bne.n	8003f5e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fdd2 	bl	8003afc <ptr_to_mem>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4a39      	ldr	r2, [pc, #228]	@ (8004040 <mem_trim+0x1f4>)
 8003f5c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fdcb 	bl	8003afc <ptr_to_mem>
 8003f66:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	89ba      	ldrh	r2, [r7, #12]
 8003f72:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	8afa      	ldrh	r2, [r7, #22]
 8003f78:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	89fa      	ldrh	r2, [r7, #14]
 8003f7e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003f88:	d047      	beq.n	800401a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fdb4 	bl	8003afc <ptr_to_mem>
 8003f94:	4602      	mov	r2, r0
 8003f96:	89fb      	ldrh	r3, [r7, #14]
 8003f98:	8053      	strh	r3, [r2, #2]
 8003f9a:	e03e      	b.n	800401a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003f9c:	8bfb      	ldrh	r3, [r7, #30]
 8003f9e:	f103 0214 	add.w	r2, r3, #20
 8003fa2:	8abb      	ldrh	r3, [r7, #20]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d838      	bhi.n	800401a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003fa8:	8afa      	ldrh	r2, [r7, #22]
 8003faa:	8bfb      	ldrh	r3, [r7, #30]
 8003fac:	4413      	add	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8003fbc:	d106      	bne.n	8003fcc <mem_trim+0x180>
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <mem_trim+0x1e0>)
 8003fc0:	f240 3216 	movw	r2, #790	@ 0x316
 8003fc4:	491d      	ldr	r1, [pc, #116]	@ (800403c <mem_trim+0x1f0>)
 8003fc6:	481b      	ldr	r0, [pc, #108]	@ (8004034 <mem_trim+0x1e8>)
 8003fc8:	f009 fb62 	bl	800d690 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003fcc:	89fb      	ldrh	r3, [r7, #14]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fd94 	bl	8003afc <ptr_to_mem>
 8003fd4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004040 <mem_trim+0x1f4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d202      	bcs.n	8003fe6 <mem_trim+0x19a>
      lfree = mem2;
 8003fe0:	4a17      	ldr	r2, [pc, #92]	@ (8004040 <mem_trim+0x1f4>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	8afa      	ldrh	r2, [r7, #22]
 8003ff8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	89fa      	ldrh	r2, [r7, #14]
 8003ffe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8004008:	d007      	beq.n	800401a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fd74 	bl	8003afc <ptr_to_mem>
 8004014:	4602      	mov	r2, r0
 8004016:	89fb      	ldrh	r3, [r7, #14]
 8004018:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800401a:	687b      	ldr	r3, [r7, #4]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20003a34 	.word	0x20003a34
 8004028:	20003a38 	.word	0x20003a38
 800402c:	0800e510 	.word	0x0800e510
 8004030:	0800e680 	.word	0x0800e680
 8004034:	0800e558 	.word	0x0800e558
 8004038:	0800e698 	.word	0x0800e698
 800403c:	0800e6b8 	.word	0x0800e6b8
 8004040:	20003a3c 	.word	0x20003a3c

08004044 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <mem_malloc+0x14>
    return NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	e0d9      	b.n	800420c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	3303      	adds	r3, #3
 800405c:	b29b      	uxth	r3, r3
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004064:	8bbb      	ldrh	r3, [r7, #28]
 8004066:	2b0b      	cmp	r3, #11
 8004068:	d801      	bhi.n	800406e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800406a:	230c      	movs	r3, #12
 800406c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800406e:	8bbb      	ldrh	r3, [r7, #28]
 8004070:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8004074:	d803      	bhi.n	800407e <mem_malloc+0x3a>
 8004076:	8bba      	ldrh	r2, [r7, #28]
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	429a      	cmp	r2, r3
 800407c:	d201      	bcs.n	8004082 <mem_malloc+0x3e>
    return NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	e0c4      	b.n	800420c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004082:	4b64      	ldr	r3, [pc, #400]	@ (8004214 <mem_malloc+0x1d0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fd4a 	bl	8003b20 <mem_to_ptr>
 800408c:	4603      	mov	r3, r0
 800408e:	83fb      	strh	r3, [r7, #30]
 8004090:	e0b4      	b.n	80041fc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004092:	8bfb      	ldrh	r3, [r7, #30]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fd31 	bl	8003afc <ptr_to_mem>
 800409a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	791b      	ldrb	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 80a4 	bne.w	80041ee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	8bfb      	ldrh	r3, [r7, #30]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f1a3 0208 	sub.w	r2, r3, #8
 80040b4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f0c0 8099 	bcc.w	80041ee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f1a3 0208 	sub.w	r2, r3, #8
 80040ca:	8bbb      	ldrh	r3, [r7, #28]
 80040cc:	3314      	adds	r3, #20
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d333      	bcc.n	800413a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80040d2:	8bfa      	ldrh	r2, [r7, #30]
 80040d4:	8bbb      	ldrh	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3308      	adds	r3, #8
 80040dc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80040de:	8a7b      	ldrh	r3, [r7, #18]
 80040e0:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80040e4:	d106      	bne.n	80040f4 <mem_malloc+0xb0>
 80040e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004218 <mem_malloc+0x1d4>)
 80040e8:	f240 3287 	movw	r2, #903	@ 0x387
 80040ec:	494b      	ldr	r1, [pc, #300]	@ (800421c <mem_malloc+0x1d8>)
 80040ee:	484c      	ldr	r0, [pc, #304]	@ (8004220 <mem_malloc+0x1dc>)
 80040f0:	f009 face 	bl	800d690 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fd00 	bl	8003afc <ptr_to_mem>
 80040fc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8bfa      	ldrh	r2, [r7, #30]
 8004110:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	8a7a      	ldrh	r2, [r7, #18]
 8004116:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2201      	movs	r2, #1
 800411c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8004126:	d00b      	beq.n	8004140 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fce5 	bl	8003afc <ptr_to_mem>
 8004132:	4602      	mov	r2, r0
 8004134:	8a7b      	ldrh	r3, [r7, #18]
 8004136:	8053      	strh	r3, [r2, #2]
 8004138:	e002      	b.n	8004140 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2201      	movs	r2, #1
 800413e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004140:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <mem_malloc+0x1d0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	429a      	cmp	r2, r3
 8004148:	d127      	bne.n	800419a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800414a:	4b32      	ldr	r3, [pc, #200]	@ (8004214 <mem_malloc+0x1d0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004150:	e005      	b.n	800415e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fcd0 	bl	8003afc <ptr_to_mem>
 800415c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	791b      	ldrb	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <mem_malloc+0x12c>
 8004166:	4b2f      	ldr	r3, [pc, #188]	@ (8004224 <mem_malloc+0x1e0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d1f0      	bne.n	8004152 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004170:	4a28      	ldr	r2, [pc, #160]	@ (8004214 <mem_malloc+0x1d0>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004176:	4b27      	ldr	r3, [pc, #156]	@ (8004214 <mem_malloc+0x1d0>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b2a      	ldr	r3, [pc, #168]	@ (8004224 <mem_malloc+0x1e0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d00b      	beq.n	800419a <mem_malloc+0x156>
 8004182:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <mem_malloc+0x1d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	791b      	ldrb	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <mem_malloc+0x156>
 800418c:	4b22      	ldr	r3, [pc, #136]	@ (8004218 <mem_malloc+0x1d4>)
 800418e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8004192:	4925      	ldr	r1, [pc, #148]	@ (8004228 <mem_malloc+0x1e4>)
 8004194:	4822      	ldr	r0, [pc, #136]	@ (8004220 <mem_malloc+0x1dc>)
 8004196:	f009 fa7b 	bl	800d690 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800419a:	8bba      	ldrh	r2, [r7, #28]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4413      	add	r3, r2
 80041a0:	3308      	adds	r3, #8
 80041a2:	4a20      	ldr	r2, [pc, #128]	@ (8004224 <mem_malloc+0x1e0>)
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d906      	bls.n	80041b8 <mem_malloc+0x174>
 80041aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <mem_malloc+0x1d4>)
 80041ac:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80041b0:	491e      	ldr	r1, [pc, #120]	@ (800422c <mem_malloc+0x1e8>)
 80041b2:	481b      	ldr	r0, [pc, #108]	@ (8004220 <mem_malloc+0x1dc>)
 80041b4:	f009 fa6c 	bl	800d690 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <mem_malloc+0x18c>
 80041c2:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <mem_malloc+0x1d4>)
 80041c4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80041c8:	4919      	ldr	r1, [pc, #100]	@ (8004230 <mem_malloc+0x1ec>)
 80041ca:	4815      	ldr	r0, [pc, #84]	@ (8004220 <mem_malloc+0x1dc>)
 80041cc:	f009 fa60 	bl	800d690 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <mem_malloc+0x1a4>
 80041da:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <mem_malloc+0x1d4>)
 80041dc:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80041e0:	4914      	ldr	r1, [pc, #80]	@ (8004234 <mem_malloc+0x1f0>)
 80041e2:	480f      	ldr	r0, [pc, #60]	@ (8004220 <mem_malloc+0x1dc>)
 80041e4:	f009 fa54 	bl	800d690 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3308      	adds	r3, #8
 80041ec:	e00e      	b.n	800420c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80041ee:	8bfb      	ldrh	r3, [r7, #30]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fc83 	bl	8003afc <ptr_to_mem>
 80041f6:	4603      	mov	r3, r0
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80041fc:	8bfa      	ldrh	r2, [r7, #30]
 80041fe:	8bbb      	ldrh	r3, [r7, #28]
 8004200:	f5c3 5360 	rsb	r3, r3, #14336	@ 0x3800
 8004204:	429a      	cmp	r2, r3
 8004206:	f4ff af44 	bcc.w	8004092 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20003a3c 	.word	0x20003a3c
 8004218:	0800e510 	.word	0x0800e510
 800421c:	0800e6b8 	.word	0x0800e6b8
 8004220:	0800e558 	.word	0x0800e558
 8004224:	20003a38 	.word	0x20003a38
 8004228:	0800e6cc 	.word	0x0800e6cc
 800422c:	0800e6e8 	.word	0x0800e6e8
 8004230:	0800e718 	.word	0x0800e718
 8004234:	0800e748 	.word	0x0800e748

08004238 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	3303      	adds	r3, #3
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e011      	b.n	800427e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4413      	add	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	885b      	ldrh	r3, [r3, #2]
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4293      	cmp	r3, r2
 8004288:	dbe7      	blt.n	800425a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800428a:	bf00      	nop
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800429e:	2300      	movs	r3, #0
 80042a0:	80fb      	strh	r3, [r7, #6]
 80042a2:	e009      	b.n	80042b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <memp_init+0x30>)
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ffc3 	bl	8004238 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	3301      	adds	r3, #1
 80042b6:	80fb      	strh	r3, [r7, #6]
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d9f2      	bls.n	80042a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	08010f24 	.word	0x08010f24

080042cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <do_memp_malloc_pool+0x38>
 80042f6:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <do_memp_malloc_pool+0x48>)
 80042f8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80042fc:	4906      	ldr	r1, [pc, #24]	@ (8004318 <do_memp_malloc_pool+0x4c>)
 80042fe:	4807      	ldr	r0, [pc, #28]	@ (800431c <do_memp_malloc_pool+0x50>)
 8004300:	f009 f9c6 	bl	800d690 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	e000      	b.n	800430a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	0800e76c 	.word	0x0800e76c
 8004318:	0800e79c 	.word	0x0800e79c
 800431c:	0800e7c0 	.word	0x0800e7c0

08004320 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <memp_malloc_pool+0x1c>
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <memp_malloc_pool+0x38>)
 8004330:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004334:	4909      	ldr	r1, [pc, #36]	@ (800435c <memp_malloc_pool+0x3c>)
 8004336:	480a      	ldr	r0, [pc, #40]	@ (8004360 <memp_malloc_pool+0x40>)
 8004338:	f009 f9aa 	bl	800d690 <iprintf>
  if (desc == NULL) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <memp_malloc_pool+0x26>
    return NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	e003      	b.n	800434e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ffc0 	bl	80042cc <do_memp_malloc_pool>
 800434c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	0800e76c 	.word	0x0800e76c
 800435c:	0800e7e8 	.word	0x0800e7e8
 8004360:	0800e7c0 	.word	0x0800e7c0

08004364 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d908      	bls.n	8004386 <memp_malloc+0x22>
 8004374:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <memp_malloc+0x3c>)
 8004376:	f240 1257 	movw	r2, #343	@ 0x157
 800437a:	490a      	ldr	r1, [pc, #40]	@ (80043a4 <memp_malloc+0x40>)
 800437c:	480a      	ldr	r0, [pc, #40]	@ (80043a8 <memp_malloc+0x44>)
 800437e:	f009 f987 	bl	800d690 <iprintf>
 8004382:	2300      	movs	r3, #0
 8004384:	e008      	b.n	8004398 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <memp_malloc+0x48>)
 800438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ff9c 	bl	80042cc <do_memp_malloc_pool>
 8004394:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	0800e76c 	.word	0x0800e76c
 80043a4:	0800e7fc 	.word	0x0800e7fc
 80043a8:	0800e7c0 	.word	0x0800e7c0
 80043ac:	08010f24 	.word	0x08010f24

080043b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <do_memp_free_pool+0x22>
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <do_memp_free_pool+0x40>)
 80043c6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80043ca:	490a      	ldr	r1, [pc, #40]	@ (80043f4 <do_memp_free_pool+0x44>)
 80043cc:	480a      	ldr	r0, [pc, #40]	@ (80043f8 <do_memp_free_pool+0x48>)
 80043ce:	f009 f95f 	bl	800d690 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0800e76c 	.word	0x0800e76c
 80043f4:	0800e81c 	.word	0x0800e81c
 80043f8:	0800e7c0 	.word	0x0800e7c0

080043fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <memp_free_pool+0x1e>
 800440c:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <memp_free_pool+0x3c>)
 800440e:	f240 1295 	movw	r2, #405	@ 0x195
 8004412:	490a      	ldr	r1, [pc, #40]	@ (800443c <memp_free_pool+0x40>)
 8004414:	480a      	ldr	r0, [pc, #40]	@ (8004440 <memp_free_pool+0x44>)
 8004416:	f009 f93b 	bl	800d690 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <memp_free_pool+0x34>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004426:	6839      	ldr	r1, [r7, #0]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ffc1 	bl	80043b0 <do_memp_free_pool>
 800442e:	e000      	b.n	8004432 <memp_free_pool+0x36>
    return;
 8004430:	bf00      	nop
}
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	0800e76c 	.word	0x0800e76c
 800443c:	0800e7e8 	.word	0x0800e7e8
 8004440:	0800e7c0 	.word	0x0800e7c0

08004444 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b08      	cmp	r3, #8
 8004454:	d907      	bls.n	8004466 <memp_free+0x22>
 8004456:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <memp_free+0x44>)
 8004458:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800445c:	490b      	ldr	r1, [pc, #44]	@ (800448c <memp_free+0x48>)
 800445e:	480c      	ldr	r0, [pc, #48]	@ (8004490 <memp_free+0x4c>)
 8004460:	f009 f916 	bl	800d690 <iprintf>
 8004464:	e00c      	b.n	8004480 <memp_free+0x3c>

  if (mem == NULL) {
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <memp_free+0x50>)
 8004470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff9a 	bl	80043b0 <do_memp_free_pool>
 800447c:	e000      	b.n	8004480 <memp_free+0x3c>
    return;
 800447e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	0800e76c 	.word	0x0800e76c
 800448c:	0800e83c 	.word	0x0800e83c
 8004490:	0800e7c0 	.word	0x0800e7c0
 8004494:	08010f24 	.word	0x08010f24

08004498 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <netif_add+0x26>
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <netif_add+0x174>)
 80044be:	f240 1227 	movw	r2, #295	@ 0x127
 80044c2:	4957      	ldr	r1, [pc, #348]	@ (8004620 <netif_add+0x178>)
 80044c4:	4857      	ldr	r0, [pc, #348]	@ (8004624 <netif_add+0x17c>)
 80044c6:	f009 f8e3 	bl	800d690 <iprintf>
 80044ca:	2300      	movs	r3, #0
 80044cc:	e0a2      	b.n	8004614 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d108      	bne.n	80044e6 <netif_add+0x3e>
 80044d4:	4b51      	ldr	r3, [pc, #324]	@ (800461c <netif_add+0x174>)
 80044d6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80044da:	4953      	ldr	r1, [pc, #332]	@ (8004628 <netif_add+0x180>)
 80044dc:	4851      	ldr	r0, [pc, #324]	@ (8004624 <netif_add+0x17c>)
 80044de:	f009 f8d7 	bl	800d690 <iprintf>
 80044e2:	2300      	movs	r3, #0
 80044e4:	e096      	b.n	8004614 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80044ec:	4b4f      	ldr	r3, [pc, #316]	@ (800462c <netif_add+0x184>)
 80044ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80044f6:	4b4d      	ldr	r3, [pc, #308]	@ (800462c <netif_add+0x184>)
 80044f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004500:	4b4a      	ldr	r3, [pc, #296]	@ (800462c <netif_add+0x184>)
 8004502:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a45      	ldr	r2, [pc, #276]	@ (8004630 <netif_add+0x188>)
 800451a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004536:	4b3f      	ldr	r3, [pc, #252]	@ (8004634 <netif_add+0x18c>)
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004544:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f913 	bl	8004778 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	4798      	blx	r3
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <netif_add+0xba>
    return NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	e058      	b.n	8004614 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004568:	2bff      	cmp	r3, #255	@ 0xff
 800456a:	d103      	bne.n	8004574 <netif_add+0xcc>
        netif->num = 0;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004578:	4b2f      	ldr	r3, [pc, #188]	@ (8004638 <netif_add+0x190>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e02b      	b.n	80045d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	429a      	cmp	r2, r3
 8004586:	d106      	bne.n	8004596 <netif_add+0xee>
 8004588:	4b24      	ldr	r3, [pc, #144]	@ (800461c <netif_add+0x174>)
 800458a:	f240 128b 	movw	r2, #395	@ 0x18b
 800458e:	492b      	ldr	r1, [pc, #172]	@ (800463c <netif_add+0x194>)
 8004590:	4824      	ldr	r0, [pc, #144]	@ (8004624 <netif_add+0x17c>)
 8004592:	f009 f87d 	bl	800d690 <iprintf>
        num_netifs++;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	3301      	adds	r3, #1
 800459a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2bff      	cmp	r3, #255	@ 0xff
 80045a0:	dd06      	ble.n	80045b0 <netif_add+0x108>
 80045a2:	4b1e      	ldr	r3, [pc, #120]	@ (800461c <netif_add+0x174>)
 80045a4:	f240 128d 	movw	r2, #397	@ 0x18d
 80045a8:	4925      	ldr	r1, [pc, #148]	@ (8004640 <netif_add+0x198>)
 80045aa:	481e      	ldr	r0, [pc, #120]	@ (8004624 <netif_add+0x17c>)
 80045ac:	f009 f870 	bl	800d690 <iprintf>
        if (netif2->num == netif->num) {
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045bc:	429a      	cmp	r2, r3
 80045be:	d108      	bne.n	80045d2 <netif_add+0x12a>
          netif->num++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045c6:	3301      	adds	r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80045d0:	e005      	b.n	80045de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1d0      	bne.n	8004580 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1be      	bne.n	8004562 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80045ec:	d103      	bne.n	80045f6 <netif_add+0x14e>
    netif_num = 0;
 80045ee:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <netif_add+0x18c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e006      	b.n	8004604 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045fc:	3301      	adds	r3, #1
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <netif_add+0x18c>)
 8004602:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004604:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <netif_add+0x190>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800460c:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <netif_add+0x190>)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	0800e858 	.word	0x0800e858
 8004620:	0800e8ec 	.word	0x0800e8ec
 8004624:	0800e8a8 	.word	0x0800e8a8
 8004628:	0800e908 	.word	0x0800e908
 800462c:	08010f88 	.word	0x08010f88
 8004630:	08004a53 	.word	0x08004a53
 8004634:	20006934 	.word	0x20006934
 8004638:	2000692c 	.word	0x2000692c
 800463c:	0800e92c 	.word	0x0800e92c
 8004640:	0800e940 	.word	0x0800e940

08004644 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f002 fb45 	bl	8006ce0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f006 fc23 	bl	800aea4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <netif_do_set_ipaddr+0x20>
 800467a:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <netif_do_set_ipaddr+0x88>)
 800467c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8004680:	491c      	ldr	r1, [pc, #112]	@ (80046f4 <netif_do_set_ipaddr+0x8c>)
 8004682:	481d      	ldr	r0, [pc, #116]	@ (80046f8 <netif_do_set_ipaddr+0x90>)
 8004684:	f009 f804 	bl	800d690 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <netif_do_set_ipaddr+0x34>
 800468e:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <netif_do_set_ipaddr+0x88>)
 8004690:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004694:	4917      	ldr	r1, [pc, #92]	@ (80046f4 <netif_do_set_ipaddr+0x8c>)
 8004696:	4818      	ldr	r0, [pc, #96]	@ (80046f8 <netif_do_set_ipaddr+0x90>)
 8004698:	f008 fffa 	bl	800d690 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3304      	adds	r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d01c      	beq.n	80046e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3304      	adds	r3, #4
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ffbf 	bl	8004644 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <netif_do_set_ipaddr+0x6a>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	e000      	b.n	80046d4 <netif_do_set_ipaddr+0x6c>
 80046d2:	2300      	movs	r3, #0
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80046d8:	2101      	movs	r1, #1
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8d2 	bl	8004884 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	0800e858 	.word	0x0800e858
 80046f4:	0800e970 	.word	0x0800e970
 80046f8:	0800e8a8 	.word	0x0800e8a8

080046fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3308      	adds	r3, #8
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d00a      	beq.n	800472c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <netif_do_set_netmask+0x26>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	e000      	b.n	8004724 <netif_do_set_netmask+0x28>
 8004722:	2300      	movs	r3, #0
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	330c      	adds	r3, #12
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d00a      	beq.n	800476a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <netif_do_set_gw+0x26>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	e000      	b.n	8004762 <netif_do_set_gw+0x28>
 8004760:	2300      	movs	r3, #0
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004794:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <netif_set_addr+0x90>)
 8004796:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <netif_set_addr+0x90>)
 80047a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80047a8:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <netif_set_addr+0x90>)
 80047aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <netif_set_addr+0x42>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <netif_set_addr+0x46>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <netif_set_addr+0x48>
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d006      	beq.n	80047d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	461a      	mov	r2, r3
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff ff49 	bl	8004668 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff ff8e 	bl	80046fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff ffa8 	bl	800473a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	461a      	mov	r2, r3
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff ff35 	bl	8004668 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80047fe:	bf00      	nop
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	08010f88 	.word	0x08010f88

0800480c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004814:	4a04      	ldr	r2, [pc, #16]	@ (8004828 <netif_set_default+0x1c>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20006930 	.word	0x20006930

0800482c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <netif_set_up+0x1e>
 800483a:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <netif_set_up+0x4c>)
 800483c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004840:	490e      	ldr	r1, [pc, #56]	@ (800487c <netif_set_up+0x50>)
 8004842:	480f      	ldr	r0, [pc, #60]	@ (8004880 <netif_set_up+0x54>)
 8004844:	f008 ff24 	bl	800d690 <iprintf>
 8004848:	e013      	b.n	8004872 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10c      	bne.n	8004872 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800486a:	2103      	movs	r1, #3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f809 	bl	8004884 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	0800e858 	.word	0x0800e858
 800487c:	0800e9e0 	.word	0x0800e9e0
 8004880:	0800e8a8 	.word	0x0800e8a8

08004884 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <netif_issue_reports+0x20>
 8004896:	4b18      	ldr	r3, [pc, #96]	@ (80048f8 <netif_issue_reports+0x74>)
 8004898:	f240 326d 	movw	r2, #877	@ 0x36d
 800489c:	4917      	ldr	r1, [pc, #92]	@ (80048fc <netif_issue_reports+0x78>)
 800489e:	4818      	ldr	r0, [pc, #96]	@ (8004900 <netif_issue_reports+0x7c>)
 80048a0:	f008 fef6 	bl	800d690 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01e      	beq.n	80048f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80048b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d013      	beq.n	80048f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3304      	adds	r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f007 fa45 	bl	800bd78 <etharp_request>
 80048ee:	e000      	b.n	80048f2 <netif_issue_reports+0x6e>
    return;
 80048f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	0800e858 	.word	0x0800e858
 80048fc:	0800e9fc 	.word	0x0800e9fc
 8004900:	0800e8a8 	.word	0x0800e8a8

08004904 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <netif_set_down+0x1e>
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <netif_set_down+0x58>)
 8004914:	f240 329b 	movw	r2, #923	@ 0x39b
 8004918:	4911      	ldr	r1, [pc, #68]	@ (8004960 <netif_set_down+0x5c>)
 800491a:	4812      	ldr	r0, [pc, #72]	@ (8004964 <netif_set_down+0x60>)
 800491c:	f008 feb8 	bl	800d690 <iprintf>
 8004920:	e019      	b.n	8004956 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f006 fdcf 	bl	800b4f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800e858 	.word	0x0800e858
 8004960:	0800ea20 	.word	0x0800ea20
 8004964:	0800e8a8 	.word	0x0800e8a8

08004968 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <netif_set_link_up+0x1e>
 8004976:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <netif_set_link_up+0x5c>)
 8004978:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800497c:	4912      	ldr	r1, [pc, #72]	@ (80049c8 <netif_set_link_up+0x60>)
 800497e:	4813      	ldr	r0, [pc, #76]	@ (80049cc <netif_set_link_up+0x64>)
 8004980:	f008 fe86 	bl	800d690 <iprintf>
 8004984:	e01b      	b.n	80049be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d114      	bne.n	80049be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800499a:	f043 0304 	orr.w	r3, r3, #4
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80049a6:	2103      	movs	r1, #3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff6b 	bl	8004884 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <netif_set_link_up+0x56>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0800e858 	.word	0x0800e858
 80049c8:	0800ea40 	.word	0x0800ea40
 80049cc:	0800e8a8 	.word	0x0800e8a8

080049d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <netif_set_link_down+0x1e>
 80049de:	4b11      	ldr	r3, [pc, #68]	@ (8004a24 <netif_set_link_down+0x54>)
 80049e0:	f240 4206 	movw	r2, #1030	@ 0x406
 80049e4:	4910      	ldr	r1, [pc, #64]	@ (8004a28 <netif_set_link_down+0x58>)
 80049e6:	4811      	ldr	r0, [pc, #68]	@ (8004a2c <netif_set_link_down+0x5c>)
 80049e8:	f008 fe52 	bl	800d690 <iprintf>
 80049ec:	e017      	b.n	8004a1e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d010      	beq.n	8004a1e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004a02:	f023 0304 	bic.w	r3, r3, #4
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <netif_set_link_down+0x4e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	0800e858 	.word	0x0800e858
 8004a28:	0800ea64 	.word	0x0800ea64
 8004a2c:	0800e8a8 	.word	0x0800e8a8

08004a30 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	61da      	str	r2, [r3, #28]
  }
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004a5e:	f06f 030b 	mvn.w	r3, #11
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004a80:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <netif_get_by_index+0x48>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e00c      	b.n	8004aa2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a8e:	3301      	adds	r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	79fa      	ldrb	r2, [r7, #7]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d101      	bne.n	8004a9c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	e006      	b.n	8004aaa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ef      	bne.n	8004a88 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	2000692c 	.word	0x2000692c

08004abc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <pbuf_free_ooseq+0x38>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <pbuf_free_ooseq+0x3c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	e00a      	b.n	8004ae6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f002 f93f 	bl	8006d5c <tcp_free_ooseq>
      return;
 8004ade:	e005      	b.n	8004aec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f1      	bne.n	8004ad0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20006935 	.word	0x20006935
 8004af8:	20006944 	.word	0x20006944

08004afc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004b00:	4b03      	ldr	r3, [pc, #12]	@ (8004b10 <pbuf_pool_is_empty+0x14>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004b06:	bf00      	nop
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20006935 	.word	0x20006935

08004b14 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	460b      	mov	r3, r1
 8004b24:	80fb      	strh	r3, [r7, #6]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88ba      	ldrh	r2, [r7, #4]
 8004b40:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004b42:	8b3b      	ldrh	r3, [r7, #24]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	7f3a      	ldrb	r2, [r7, #28]
 8004b4e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	73da      	strb	r2, [r3, #15]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08c      	sub	sp, #48	@ 0x30
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
 8004b72:	460b      	mov	r3, r1
 8004b74:	80bb      	strh	r3, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004b7e:	887b      	ldrh	r3, [r7, #2]
 8004b80:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004b84:	d07f      	beq.n	8004c86 <pbuf_alloc+0x11e>
 8004b86:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004b8a:	f300 80c8 	bgt.w	8004d1e <pbuf_alloc+0x1b6>
 8004b8e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004b92:	d010      	beq.n	8004bb6 <pbuf_alloc+0x4e>
 8004b94:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004b98:	f300 80c1 	bgt.w	8004d1e <pbuf_alloc+0x1b6>
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d002      	beq.n	8004ba6 <pbuf_alloc+0x3e>
 8004ba0:	2b41      	cmp	r3, #65	@ 0x41
 8004ba2:	f040 80bc 	bne.w	8004d1e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	88bb      	ldrh	r3, [r7, #4]
 8004baa:	4619      	mov	r1, r3
 8004bac:	2000      	movs	r0, #0
 8004bae:	f000 f8d1 	bl	8004d54 <pbuf_alloc_reference>
 8004bb2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004bb4:	e0bd      	b.n	8004d32 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004bbe:	88bb      	ldrh	r3, [r7, #4]
 8004bc0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004bc2:	2008      	movs	r0, #8
 8004bc4:	f7ff fbce 	bl	8004364 <memp_malloc>
 8004bc8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004bd0:	f7ff ff94 	bl	8004afc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004bda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bdc:	f000 faa8 	bl	8005130 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e0a7      	b.n	8004d34 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004be4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004be6:	3303      	adds	r3, #3
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8b7a      	ldrh	r2, [r7, #26]
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf28      	it	cs
 8004bfc:	4613      	movcs	r3, r2
 8004bfe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c02:	3310      	adds	r3, #16
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4413      	add	r3, r2
 8004c08:	3303      	adds	r3, #3
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	4618      	mov	r0, r3
 8004c10:	89f9      	ldrh	r1, [r7, #14]
 8004c12:	8b7a      	ldrh	r2, [r7, #26]
 8004c14:	2300      	movs	r3, #0
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	887b      	ldrh	r3, [r7, #2]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6938      	ldr	r0, [r7, #16]
 8004c22:	f7ff ff77 	bl	8004b14 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <pbuf_alloc+0xd8>
 8004c32:	4b42      	ldr	r3, [pc, #264]	@ (8004d3c <pbuf_alloc+0x1d4>)
 8004c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c38:	4941      	ldr	r1, [pc, #260]	@ (8004d40 <pbuf_alloc+0x1d8>)
 8004c3a:	4842      	ldr	r0, [pc, #264]	@ (8004d44 <pbuf_alloc+0x1dc>)
 8004c3c:	f008 fd28 	bl	800d690 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004c40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c42:	3303      	adds	r3, #3
 8004c44:	f023 0303 	bic.w	r3, r3, #3
 8004c48:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004c4c:	d106      	bne.n	8004c5c <pbuf_alloc+0xf4>
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d3c <pbuf_alloc+0x1d4>)
 8004c50:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004c54:	493c      	ldr	r1, [pc, #240]	@ (8004d48 <pbuf_alloc+0x1e0>)
 8004c56:	483b      	ldr	r0, [pc, #236]	@ (8004d44 <pbuf_alloc+0x1dc>)
 8004c58:	f008 fd1a 	bl	800d690 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c66:	e002      	b.n	8004c6e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004c72:	8b7a      	ldrh	r2, [r7, #26]
 8004c74:	89fb      	ldrh	r3, [r7, #14]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8004c7e:	8b7b      	ldrh	r3, [r7, #26]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d19e      	bne.n	8004bc2 <pbuf_alloc+0x5a>
      break;
 8004c84:	e055      	b.n	8004d32 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004c86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c88:	3303      	adds	r3, #3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f023 0303 	bic.w	r3, r3, #3
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	88bb      	ldrh	r3, [r7, #4]
 8004c94:	3303      	adds	r3, #3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f023 0303 	bic.w	r3, r3, #3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004ca2:	8b3b      	ldrh	r3, [r7, #24]
 8004ca4:	3310      	adds	r3, #16
 8004ca6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004ca8:	8b3a      	ldrh	r2, [r7, #24]
 8004caa:	88bb      	ldrh	r3, [r7, #4]
 8004cac:	3303      	adds	r3, #3
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d306      	bcc.n	8004cc4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004cb6:	8afa      	ldrh	r2, [r7, #22]
 8004cb8:	88bb      	ldrh	r3, [r7, #4]
 8004cba:	3303      	adds	r3, #3
 8004cbc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d201      	bcs.n	8004cc8 <pbuf_alloc+0x160>
        return NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e035      	b.n	8004d34 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004cc8:	8afb      	ldrh	r3, [r7, #22]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f9ba 	bl	8004044 <mem_malloc>
 8004cd0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <pbuf_alloc+0x174>
        return NULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e02b      	b.n	8004d34 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004cdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cde:	3310      	adds	r3, #16
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3303      	adds	r3, #3
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	4618      	mov	r0, r3
 8004cec:	88b9      	ldrh	r1, [r7, #4]
 8004cee:	88ba      	ldrh	r2, [r7, #4]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cfe:	f7ff ff09 	bl	8004b14 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d010      	beq.n	8004d30 <pbuf_alloc+0x1c8>
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <pbuf_alloc+0x1d4>)
 8004d10:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8004d14:	490d      	ldr	r1, [pc, #52]	@ (8004d4c <pbuf_alloc+0x1e4>)
 8004d16:	480b      	ldr	r0, [pc, #44]	@ (8004d44 <pbuf_alloc+0x1dc>)
 8004d18:	f008 fcba 	bl	800d690 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004d1c:	e008      	b.n	8004d30 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	@ (8004d3c <pbuf_alloc+0x1d4>)
 8004d20:	f240 1227 	movw	r2, #295	@ 0x127
 8004d24:	490a      	ldr	r1, [pc, #40]	@ (8004d50 <pbuf_alloc+0x1e8>)
 8004d26:	4807      	ldr	r0, [pc, #28]	@ (8004d44 <pbuf_alloc+0x1dc>)
 8004d28:	f008 fcb2 	bl	800d690 <iprintf>
      return NULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e001      	b.n	8004d34 <pbuf_alloc+0x1cc>
      break;
 8004d30:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3728      	adds	r7, #40	@ 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0800ea88 	.word	0x0800ea88
 8004d40:	0800eab8 	.word	0x0800eab8
 8004d44:	0800eae8 	.word	0x0800eae8
 8004d48:	0800eb10 	.word	0x0800eb10
 8004d4c:	0800eb44 	.word	0x0800eb44
 8004d50:	0800eb70 	.word	0x0800eb70

08004d54 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
 8004d60:	4613      	mov	r3, r2
 8004d62:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004d64:	883b      	ldrh	r3, [r7, #0]
 8004d66:	2b41      	cmp	r3, #65	@ 0x41
 8004d68:	d009      	beq.n	8004d7e <pbuf_alloc_reference+0x2a>
 8004d6a:	883b      	ldrh	r3, [r7, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d006      	beq.n	8004d7e <pbuf_alloc_reference+0x2a>
 8004d70:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <pbuf_alloc_reference+0x5c>)
 8004d72:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8004d76:	490f      	ldr	r1, [pc, #60]	@ (8004db4 <pbuf_alloc_reference+0x60>)
 8004d78:	480f      	ldr	r0, [pc, #60]	@ (8004db8 <pbuf_alloc_reference+0x64>)
 8004d7a:	f008 fc89 	bl	800d690 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004d7e:	2007      	movs	r0, #7
 8004d80:	f7ff faf0 	bl	8004364 <memp_malloc>
 8004d84:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e00b      	b.n	8004da8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004d90:	8879      	ldrh	r1, [r7, #2]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	2300      	movs	r3, #0
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	883b      	ldrh	r3, [r7, #0]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff feb7 	bl	8004b14 <pbuf_init_alloced_pbuf>
  return p;
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	0800ea88 	.word	0x0800ea88
 8004db4:	0800eb8c 	.word	0x0800eb8c
 8004db8:	0800eae8 	.word	0x0800eae8

08004dbc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	81bb      	strh	r3, [r7, #12]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004dd4:	8a7b      	ldrh	r3, [r7, #18]
 8004dd6:	3303      	adds	r3, #3
 8004dd8:	f023 0203 	bic.w	r2, r3, #3
 8004ddc:	89bb      	ldrh	r3, [r7, #12]
 8004dde:	441a      	add	r2, r3
 8004de0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d901      	bls.n	8004dea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e018      	b.n	8004e1c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004df0:	8a7b      	ldrh	r3, [r7, #18]
 8004df2:	3303      	adds	r3, #3
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	e001      	b.n	8004e04 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	89b9      	ldrh	r1, [r7, #12]
 8004e08:	89ba      	ldrh	r2, [r7, #12]
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	897b      	ldrh	r3, [r7, #10]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	460b      	mov	r3, r1
 8004e14:	6979      	ldr	r1, [r7, #20]
 8004e16:	f7ff fe7d 	bl	8004b14 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004e1a:	687b      	ldr	r3, [r7, #4]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <pbuf_realloc+0x20>
 8004e36:	4b3a      	ldr	r3, [pc, #232]	@ (8004f20 <pbuf_realloc+0xfc>)
 8004e38:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8004e3c:	4939      	ldr	r1, [pc, #228]	@ (8004f24 <pbuf_realloc+0x100>)
 8004e3e:	483a      	ldr	r0, [pc, #232]	@ (8004f28 <pbuf_realloc+0x104>)
 8004e40:	f008 fc26 	bl	800d690 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	891b      	ldrh	r3, [r3, #8]
 8004e48:	887a      	ldrh	r2, [r7, #2]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d263      	bcs.n	8004f16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	891a      	ldrh	r2, [r3, #8]
 8004e52:	887b      	ldrh	r3, [r7, #2]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004e58:	887b      	ldrh	r3, [r7, #2]
 8004e5a:	817b      	strh	r3, [r7, #10]
  q = p;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004e60:	e018      	b.n	8004e94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	895b      	ldrh	r3, [r3, #10]
 8004e66:	897a      	ldrh	r2, [r7, #10]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	891a      	ldrh	r2, [r3, #8]
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <pbuf_realloc+0x70>
 8004e86:	4b26      	ldr	r3, [pc, #152]	@ (8004f20 <pbuf_realloc+0xfc>)
 8004e88:	f240 12af 	movw	r2, #431	@ 0x1af
 8004e8c:	4927      	ldr	r1, [pc, #156]	@ (8004f2c <pbuf_realloc+0x108>)
 8004e8e:	4826      	ldr	r0, [pc, #152]	@ (8004f28 <pbuf_realloc+0x104>)
 8004e90:	f008 fbfe 	bl	800d690 <iprintf>
  while (rem_len > q->len) {
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	895b      	ldrh	r3, [r3, #10]
 8004e98:	897a      	ldrh	r2, [r7, #10]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d8e1      	bhi.n	8004e62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	7b1b      	ldrb	r3, [r3, #12]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d121      	bne.n	8004eee <pbuf_realloc+0xca>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	895b      	ldrh	r3, [r3, #10]
 8004eae:	897a      	ldrh	r2, [r7, #10]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d01c      	beq.n	8004eee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	7b5b      	ldrb	r3, [r3, #13]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	897b      	ldrh	r3, [r7, #10]
 8004ecc:	4413      	add	r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7fe ffba 	bl	8003e4c <mem_trim>
 8004ed8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <pbuf_realloc+0xca>
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8004f20 <pbuf_realloc+0xfc>)
 8004ee2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8004ee6:	4912      	ldr	r1, [pc, #72]	@ (8004f30 <pbuf_realloc+0x10c>)
 8004ee8:	480f      	ldr	r0, [pc, #60]	@ (8004f28 <pbuf_realloc+0x104>)
 8004eea:	f008 fbd1 	bl	800d690 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	897a      	ldrh	r2, [r7, #10]
 8004ef2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	895a      	ldrh	r2, [r3, #10]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f911 	bl	8005130 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e000      	b.n	8004f18 <pbuf_realloc+0xf4>
    return;
 8004f16:	bf00      	nop

}
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	0800ea88 	.word	0x0800ea88
 8004f24:	0800eba0 	.word	0x0800eba0
 8004f28:	0800eae8 	.word	0x0800eae8
 8004f2c:	0800ebb8 	.word	0x0800ebb8
 8004f30:	0800ebd0 	.word	0x0800ebd0

08004f34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <pbuf_add_header_impl+0x22>
 8004f48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff8 <pbuf_add_header_impl+0xc4>)
 8004f4a:	f240 12df 	movw	r2, #479	@ 0x1df
 8004f4e:	492b      	ldr	r1, [pc, #172]	@ (8004ffc <pbuf_add_header_impl+0xc8>)
 8004f50:	482b      	ldr	r0, [pc, #172]	@ (8005000 <pbuf_add_header_impl+0xcc>)
 8004f52:	f008 fb9d 	bl	800d690 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <pbuf_add_header_impl+0x30>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f62:	d301      	bcc.n	8004f68 <pbuf_add_header_impl+0x34>
    return 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e043      	b.n	8004ff0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <pbuf_add_header_impl+0x3e>
    return 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e03e      	b.n	8004ff0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	891a      	ldrh	r2, [r3, #8]
 8004f7a:	8a7b      	ldrh	r3, [r7, #18]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8a7a      	ldrh	r2, [r7, #18]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d901      	bls.n	8004f8a <pbuf_add_header_impl+0x56>
    return 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e032      	b.n	8004ff0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	7b1b      	ldrb	r3, [r3, #12]
 8004f8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004f90:	8a3b      	ldrh	r3, [r7, #16]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	425b      	negs	r3, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3310      	adds	r3, #16
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d20d      	bcs.n	8004fcc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e01d      	b.n	8004ff0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	425b      	negs	r3, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e001      	b.n	8004fcc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e011      	b.n	8004ff0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	895a      	ldrh	r2, [r3, #10]
 8004fd6:	8a7b      	ldrh	r3, [r7, #18]
 8004fd8:	4413      	add	r3, r2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	891a      	ldrh	r2, [r3, #8]
 8004fe4:	8a7b      	ldrh	r3, [r7, #18]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	811a      	strh	r2, [r3, #8]


  return 0;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	0800ea88 	.word	0x0800ea88
 8004ffc:	0800ebec 	.word	0x0800ebec
 8005000:	0800eae8 	.word	0x0800eae8

08005004 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800500e:	2200      	movs	r2, #0
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff8e 	bl	8004f34 <pbuf_add_header_impl>
 8005018:	4603      	mov	r3, r0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <pbuf_remove_header+0x1e>
 8005034:	4b20      	ldr	r3, [pc, #128]	@ (80050b8 <pbuf_remove_header+0x94>)
 8005036:	f240 224b 	movw	r2, #587	@ 0x24b
 800503a:	4920      	ldr	r1, [pc, #128]	@ (80050bc <pbuf_remove_header+0x98>)
 800503c:	4820      	ldr	r0, [pc, #128]	@ (80050c0 <pbuf_remove_header+0x9c>)
 800503e:	f008 fb27 	bl	800d690 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <pbuf_remove_header+0x2c>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504e:	d301      	bcc.n	8005054 <pbuf_remove_header+0x30>
    return 1;
 8005050:	2301      	movs	r3, #1
 8005052:	e02c      	b.n	80050ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <pbuf_remove_header+0x3a>
    return 0;
 800505a:	2300      	movs	r3, #0
 800505c:	e027      	b.n	80050ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	895b      	ldrh	r3, [r3, #10]
 8005066:	89fa      	ldrh	r2, [r7, #14]
 8005068:	429a      	cmp	r2, r3
 800506a:	d908      	bls.n	800507e <pbuf_remove_header+0x5a>
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <pbuf_remove_header+0x94>)
 800506e:	f240 2255 	movw	r2, #597	@ 0x255
 8005072:	4914      	ldr	r1, [pc, #80]	@ (80050c4 <pbuf_remove_header+0xa0>)
 8005074:	4812      	ldr	r0, [pc, #72]	@ (80050c0 <pbuf_remove_header+0x9c>)
 8005076:	f008 fb0b 	bl	800d690 <iprintf>
 800507a:	2301      	movs	r3, #1
 800507c:	e017      	b.n	80050ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	441a      	add	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	895a      	ldrh	r2, [r3, #10]
 8005094:	89fb      	ldrh	r3, [r7, #14]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	891a      	ldrh	r2, [r3, #8]
 80050a2:	89fb      	ldrh	r3, [r7, #14]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	0800ea88 	.word	0x0800ea88
 80050bc:	0800ebec 	.word	0x0800ebec
 80050c0:	0800eae8 	.word	0x0800eae8
 80050c4:	0800ebf8 	.word	0x0800ebf8

080050c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
 80050d4:	4613      	mov	r3, r2
 80050d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80050d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da08      	bge.n	80050f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80050e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050e4:	425b      	negs	r3, r3
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ff9b 	bl	8005024 <pbuf_remove_header>
 80050ee:	4603      	mov	r3, r0
 80050f0:	e007      	b.n	8005102 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80050f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050f6:	787a      	ldrb	r2, [r7, #1]
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff ff1a 	bl	8004f34 <pbuf_add_header_impl>
 8005100:	4603      	mov	r3, r0
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800511a:	2201      	movs	r2, #1
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ffd2 	bl	80050c8 <pbuf_header_impl>
 8005124:	4603      	mov	r3, r0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <pbuf_free+0x22>
 8005144:	4b38      	ldr	r3, [pc, #224]	@ (8005228 <pbuf_free+0xf8>)
 8005146:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800514a:	4938      	ldr	r1, [pc, #224]	@ (800522c <pbuf_free+0xfc>)
 800514c:	4838      	ldr	r0, [pc, #224]	@ (8005230 <pbuf_free+0x100>)
 800514e:	f008 fa9f 	bl	800d690 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005152:	2300      	movs	r3, #0
 8005154:	e063      	b.n	800521e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800515a:	e05c      	b.n	8005216 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7b9b      	ldrb	r3, [r3, #14]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <pbuf_free+0x42>
 8005164:	4b30      	ldr	r3, [pc, #192]	@ (8005228 <pbuf_free+0xf8>)
 8005166:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800516a:	4932      	ldr	r1, [pc, #200]	@ (8005234 <pbuf_free+0x104>)
 800516c:	4830      	ldr	r0, [pc, #192]	@ (8005230 <pbuf_free+0x100>)
 800516e:	f008 fa8f 	bl	800d690 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7b9b      	ldrb	r3, [r3, #14]
 8005176:	3b01      	subs	r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	739a      	strb	r2, [r3, #14]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7b9b      	ldrb	r3, [r3, #14]
 8005182:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005184:	7dbb      	ldrb	r3, [r7, #22]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d143      	bne.n	8005212 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7b1b      	ldrb	r3, [r3, #12]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	7b5b      	ldrb	r3, [r3, #13]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <pbuf_free+0x90>
 80051b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <pbuf_free+0xf8>)
 80051b4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80051b8:	491f      	ldr	r1, [pc, #124]	@ (8005238 <pbuf_free+0x108>)
 80051ba:	481d      	ldr	r0, [pc, #116]	@ (8005230 <pbuf_free+0x100>)
 80051bc:	f008 fa68 	bl	800d690 <iprintf>
        pc->custom_free_function(p);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
 80051c8:	e01d      	b.n	8005206 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d104      	bne.n	80051da <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	2008      	movs	r0, #8
 80051d4:	f7ff f936 	bl	8004444 <memp_free>
 80051d8:	e015      	b.n	8005206 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d104      	bne.n	80051ea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	2007      	movs	r0, #7
 80051e4:	f7ff f92e 	bl	8004444 <memp_free>
 80051e8:	e00d      	b.n	8005206 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <pbuf_free+0xc8>
          mem_free(p);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fe fdc1 	bl	8003d78 <mem_free>
 80051f6:	e006      	b.n	8005206 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <pbuf_free+0xf8>)
 80051fa:	f240 320f 	movw	r2, #783	@ 0x30f
 80051fe:	490f      	ldr	r1, [pc, #60]	@ (800523c <pbuf_free+0x10c>)
 8005200:	480b      	ldr	r0, [pc, #44]	@ (8005230 <pbuf_free+0x100>)
 8005202:	f008 fa45 	bl	800d690 <iprintf>
        }
      }
      count++;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	3301      	adds	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	e001      	b.n	8005216 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d19f      	bne.n	800515c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	0800ea88 	.word	0x0800ea88
 800522c:	0800ebec 	.word	0x0800ebec
 8005230:	0800eae8 	.word	0x0800eae8
 8005234:	0800ec18 	.word	0x0800ec18
 8005238:	0800ec30 	.word	0x0800ec30
 800523c:	0800ec54 	.word	0x0800ec54

08005240 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800524c:	e005      	b.n	800525a <pbuf_clen+0x1a>
    ++len;
 800524e:	89fb      	ldrh	r3, [r7, #14]
 8005250:	3301      	adds	r3, #1
 8005252:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f6      	bne.n	800524e <pbuf_clen+0xe>
  }
  return len;
 8005260:	89fb      	ldrh	r3, [r7, #14]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7b9b      	ldrb	r3, [r3, #14]
 8005282:	3301      	adds	r3, #1
 8005284:	b2da      	uxtb	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7b9b      	ldrb	r3, [r3, #14]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <pbuf_ref+0x30>
 8005292:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <pbuf_ref+0x38>)
 8005294:	f240 3242 	movw	r2, #834	@ 0x342
 8005298:	4904      	ldr	r1, [pc, #16]	@ (80052ac <pbuf_ref+0x3c>)
 800529a:	4805      	ldr	r0, [pc, #20]	@ (80052b0 <pbuf_ref+0x40>)
 800529c:	f008 f9f8 	bl	800d690 <iprintf>
  }
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	0800ea88 	.word	0x0800ea88
 80052ac:	0800ec68 	.word	0x0800ec68
 80052b0:	0800eae8 	.word	0x0800eae8

080052b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <pbuf_cat+0x16>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <pbuf_cat+0x26>
 80052ca:	4b20      	ldr	r3, [pc, #128]	@ (800534c <pbuf_cat+0x98>)
 80052cc:	f240 3259 	movw	r2, #857	@ 0x359
 80052d0:	491f      	ldr	r1, [pc, #124]	@ (8005350 <pbuf_cat+0x9c>)
 80052d2:	4820      	ldr	r0, [pc, #128]	@ (8005354 <pbuf_cat+0xa0>)
 80052d4:	f008 f9dc 	bl	800d690 <iprintf>
 80052d8:	e034      	b.n	8005344 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e00a      	b.n	80052f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	891a      	ldrh	r2, [r3, #8]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	891b      	ldrh	r3, [r3, #8]
 80052e8:	4413      	add	r3, r2
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	891a      	ldrh	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	895b      	ldrh	r3, [r3, #10]
 8005306:	429a      	cmp	r2, r3
 8005308:	d006      	beq.n	8005318 <pbuf_cat+0x64>
 800530a:	4b10      	ldr	r3, [pc, #64]	@ (800534c <pbuf_cat+0x98>)
 800530c:	f240 3262 	movw	r2, #866	@ 0x362
 8005310:	4911      	ldr	r1, [pc, #68]	@ (8005358 <pbuf_cat+0xa4>)
 8005312:	4810      	ldr	r0, [pc, #64]	@ (8005354 <pbuf_cat+0xa0>)
 8005314:	f008 f9bc 	bl	800d690 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <pbuf_cat+0x7a>
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <pbuf_cat+0x98>)
 8005322:	f240 3263 	movw	r2, #867	@ 0x363
 8005326:	490d      	ldr	r1, [pc, #52]	@ (800535c <pbuf_cat+0xa8>)
 8005328:	480a      	ldr	r0, [pc, #40]	@ (8005354 <pbuf_cat+0xa0>)
 800532a:	f008 f9b1 	bl	800d690 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	891a      	ldrh	r2, [r3, #8]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	891b      	ldrh	r3, [r3, #8]
 8005336:	4413      	add	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	0800ea88 	.word	0x0800ea88
 8005350:	0800ec7c 	.word	0x0800ec7c
 8005354:	0800eae8 	.word	0x0800eae8
 8005358:	0800ecb4 	.word	0x0800ecb4
 800535c:	0800ece4 	.word	0x0800ece4

08005360 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <pbuf_copy+0x2a>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <pbuf_copy+0x2a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	891a      	ldrh	r2, [r3, #8]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	891b      	ldrh	r3, [r3, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d209      	bcs.n	800539e <pbuf_copy+0x3e>
 800538a:	4b57      	ldr	r3, [pc, #348]	@ (80054e8 <pbuf_copy+0x188>)
 800538c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8005390:	4956      	ldr	r1, [pc, #344]	@ (80054ec <pbuf_copy+0x18c>)
 8005392:	4857      	ldr	r0, [pc, #348]	@ (80054f0 <pbuf_copy+0x190>)
 8005394:	f008 f97c 	bl	800d690 <iprintf>
 8005398:	f06f 030f 	mvn.w	r3, #15
 800539c:	e09f      	b.n	80054de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	895b      	ldrh	r3, [r3, #10]
 80053a2:	461a      	mov	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad2      	subs	r2, r2, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	895b      	ldrh	r3, [r3, #10]
 80053ac:	4619      	mov	r1, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1acb      	subs	r3, r1, r3
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d306      	bcc.n	80053c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	895b      	ldrh	r3, [r3, #10]
 80053ba:	461a      	mov	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e005      	b.n	80053d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	895b      	ldrh	r3, [r3, #10]
 80053c8:	461a      	mov	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	18d0      	adds	r0, r2, r3
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4619      	mov	r1, r3
 80053e4:	f008 fa2f 	bl	800d846 <memcpy>
    offset_to += len;
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	895b      	ldrh	r3, [r3, #10]
 80053fc:	461a      	mov	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4293      	cmp	r3, r2
 8005402:	d906      	bls.n	8005412 <pbuf_copy+0xb2>
 8005404:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <pbuf_copy+0x188>)
 8005406:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800540a:	493a      	ldr	r1, [pc, #232]	@ (80054f4 <pbuf_copy+0x194>)
 800540c:	4838      	ldr	r0, [pc, #224]	@ (80054f0 <pbuf_copy+0x190>)
 800540e:	f008 f93f 	bl	800d690 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	895b      	ldrh	r3, [r3, #10]
 8005416:	461a      	mov	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4293      	cmp	r3, r2
 800541c:	d906      	bls.n	800542c <pbuf_copy+0xcc>
 800541e:	4b32      	ldr	r3, [pc, #200]	@ (80054e8 <pbuf_copy+0x188>)
 8005420:	f240 32da 	movw	r2, #986	@ 0x3da
 8005424:	4934      	ldr	r1, [pc, #208]	@ (80054f8 <pbuf_copy+0x198>)
 8005426:	4832      	ldr	r0, [pc, #200]	@ (80054f0 <pbuf_copy+0x190>)
 8005428:	f008 f932 	bl	800d690 <iprintf>
    if (offset_from >= p_from->len) {
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	895b      	ldrh	r3, [r3, #10]
 8005430:	461a      	mov	r2, r3
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4293      	cmp	r3, r2
 8005436:	d304      	bcc.n	8005442 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	895b      	ldrh	r3, [r3, #10]
 8005446:	461a      	mov	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4293      	cmp	r3, r2
 800544c:	d114      	bne.n	8005478 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <pbuf_copy+0x118>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <pbuf_copy+0x118>
 8005464:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <pbuf_copy+0x188>)
 8005466:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800546a:	4924      	ldr	r1, [pc, #144]	@ (80054fc <pbuf_copy+0x19c>)
 800546c:	4820      	ldr	r0, [pc, #128]	@ (80054f0 <pbuf_copy+0x190>)
 800546e:	f008 f90f 	bl	800d690 <iprintf>
 8005472:	f06f 030f 	mvn.w	r3, #15
 8005476:	e032      	b.n	80054de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d013      	beq.n	80054a6 <pbuf_copy+0x146>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	895a      	ldrh	r2, [r3, #10]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	891b      	ldrh	r3, [r3, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	d10d      	bne.n	80054a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <pbuf_copy+0x146>
 8005492:	4b15      	ldr	r3, [pc, #84]	@ (80054e8 <pbuf_copy+0x188>)
 8005494:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005498:	4919      	ldr	r1, [pc, #100]	@ (8005500 <pbuf_copy+0x1a0>)
 800549a:	4815      	ldr	r0, [pc, #84]	@ (80054f0 <pbuf_copy+0x190>)
 800549c:	f008 f8f8 	bl	800d690 <iprintf>
 80054a0:	f06f 0305 	mvn.w	r3, #5
 80054a4:	e01b      	b.n	80054de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <pbuf_copy+0x174>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	895a      	ldrh	r2, [r3, #10]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	891b      	ldrh	r3, [r3, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d10d      	bne.n	80054d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <pbuf_copy+0x174>
 80054c0:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <pbuf_copy+0x188>)
 80054c2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80054c6:	490e      	ldr	r1, [pc, #56]	@ (8005500 <pbuf_copy+0x1a0>)
 80054c8:	4809      	ldr	r0, [pc, #36]	@ (80054f0 <pbuf_copy+0x190>)
 80054ca:	f008 f8e1 	bl	800d690 <iprintf>
 80054ce:	f06f 0305 	mvn.w	r3, #5
 80054d2:	e004      	b.n	80054de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f47f af61 	bne.w	800539e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	0800ea88 	.word	0x0800ea88
 80054ec:	0800ed30 	.word	0x0800ed30
 80054f0:	0800eae8 	.word	0x0800eae8
 80054f4:	0800ed60 	.word	0x0800ed60
 80054f8:	0800ed78 	.word	0x0800ed78
 80054fc:	0800ed94 	.word	0x0800ed94
 8005500:	0800eda4 	.word	0x0800eda4

08005504 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4611      	mov	r1, r2
 8005510:	461a      	mov	r2, r3
 8005512:	460b      	mov	r3, r1
 8005514:	80fb      	strh	r3, [r7, #6]
 8005516:	4613      	mov	r3, r2
 8005518:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d108      	bne.n	800553a <pbuf_copy_partial+0x36>
 8005528:	4b2b      	ldr	r3, [pc, #172]	@ (80055d8 <pbuf_copy_partial+0xd4>)
 800552a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800552e:	492b      	ldr	r1, [pc, #172]	@ (80055dc <pbuf_copy_partial+0xd8>)
 8005530:	482b      	ldr	r0, [pc, #172]	@ (80055e0 <pbuf_copy_partial+0xdc>)
 8005532:	f008 f8ad 	bl	800d690 <iprintf>
 8005536:	2300      	movs	r3, #0
 8005538:	e04a      	b.n	80055d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <pbuf_copy_partial+0x4e>
 8005540:	4b25      	ldr	r3, [pc, #148]	@ (80055d8 <pbuf_copy_partial+0xd4>)
 8005542:	f240 420b 	movw	r2, #1035	@ 0x40b
 8005546:	4927      	ldr	r1, [pc, #156]	@ (80055e4 <pbuf_copy_partial+0xe0>)
 8005548:	4825      	ldr	r0, [pc, #148]	@ (80055e0 <pbuf_copy_partial+0xdc>)
 800554a:	f008 f8a1 	bl	800d690 <iprintf>
 800554e:	2300      	movs	r3, #0
 8005550:	e03e      	b.n	80055d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e034      	b.n	80055c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005558:	88bb      	ldrh	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <pbuf_copy_partial+0x70>
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	895b      	ldrh	r3, [r3, #10]
 8005562:	88ba      	ldrh	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d305      	bcc.n	8005574 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	895b      	ldrh	r3, [r3, #10]
 800556c:	88ba      	ldrh	r2, [r7, #4]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	80bb      	strh	r3, [r7, #4]
 8005572:	e023      	b.n	80055bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	895a      	ldrh	r2, [r3, #10]
 8005578:	88bb      	ldrh	r3, [r7, #4]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800557e:	8b3a      	ldrh	r2, [r7, #24]
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	429a      	cmp	r2, r3
 8005584:	d901      	bls.n	800558a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800558a:	8b7b      	ldrh	r3, [r7, #26]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	18d0      	adds	r0, r2, r3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	88bb      	ldrh	r3, [r7, #4]
 8005596:	4413      	add	r3, r2
 8005598:	8b3a      	ldrh	r2, [r7, #24]
 800559a:	4619      	mov	r1, r3
 800559c:	f008 f953 	bl	800d846 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80055a0:	8afa      	ldrh	r2, [r7, #22]
 80055a2:	8b3b      	ldrh	r3, [r7, #24]
 80055a4:	4413      	add	r3, r2
 80055a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80055a8:	8b7a      	ldrh	r2, [r7, #26]
 80055aa:	8b3b      	ldrh	r3, [r7, #24]
 80055ac:	4413      	add	r3, r2
 80055ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	8b3b      	ldrh	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <pbuf_copy_partial+0xca>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1c4      	bne.n	8005558 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80055ce:	8afb      	ldrh	r3, [r7, #22]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	0800ea88 	.word	0x0800ea88
 80055dc:	0800edd0 	.word	0x0800edd0
 80055e0:	0800eae8 	.word	0x0800eae8
 80055e4:	0800edf0 	.word	0x0800edf0

080055e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	603a      	str	r2, [r7, #0]
 80055f2:	71fb      	strb	r3, [r7, #7]
 80055f4:	460b      	mov	r3, r1
 80055f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	8919      	ldrh	r1, [r3, #8]
 80055fc:	88ba      	ldrh	r2, [r7, #4]
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fab1 	bl	8004b68 <pbuf_alloc>
 8005606:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <pbuf_clone+0x2a>
    return NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	e011      	b.n	8005636 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fea3 	bl	8005360 <pbuf_copy>
 800561a:	4603      	mov	r3, r0
 800561c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800561e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d006      	beq.n	8005634 <pbuf_clone+0x4c>
 8005626:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <pbuf_clone+0x58>)
 8005628:	f240 5224 	movw	r2, #1316	@ 0x524
 800562c:	4905      	ldr	r1, [pc, #20]	@ (8005644 <pbuf_clone+0x5c>)
 800562e:	4806      	ldr	r0, [pc, #24]	@ (8005648 <pbuf_clone+0x60>)
 8005630:	f008 f82e 	bl	800d690 <iprintf>
  return q;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	0800ea88 	.word	0x0800ea88
 8005644:	0800eefc 	.word	0x0800eefc
 8005648:	0800eae8 	.word	0x0800eae8

0800564c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005650:	f007 ff1e 	bl	800d490 <rand>
 8005654:	4603      	mov	r3, r0
 8005656:	b29b      	uxth	r3, r3
 8005658:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800565c:	b29b      	uxth	r3, r3
 800565e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8005662:	b29a      	uxth	r2, r3
 8005664:	4b01      	ldr	r3, [pc, #4]	@ (800566c <tcp_init+0x20>)
 8005666:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000020 	.word	0x20000020

08005670 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7d1b      	ldrb	r3, [r3, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <tcp_free+0x1c>
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <tcp_free+0x2c>)
 8005682:	22d4      	movs	r2, #212	@ 0xd4
 8005684:	4906      	ldr	r1, [pc, #24]	@ (80056a0 <tcp_free+0x30>)
 8005686:	4807      	ldr	r0, [pc, #28]	@ (80056a4 <tcp_free+0x34>)
 8005688:	f008 f802 	bl	800d690 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	2001      	movs	r0, #1
 8005690:	f7fe fed8 	bl	8004444 <memp_free>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	0800ef88 	.word	0x0800ef88
 80056a0:	0800efb8 	.word	0x0800efb8
 80056a4:	0800efcc 	.word	0x0800efcc

080056a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	7d1b      	ldrb	r3, [r3, #20]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d105      	bne.n	80056c4 <tcp_free_listen+0x1c>
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <tcp_free_listen+0x2c>)
 80056ba:	22df      	movs	r2, #223	@ 0xdf
 80056bc:	4906      	ldr	r1, [pc, #24]	@ (80056d8 <tcp_free_listen+0x30>)
 80056be:	4807      	ldr	r0, [pc, #28]	@ (80056dc <tcp_free_listen+0x34>)
 80056c0:	f007 ffe6 	bl	800d690 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	2002      	movs	r0, #2
 80056c8:	f7fe febc 	bl	8004444 <memp_free>
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	0800ef88 	.word	0x0800ef88
 80056d8:	0800eff4 	.word	0x0800eff4
 80056dc:	0800efcc 	.word	0x0800efcc

080056e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80056e4:	f000 fea4 	bl	8006430 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80056e8:	4b07      	ldr	r3, [pc, #28]	@ (8005708 <tcp_tmr+0x28>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <tcp_tmr+0x28>)
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	4b04      	ldr	r3, [pc, #16]	@ (8005708 <tcp_tmr+0x28>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005700:	f000 fb54 	bl	8005dac <tcp_slowtmr>
  }
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000694d 	.word	0x2000694d

0800570c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <tcp_remove_listener+0x1c>
 800571c:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <tcp_remove_listener+0x48>)
 800571e:	22ff      	movs	r2, #255	@ 0xff
 8005720:	490d      	ldr	r1, [pc, #52]	@ (8005758 <tcp_remove_listener+0x4c>)
 8005722:	480e      	ldr	r0, [pc, #56]	@ (800575c <tcp_remove_listener+0x50>)
 8005724:	f007 ffb4 	bl	800d690 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e00a      	b.n	8005744 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d102      	bne.n	800573e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f1      	bne.n	800572e <tcp_remove_listener+0x22>
    }
  }
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	0800ef88 	.word	0x0800ef88
 8005758:	0800f010 	.word	0x0800f010
 800575c:	0800efcc 	.word	0x0800efcc

08005760 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <tcp_listen_closed+0x1c>
 800576e:	4b14      	ldr	r3, [pc, #80]	@ (80057c0 <tcp_listen_closed+0x60>)
 8005770:	f240 1211 	movw	r2, #273	@ 0x111
 8005774:	4913      	ldr	r1, [pc, #76]	@ (80057c4 <tcp_listen_closed+0x64>)
 8005776:	4814      	ldr	r0, [pc, #80]	@ (80057c8 <tcp_listen_closed+0x68>)
 8005778:	f007 ff8a 	bl	800d690 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	7d1b      	ldrb	r3, [r3, #20]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d006      	beq.n	8005792 <tcp_listen_closed+0x32>
 8005784:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <tcp_listen_closed+0x60>)
 8005786:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800578a:	4910      	ldr	r1, [pc, #64]	@ (80057cc <tcp_listen_closed+0x6c>)
 800578c:	480e      	ldr	r0, [pc, #56]	@ (80057c8 <tcp_listen_closed+0x68>)
 800578e:	f007 ff7f 	bl	800d690 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005792:	2301      	movs	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e00b      	b.n	80057b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005798:	4a0d      	ldr	r2, [pc, #52]	@ (80057d0 <tcp_listen_closed+0x70>)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ffb1 	bl	800570c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d9f0      	bls.n	8005798 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	0800ef88 	.word	0x0800ef88
 80057c4:	0800f038 	.word	0x0800f038
 80057c8:	0800efcc 	.word	0x0800efcc
 80057cc:	0800f044 	.word	0x0800f044
 80057d0:	08010f60 	.word	0x08010f60

080057d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80057d4:	b5b0      	push	{r4, r5, r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af04      	add	r7, sp, #16
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <tcp_close_shutdown+0x20>
 80057e6:	4b63      	ldr	r3, [pc, #396]	@ (8005974 <tcp_close_shutdown+0x1a0>)
 80057e8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80057ec:	4962      	ldr	r1, [pc, #392]	@ (8005978 <tcp_close_shutdown+0x1a4>)
 80057ee:	4863      	ldr	r0, [pc, #396]	@ (800597c <tcp_close_shutdown+0x1a8>)
 80057f0:	f007 ff4e 	bl	800d690 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d066      	beq.n	80058c8 <tcp_close_shutdown+0xf4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7d1b      	ldrb	r3, [r3, #20]
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d003      	beq.n	800580a <tcp_close_shutdown+0x36>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7d1b      	ldrb	r3, [r3, #20]
 8005806:	2b07      	cmp	r3, #7
 8005808:	d15e      	bne.n	80058c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <tcp_close_shutdown+0x48>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005816:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800581a:	d055      	beq.n	80058c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8b5b      	ldrh	r3, [r3, #26]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <tcp_close_shutdown+0x62>
 8005828:	4b52      	ldr	r3, [pc, #328]	@ (8005974 <tcp_close_shutdown+0x1a0>)
 800582a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800582e:	4954      	ldr	r1, [pc, #336]	@ (8005980 <tcp_close_shutdown+0x1ac>)
 8005830:	4852      	ldr	r0, [pc, #328]	@ (800597c <tcp_close_shutdown+0x1a8>)
 8005832:	f007 ff2d 	bl	800d690 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800583e:	687d      	ldr	r5, [r7, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	8ad2      	ldrh	r2, [r2, #22]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	8b09      	ldrh	r1, [r1, #24]
 800584c:	9102      	str	r1, [sp, #8]
 800584e:	9201      	str	r2, [sp, #4]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	462b      	mov	r3, r5
 8005854:	4622      	mov	r2, r4
 8005856:	4601      	mov	r1, r0
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f004 fe8d 	bl	800a578 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 f8c8 	bl	80069f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005864:	4b47      	ldr	r3, [pc, #284]	@ (8005984 <tcp_close_shutdown+0x1b0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d105      	bne.n	800587a <tcp_close_shutdown+0xa6>
 800586e:	4b45      	ldr	r3, [pc, #276]	@ (8005984 <tcp_close_shutdown+0x1b0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a43      	ldr	r2, [pc, #268]	@ (8005984 <tcp_close_shutdown+0x1b0>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e013      	b.n	80058a2 <tcp_close_shutdown+0xce>
 800587a:	4b42      	ldr	r3, [pc, #264]	@ (8005984 <tcp_close_shutdown+0x1b0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e00c      	b.n	800589c <tcp_close_shutdown+0xc8>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d104      	bne.n	8005896 <tcp_close_shutdown+0xc2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	60da      	str	r2, [r3, #12]
 8005894:	e005      	b.n	80058a2 <tcp_close_shutdown+0xce>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1ef      	bne.n	8005882 <tcp_close_shutdown+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	4b37      	ldr	r3, [pc, #220]	@ (8005988 <tcp_close_shutdown+0x1b4>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80058ae:	4b37      	ldr	r3, [pc, #220]	@ (800598c <tcp_close_shutdown+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d102      	bne.n	80058be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80058b8:	f003 fd5c 	bl	8009374 <tcp_trigger_input_pcb_close>
 80058bc:	e002      	b.n	80058c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fed6 	bl	8005670 <tcp_free>
      }
      return ERR_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e050      	b.n	800596a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7d1b      	ldrb	r3, [r3, #20]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d03b      	beq.n	8005948 <tcp_close_shutdown+0x174>
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	dc44      	bgt.n	800595e <tcp_close_shutdown+0x18a>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <tcp_close_shutdown+0x10a>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d02a      	beq.n	8005932 <tcp_close_shutdown+0x15e>
 80058dc:	e03f      	b.n	800595e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8adb      	ldrh	r3, [r3, #22]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d021      	beq.n	800592a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80058e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005990 <tcp_close_shutdown+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d105      	bne.n	80058fc <tcp_close_shutdown+0x128>
 80058f0:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <tcp_close_shutdown+0x1bc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <tcp_close_shutdown+0x1bc>)
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	e013      	b.n	8005924 <tcp_close_shutdown+0x150>
 80058fc:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <tcp_close_shutdown+0x1bc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	e00c      	b.n	800591e <tcp_close_shutdown+0x14a>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	d104      	bne.n	8005918 <tcp_close_shutdown+0x144>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e005      	b.n	8005924 <tcp_close_shutdown+0x150>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1ef      	bne.n	8005904 <tcp_close_shutdown+0x130>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fea0 	bl	8005670 <tcp_free>
      break;
 8005930:	e01a      	b.n	8005968 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff ff14 	bl	8005760 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4816      	ldr	r0, [pc, #88]	@ (8005994 <tcp_close_shutdown+0x1c0>)
 800593c:	f001 f8aa 	bl	8006a94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff feb1 	bl	80056a8 <tcp_free_listen>
      break;
 8005946:	e00f      	b.n	8005968 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	480e      	ldr	r0, [pc, #56]	@ (8005984 <tcp_close_shutdown+0x1b0>)
 800594c:	f001 f8a2 	bl	8006a94 <tcp_pcb_remove>
 8005950:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <tcp_close_shutdown+0x1b4>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fe8a 	bl	8005670 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800595c:	e004      	b.n	8005968 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f81a 	bl	8005998 <tcp_close_shutdown_fin>
 8005964:	4603      	mov	r3, r0
 8005966:	e000      	b.n	800596a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	bf00      	nop
 8005974:	0800ef88 	.word	0x0800ef88
 8005978:	0800f05c 	.word	0x0800f05c
 800597c:	0800efcc 	.word	0x0800efcc
 8005980:	0800f07c 	.word	0x0800f07c
 8005984:	20006944 	.word	0x20006944
 8005988:	2000694c 	.word	0x2000694c
 800598c:	20006984 	.word	0x20006984
 8005990:	2000693c 	.word	0x2000693c
 8005994:	20006940 	.word	0x20006940

08005998 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <tcp_close_shutdown_fin+0x1c>
 80059a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a60 <tcp_close_shutdown_fin+0xc8>)
 80059a8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80059ac:	492d      	ldr	r1, [pc, #180]	@ (8005a64 <tcp_close_shutdown_fin+0xcc>)
 80059ae:	482e      	ldr	r0, [pc, #184]	@ (8005a68 <tcp_close_shutdown_fin+0xd0>)
 80059b0:	f007 fe6e 	bl	800d690 <iprintf>

  switch (pcb->state) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7d1b      	ldrb	r3, [r3, #20]
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	d020      	beq.n	80059fe <tcp_close_shutdown_fin+0x66>
 80059bc:	2b07      	cmp	r3, #7
 80059be:	dc2b      	bgt.n	8005a18 <tcp_close_shutdown_fin+0x80>
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d002      	beq.n	80059ca <tcp_close_shutdown_fin+0x32>
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d00d      	beq.n	80059e4 <tcp_close_shutdown_fin+0x4c>
 80059c8:	e026      	b.n	8005a18 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f003 fee2 	bl	8009794 <tcp_send_fin>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80059d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d11f      	bne.n	8005a1c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2205      	movs	r2, #5
 80059e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80059e2:	e01b      	b.n	8005a1c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f003 fed5 	bl	8009794 <tcp_send_fin>
 80059ea:	4603      	mov	r3, r0
 80059ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d114      	bne.n	8005a20 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2205      	movs	r2, #5
 80059fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80059fc:	e010      	b.n	8005a20 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f003 fec8 	bl	8009794 <tcp_send_fin>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2209      	movs	r2, #9
 8005a14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005a16:	e005      	b.n	8005a24 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e01c      	b.n	8005a56 <tcp_close_shutdown_fin+0xbe>
      break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <tcp_close_shutdown_fin+0x8e>
      break;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <tcp_close_shutdown_fin+0x8e>
      break;
 8005a24:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f003 ffee 	bl	8009a10 <tcp_output>
 8005a34:	e00d      	b.n	8005a52 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a3e:	d108      	bne.n	8005a52 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8b5b      	ldrh	r3, [r3, #26]
 8005a44:	f043 0308 	orr.w	r3, r3, #8
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e001      	b.n	8005a56 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	0800ef88 	.word	0x0800ef88
 8005a64:	0800f038 	.word	0x0800f038
 8005a68:	0800efcc 	.word	0x0800efcc

08005a6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <tcp_close+0x22>
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab8 <tcp_close+0x4c>)
 8005a7c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005a80:	490e      	ldr	r1, [pc, #56]	@ (8005abc <tcp_close+0x50>)
 8005a82:	480f      	ldr	r0, [pc, #60]	@ (8005ac0 <tcp_close+0x54>)
 8005a84:	f007 fe04 	bl	800d690 <iprintf>
 8005a88:	f06f 030f 	mvn.w	r3, #15
 8005a8c:	e00f      	b.n	8005aae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7d1b      	ldrb	r3, [r3, #20]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d006      	beq.n	8005aa4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8b5b      	ldrh	r3, [r3, #26]
 8005a9a:	f043 0310 	orr.w	r3, r3, #16
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fe94 	bl	80057d4 <tcp_close_shutdown>
 8005aac:	4603      	mov	r3, r0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	0800ef88 	.word	0x0800ef88
 8005abc:	0800f098 	.word	0x0800f098
 8005ac0:	0800efcc 	.word	0x0800efcc

08005ac4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08e      	sub	sp, #56	@ 0x38
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <tcp_abandon+0x20>
 8005ad4:	4b52      	ldr	r3, [pc, #328]	@ (8005c20 <tcp_abandon+0x15c>)
 8005ad6:	f240 223d 	movw	r2, #573	@ 0x23d
 8005ada:	4952      	ldr	r1, [pc, #328]	@ (8005c24 <tcp_abandon+0x160>)
 8005adc:	4852      	ldr	r0, [pc, #328]	@ (8005c28 <tcp_abandon+0x164>)
 8005ade:	f007 fdd7 	bl	800d690 <iprintf>
 8005ae2:	e099      	b.n	8005c18 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	7d1b      	ldrb	r3, [r3, #20]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d106      	bne.n	8005afa <tcp_abandon+0x36>
 8005aec:	4b4c      	ldr	r3, [pc, #304]	@ (8005c20 <tcp_abandon+0x15c>)
 8005aee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8005af2:	494e      	ldr	r1, [pc, #312]	@ (8005c2c <tcp_abandon+0x168>)
 8005af4:	484c      	ldr	r0, [pc, #304]	@ (8005c28 <tcp_abandon+0x164>)
 8005af6:	f007 fdcb 	bl	800d690 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	7d1b      	ldrb	r3, [r3, #20]
 8005afe:	2b0a      	cmp	r3, #10
 8005b00:	d107      	bne.n	8005b12 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	484a      	ldr	r0, [pc, #296]	@ (8005c30 <tcp_abandon+0x16c>)
 8005b06:	f000 ffc5 	bl	8006a94 <tcp_pcb_remove>
    tcp_free(pcb);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fdb0 	bl	8005670 <tcp_free>
 8005b10:	e082      	b.n	8005c18 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	7d1b      	ldrb	r3, [r3, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d126      	bne.n	8005b8a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8adb      	ldrh	r3, [r3, #22]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d02e      	beq.n	8005ba2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b44:	4b3b      	ldr	r3, [pc, #236]	@ (8005c34 <tcp_abandon+0x170>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d105      	bne.n	8005b5a <tcp_abandon+0x96>
 8005b4e:	4b39      	ldr	r3, [pc, #228]	@ (8005c34 <tcp_abandon+0x170>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <tcp_abandon+0x170>)
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e013      	b.n	8005b82 <tcp_abandon+0xbe>
 8005b5a:	4b36      	ldr	r3, [pc, #216]	@ (8005c34 <tcp_abandon+0x170>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	e00c      	b.n	8005b7c <tcp_abandon+0xb8>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d104      	bne.n	8005b76 <tcp_abandon+0xb2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	60da      	str	r2, [r3, #12]
 8005b74:	e005      	b.n	8005b82 <tcp_abandon+0xbe>
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1ef      	bne.n	8005b62 <tcp_abandon+0x9e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e00b      	b.n	8005ba2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8adb      	ldrh	r3, [r3, #22]
 8005b92:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4828      	ldr	r0, [pc, #160]	@ (8005c38 <tcp_abandon+0x174>)
 8005b98:	f000 ff7c 	bl	8006a94 <tcp_pcb_remove>
 8005b9c:	4b27      	ldr	r3, [pc, #156]	@ (8005c3c <tcp_abandon+0x178>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd1e 	bl	80065f0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fd15 	bl	80065f0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd0c 	bl	80065f0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00e      	beq.n	8005bfc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	8b12      	ldrh	r2, [r2, #24]
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005bec:	9201      	str	r2, [sp, #4]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	69b9      	ldr	r1, [r7, #24]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f004 fcbe 	bl	800a578 <tcp_rst>
    }
    last_state = pcb->state;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7d1b      	ldrb	r3, [r3, #20]
 8005c00:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fd34 	bl	8005670 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <tcp_abandon+0x154>
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f06f 010c 	mvn.w	r1, #12
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	4798      	blx	r3
  }
}
 8005c18:	3728      	adds	r7, #40	@ 0x28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	0800ef88 	.word	0x0800ef88
 8005c24:	0800f0cc 	.word	0x0800f0cc
 8005c28:	0800efcc 	.word	0x0800efcc
 8005c2c:	0800f0e8 	.word	0x0800f0e8
 8005c30:	20006948 	.word	0x20006948
 8005c34:	2000693c 	.word	0x2000693c
 8005c38:	20006944 	.word	0x20006944
 8005c3c:	2000694c 	.word	0x2000694c

08005c40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005c48:	2101      	movs	r1, #1
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ff3a 	bl	8005ac4 <tcp_abandon>
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <tcp_update_rcv_ann_wnd+0x1c>
 8005c66:	4b25      	ldr	r3, [pc, #148]	@ (8005cfc <tcp_update_rcv_ann_wnd+0xa4>)
 8005c68:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8005c6c:	4924      	ldr	r1, [pc, #144]	@ (8005d00 <tcp_update_rcv_ann_wnd+0xa8>)
 8005c6e:	4825      	ldr	r0, [pc, #148]	@ (8005d04 <tcp_update_rcv_ann_wnd+0xac>)
 8005c70:	f007 fd0e 	bl	800d690 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8005c88:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8005c8c:	bf28      	it	cs
 8005c8e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8005c92:	b292      	uxth	r2, r2
 8005c94:	4413      	add	r3, r2
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	db08      	blt.n	8005cb0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	e020      	b.n	8005cf2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	dd03      	ble.n	8005cc6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cc4:	e014      	b.n	8005cf0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd8:	d306      	bcc.n	8005ce8 <tcp_update_rcv_ann_wnd+0x90>
 8005cda:	4b08      	ldr	r3, [pc, #32]	@ (8005cfc <tcp_update_rcv_ann_wnd+0xa4>)
 8005cdc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8005ce0:	4909      	ldr	r1, [pc, #36]	@ (8005d08 <tcp_update_rcv_ann_wnd+0xb0>)
 8005ce2:	4808      	ldr	r0, [pc, #32]	@ (8005d04 <tcp_update_rcv_ann_wnd+0xac>)
 8005ce4:	f007 fcd4 	bl	800d690 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8005cf0:	2300      	movs	r3, #0
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	0800ef88 	.word	0x0800ef88
 8005d00:	0800f1e4 	.word	0x0800f1e4
 8005d04:	0800efcc 	.word	0x0800efcc
 8005d08:	0800f208 	.word	0x0800f208

08005d0c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <tcp_recved+0x22>
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d9c <tcp_recved+0x90>)
 8005d20:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8005d24:	491e      	ldr	r1, [pc, #120]	@ (8005da0 <tcp_recved+0x94>)
 8005d26:	481f      	ldr	r0, [pc, #124]	@ (8005da4 <tcp_recved+0x98>)
 8005d28:	f007 fcb2 	bl	800d690 <iprintf>
 8005d2c:	e032      	b.n	8005d94 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7d1b      	ldrb	r3, [r3, #20]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d106      	bne.n	8005d44 <tcp_recved+0x38>
 8005d36:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <tcp_recved+0x90>)
 8005d38:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8005d3c:	491a      	ldr	r1, [pc, #104]	@ (8005da8 <tcp_recved+0x9c>)
 8005d3e:	4819      	ldr	r0, [pc, #100]	@ (8005da4 <tcp_recved+0x98>)
 8005d40:	f007 fca6 	bl	800d690 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005d4e:	89fb      	ldrh	r3, [r7, #14]
 8005d50:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005d54:	d804      	bhi.n	8005d60 <tcp_recved+0x54>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5a:	89fa      	ldrh	r2, [r7, #14]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d204      	bcs.n	8005d6a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d68:	e002      	b.n	8005d70 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	89fa      	ldrh	r2, [r7, #14]
 8005d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff71 	bl	8005c58 <tcp_update_rcv_ann_wnd>
 8005d76:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8005d7e:	d309      	bcc.n	8005d94 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8b5b      	ldrh	r3, [r3, #26]
 8005d84:	f043 0302 	orr.w	r3, r3, #2
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f003 fe3e 	bl	8009a10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	0800ef88 	.word	0x0800ef88
 8005da0:	0800f224 	.word	0x0800f224
 8005da4:	0800efcc 	.word	0x0800efcc
 8005da8:	0800f23c 	.word	0x0800f23c

08005dac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005dac:	b5b0      	push	{r4, r5, r7, lr}
 8005dae:	b090      	sub	sp, #64	@ 0x40
 8005db0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8005db8:	4b95      	ldr	r3, [pc, #596]	@ (8006010 <tcp_slowtmr+0x264>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	4a94      	ldr	r2, [pc, #592]	@ (8006010 <tcp_slowtmr+0x264>)
 8005dc0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005dc2:	4b94      	ldr	r3, [pc, #592]	@ (8006014 <tcp_slowtmr+0x268>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4b92      	ldr	r3, [pc, #584]	@ (8006014 <tcp_slowtmr+0x268>)
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e000      	b.n	8005dd2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8005dd0:	bf00      	nop
  prev = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8005dd6:	4b90      	ldr	r3, [pc, #576]	@ (8006018 <tcp_slowtmr+0x26c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8005ddc:	e29d      	b.n	800631a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de0:	7d1b      	ldrb	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <tcp_slowtmr+0x48>
 8005de6:	4b8d      	ldr	r3, [pc, #564]	@ (800601c <tcp_slowtmr+0x270>)
 8005de8:	f240 42be 	movw	r2, #1214	@ 0x4be
 8005dec:	498c      	ldr	r1, [pc, #560]	@ (8006020 <tcp_slowtmr+0x274>)
 8005dee:	488d      	ldr	r0, [pc, #564]	@ (8006024 <tcp_slowtmr+0x278>)
 8005df0:	f007 fc4e 	bl	800d690 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	7d1b      	ldrb	r3, [r3, #20]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d106      	bne.n	8005e0a <tcp_slowtmr+0x5e>
 8005dfc:	4b87      	ldr	r3, [pc, #540]	@ (800601c <tcp_slowtmr+0x270>)
 8005dfe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8005e02:	4989      	ldr	r1, [pc, #548]	@ (8006028 <tcp_slowtmr+0x27c>)
 8005e04:	4887      	ldr	r0, [pc, #540]	@ (8006024 <tcp_slowtmr+0x278>)
 8005e06:	f007 fc43 	bl	800d690 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	7d1b      	ldrb	r3, [r3, #20]
 8005e0e:	2b0a      	cmp	r3, #10
 8005e10:	d106      	bne.n	8005e20 <tcp_slowtmr+0x74>
 8005e12:	4b82      	ldr	r3, [pc, #520]	@ (800601c <tcp_slowtmr+0x270>)
 8005e14:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8005e18:	4984      	ldr	r1, [pc, #528]	@ (800602c <tcp_slowtmr+0x280>)
 8005e1a:	4882      	ldr	r0, [pc, #520]	@ (8006024 <tcp_slowtmr+0x278>)
 8005e1c:	f007 fc38 	bl	800d690 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	7f9a      	ldrb	r2, [r3, #30]
 8005e24:	4b7b      	ldr	r3, [pc, #492]	@ (8006014 <tcp_slowtmr+0x268>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d105      	bne.n	8005e38 <tcp_slowtmr+0x8c>
      prev = pcb;
 8005e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8005e36:	e270      	b.n	800631a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8005e38:	4b76      	ldr	r3, [pc, #472]	@ (8006014 <tcp_slowtmr+0x268>)
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	7d1b      	ldrb	r3, [r3, #20]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d10a      	bne.n	8005e6a <tcp_slowtmr+0xbe>
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d905      	bls.n	8005e6a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e62:	3301      	adds	r3, #1
 8005e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e68:	e11e      	b.n	80060a8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e70:	2b0b      	cmp	r3, #11
 8005e72:	d905      	bls.n	8005e80 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8005e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e7e:	e113      	b.n	80060a8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e82:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d075      	beq.n	8005f76 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <tcp_slowtmr+0xf4>
 8005e92:	4b62      	ldr	r3, [pc, #392]	@ (800601c <tcp_slowtmr+0x270>)
 8005e94:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8005e98:	4965      	ldr	r1, [pc, #404]	@ (8006030 <tcp_slowtmr+0x284>)
 8005e9a:	4862      	ldr	r0, [pc, #392]	@ (8006024 <tcp_slowtmr+0x278>)
 8005e9c:	f007 fbf8 	bl	800d690 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <tcp_slowtmr+0x10a>
 8005ea8:	4b5c      	ldr	r3, [pc, #368]	@ (800601c <tcp_slowtmr+0x270>)
 8005eaa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8005eae:	4961      	ldr	r1, [pc, #388]	@ (8006034 <tcp_slowtmr+0x288>)
 8005eb0:	485c      	ldr	r0, [pc, #368]	@ (8006024 <tcp_slowtmr+0x278>)
 8005eb2:	f007 fbed 	bl	800d690 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8005ebc:	2b0b      	cmp	r3, #11
 8005ebe:	d905      	bls.n	8005ecc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8005ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005eca:	e0ed      	b.n	80060a8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ece:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	4a58      	ldr	r2, [pc, #352]	@ (8006038 <tcp_slowtmr+0x28c>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005ee0:	7c7a      	ldrb	r2, [r7, #17]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d907      	bls.n	8005ef6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005eec:	3301      	adds	r3, #1
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005efc:	7c7a      	ldrb	r2, [r7, #17]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	f200 80d2 	bhi.w	80060a8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8005f04:	2301      	movs	r3, #1
 8005f06:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8005f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d108      	bne.n	8005f24 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005f12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f14:	f004 fc24 	bl	800a760 <tcp_zero_window_probe>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d014      	beq.n	8005f48 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	e011      	b.n	8005f48 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f2e:	f003 fae9 	bl	8009504 <tcp_split_unsent_seg>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d107      	bne.n	8005f48 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8005f38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f3a:	f003 fd69 	bl	8009a10 <tcp_output>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80ac 	beq.w	80060a8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	f200 80a2 	bhi.w	80060a8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8005f74:	e098      	b.n	80060a8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	db0f      	blt.n	8005fa0 <tcp_slowtmr+0x1f4>
 8005f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005f86:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d008      	beq.n	8005fa0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b21a      	sxth	r2, r3
 8005f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8005fac:	429a      	cmp	r2, r3
 8005fae:	db7b      	blt.n	80060a8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005fb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb2:	f004 f821 	bl	8009ff8 <tcp_rexmit_rto_prepare>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <tcp_slowtmr+0x220>
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d171      	bne.n	80060a8 <tcp_slowtmr+0x2fc>
 8005fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d06d      	beq.n	80060a8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	7d1b      	ldrb	r3, [r3, #20]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d03a      	beq.n	800604a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fda:	2b0c      	cmp	r3, #12
 8005fdc:	bf28      	it	cs
 8005fde:	230c      	movcs	r3, #12
 8005fe0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005fe8:	10db      	asrs	r3, r3, #3
 8005fea:	b21b      	sxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005ff4:	4413      	add	r3, r2
 8005ff6:	7efa      	ldrb	r2, [r7, #27]
 8005ff8:	4910      	ldr	r1, [pc, #64]	@ (800603c <tcp_slowtmr+0x290>)
 8005ffa:	5c8a      	ldrb	r2, [r1, r2]
 8005ffc:	4093      	lsls	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8006006:	4293      	cmp	r3, r2
 8006008:	dc1a      	bgt.n	8006040 <tcp_slowtmr+0x294>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	b21a      	sxth	r2, r3
 800600e:	e019      	b.n	8006044 <tcp_slowtmr+0x298>
 8006010:	20006938 	.word	0x20006938
 8006014:	2000694e 	.word	0x2000694e
 8006018:	20006944 	.word	0x20006944
 800601c:	0800ef88 	.word	0x0800ef88
 8006020:	0800f2cc 	.word	0x0800f2cc
 8006024:	0800efcc 	.word	0x0800efcc
 8006028:	0800f2f8 	.word	0x0800f2f8
 800602c:	0800f324 	.word	0x0800f324
 8006030:	0800f354 	.word	0x0800f354
 8006034:	0800f388 	.word	0x0800f388
 8006038:	08010f58 	.word	0x08010f58
 800603c:	08010f48 	.word	0x08010f48
 8006040:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604c:	2200      	movs	r2, #0
 800604e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006052:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006058:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800605c:	4293      	cmp	r3, r2
 800605e:	bf28      	it	cs
 8006060:	4613      	movcs	r3, r2
 8006062:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006064:	8a7b      	ldrh	r3, [r7, #18]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006072:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	429a      	cmp	r2, r3
 8006080:	d206      	bcs.n	8006090 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006092:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80060a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060a4:	f004 f818 	bl	800a0d8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	7d1b      	ldrb	r3, [r3, #20]
 80060ac:	2b06      	cmp	r3, #6
 80060ae:	d111      	bne.n	80060d4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b2:	8b5b      	ldrh	r3, [r3, #26]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80060bc:	4b9c      	ldr	r3, [pc, #624]	@ (8006330 <tcp_slowtmr+0x584>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b28      	cmp	r3, #40	@ 0x28
 80060c8:	d904      	bls.n	80060d4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80060ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060ce:	3301      	adds	r3, #1
 80060d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80060d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d6:	7a5b      	ldrb	r3, [r3, #9]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d04a      	beq.n	8006176 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d003      	beq.n	80060f0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80060ec:	2b07      	cmp	r3, #7
 80060ee:	d142      	bne.n	8006176 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80060f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006330 <tcp_slowtmr+0x584>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80060fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006100:	4b8c      	ldr	r3, [pc, #560]	@ (8006334 <tcp_slowtmr+0x588>)
 8006102:	440b      	add	r3, r1
 8006104:	498c      	ldr	r1, [pc, #560]	@ (8006338 <tcp_slowtmr+0x58c>)
 8006106:	fba1 1303 	umull	r1, r3, r1, r3
 800610a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800610c:	429a      	cmp	r2, r3
 800610e:	d90a      	bls.n	8006126 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8006110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006114:	3301      	adds	r3, #1
 8006116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800611a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800611e:	3301      	adds	r3, #1
 8006120:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006124:	e027      	b.n	8006176 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006126:	4b82      	ldr	r3, [pc, #520]	@ (8006330 <tcp_slowtmr+0x584>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006138:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800613c:	4618      	mov	r0, r3
 800613e:	4b7f      	ldr	r3, [pc, #508]	@ (800633c <tcp_slowtmr+0x590>)
 8006140:	fb00 f303 	mul.w	r3, r0, r3
 8006144:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006146:	497c      	ldr	r1, [pc, #496]	@ (8006338 <tcp_slowtmr+0x58c>)
 8006148:	fba1 1303 	umull	r1, r3, r1, r3
 800614c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800614e:	429a      	cmp	r2, r3
 8006150:	d911      	bls.n	8006176 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006152:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006154:	f004 fac4 	bl	800a6e0 <tcp_keepalive>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800615e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800616c:	3301      	adds	r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617a:	2b00      	cmp	r3, #0
 800617c:	d011      	beq.n	80061a2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800617e:	4b6c      	ldr	r3, [pc, #432]	@ (8006330 <tcp_slowtmr+0x584>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800618e:	4619      	mov	r1, r3
 8006190:	460b      	mov	r3, r1
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	440b      	add	r3, r1
 8006196:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800619c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800619e:	f000 fddd 	bl	8006d5c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80061a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a4:	7d1b      	ldrb	r3, [r3, #20]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d10b      	bne.n	80061c2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061aa:	4b61      	ldr	r3, [pc, #388]	@ (8006330 <tcp_slowtmr+0x584>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b28      	cmp	r3, #40	@ 0x28
 80061b6:	d904      	bls.n	80061c2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80061b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061bc:	3301      	adds	r3, #1
 80061be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80061c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c4:	7d1b      	ldrb	r3, [r3, #20]
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d10b      	bne.n	80061e2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80061ca:	4b59      	ldr	r3, [pc, #356]	@ (8006330 <tcp_slowtmr+0x584>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2bf0      	cmp	r3, #240	@ 0xf0
 80061d6:	d904      	bls.n	80061e2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80061d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061dc:	3301      	adds	r3, #1
 80061de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80061e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d060      	beq.n	80062ac <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80061f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061f4:	f000 fbfe 	bl	80069f4 <tcp_pcb_purge>
      if (prev != NULL) {
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d010      	beq.n	8006220 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80061fe:	4b50      	ldr	r3, [pc, #320]	@ (8006340 <tcp_slowtmr+0x594>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006204:	429a      	cmp	r2, r3
 8006206:	d106      	bne.n	8006216 <tcp_slowtmr+0x46a>
 8006208:	4b4e      	ldr	r3, [pc, #312]	@ (8006344 <tcp_slowtmr+0x598>)
 800620a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800620e:	494e      	ldr	r1, [pc, #312]	@ (8006348 <tcp_slowtmr+0x59c>)
 8006210:	484e      	ldr	r0, [pc, #312]	@ (800634c <tcp_slowtmr+0x5a0>)
 8006212:	f007 fa3d 	bl	800d690 <iprintf>
        prev->next = pcb->next;
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	60da      	str	r2, [r3, #12]
 800621e:	e00f      	b.n	8006240 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006220:	4b47      	ldr	r3, [pc, #284]	@ (8006340 <tcp_slowtmr+0x594>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006226:	429a      	cmp	r2, r3
 8006228:	d006      	beq.n	8006238 <tcp_slowtmr+0x48c>
 800622a:	4b46      	ldr	r3, [pc, #280]	@ (8006344 <tcp_slowtmr+0x598>)
 800622c:	f240 5271 	movw	r2, #1393	@ 0x571
 8006230:	4947      	ldr	r1, [pc, #284]	@ (8006350 <tcp_slowtmr+0x5a4>)
 8006232:	4846      	ldr	r0, [pc, #280]	@ (800634c <tcp_slowtmr+0x5a0>)
 8006234:	f007 fa2c 	bl	800d690 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a40      	ldr	r2, [pc, #256]	@ (8006340 <tcp_slowtmr+0x594>)
 800623e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006250:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	3304      	adds	r3, #4
 8006256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006258:	8ad2      	ldrh	r2, [r2, #22]
 800625a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800625c:	8b09      	ldrh	r1, [r1, #24]
 800625e:	9102      	str	r1, [sp, #8]
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	462b      	mov	r3, r5
 8006266:	4622      	mov	r2, r4
 8006268:	4601      	mov	r1, r0
 800626a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800626c:	f004 f984 	bl	800a578 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006278:	7d1b      	ldrb	r3, [r3, #20]
 800627a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006286:	6838      	ldr	r0, [r7, #0]
 8006288:	f7ff f9f2 	bl	8005670 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800628c:	4b31      	ldr	r3, [pc, #196]	@ (8006354 <tcp_slowtmr+0x5a8>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <tcp_slowtmr+0x4f6>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f06f 010c 	mvn.w	r1, #12
 800629e:	68b8      	ldr	r0, [r7, #8]
 80062a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80062a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006354 <tcp_slowtmr+0x5a8>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d037      	beq.n	800631a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80062aa:	e592      	b.n	8005dd2 <tcp_slowtmr+0x26>
      prev = pcb;
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	7f1b      	ldrb	r3, [r3, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	7f1a      	ldrb	r2, [r3, #28]
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c8:	7f5b      	ldrb	r3, [r3, #29]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d325      	bcc.n	800631a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80062d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006354 <tcp_slowtmr+0x5a8>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <tcp_slowtmr+0x550>
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ec:	6912      	ldr	r2, [r2, #16]
 80062ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80062fa:	e002      	b.n	8006302 <tcp_slowtmr+0x556>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006302:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <tcp_slowtmr+0x5a8>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f47f ad62 	bne.w	8005dd0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800630c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006316:	f003 fb7b 	bl	8009a10 <tcp_output>
  while (pcb != NULL) {
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f ad5e 	bne.w	8005dde <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8006326:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <tcp_slowtmr+0x5ac>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800632c:	e069      	b.n	8006402 <tcp_slowtmr+0x656>
 800632e:	bf00      	nop
 8006330:	20006938 	.word	0x20006938
 8006334:	000a4cb8 	.word	0x000a4cb8
 8006338:	10624dd3 	.word	0x10624dd3
 800633c:	000124f8 	.word	0x000124f8
 8006340:	20006944 	.word	0x20006944
 8006344:	0800ef88 	.word	0x0800ef88
 8006348:	0800f3c0 	.word	0x0800f3c0
 800634c:	0800efcc 	.word	0x0800efcc
 8006350:	0800f3ec 	.word	0x0800f3ec
 8006354:	2000694c 	.word	0x2000694c
 8006358:	20006948 	.word	0x20006948
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	7d1b      	ldrb	r3, [r3, #20]
 8006360:	2b0a      	cmp	r3, #10
 8006362:	d006      	beq.n	8006372 <tcp_slowtmr+0x5c6>
 8006364:	4b2b      	ldr	r3, [pc, #172]	@ (8006414 <tcp_slowtmr+0x668>)
 8006366:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800636a:	492b      	ldr	r1, [pc, #172]	@ (8006418 <tcp_slowtmr+0x66c>)
 800636c:	482b      	ldr	r0, [pc, #172]	@ (800641c <tcp_slowtmr+0x670>)
 800636e:	f007 f98f 	bl	800d690 <iprintf>
    pcb_remove = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006378:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <tcp_slowtmr+0x674>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2bf0      	cmp	r3, #240	@ 0xf0
 8006384:	d904      	bls.n	8006390 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800638a:	3301      	adds	r3, #1
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006394:	2b00      	cmp	r3, #0
 8006396:	d02f      	beq.n	80063f8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800639a:	f000 fb2b 	bl	80069f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d010      	beq.n	80063c6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80063a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006424 <tcp_slowtmr+0x678>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d106      	bne.n	80063bc <tcp_slowtmr+0x610>
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <tcp_slowtmr+0x668>)
 80063b0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80063b4:	491c      	ldr	r1, [pc, #112]	@ (8006428 <tcp_slowtmr+0x67c>)
 80063b6:	4819      	ldr	r0, [pc, #100]	@ (800641c <tcp_slowtmr+0x670>)
 80063b8:	f007 f96a 	bl	800d690 <iprintf>
        prev->next = pcb->next;
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	60da      	str	r2, [r3, #12]
 80063c4:	e00f      	b.n	80063e6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80063c6:	4b17      	ldr	r3, [pc, #92]	@ (8006424 <tcp_slowtmr+0x678>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d006      	beq.n	80063de <tcp_slowtmr+0x632>
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <tcp_slowtmr+0x668>)
 80063d2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80063d6:	4915      	ldr	r1, [pc, #84]	@ (800642c <tcp_slowtmr+0x680>)
 80063d8:	4810      	ldr	r0, [pc, #64]	@ (800641c <tcp_slowtmr+0x670>)
 80063da:	f007 f959 	bl	800d690 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80063de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4a10      	ldr	r2, [pc, #64]	@ (8006424 <tcp_slowtmr+0x678>)
 80063e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80063f0:	69f8      	ldr	r0, [r7, #28]
 80063f2:	f7ff f93d 	bl	8005670 <tcp_free>
 80063f6:	e004      	b.n	8006402 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1a9      	bne.n	800635c <tcp_slowtmr+0x5b0>
    }
  }
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	3730      	adds	r7, #48	@ 0x30
 800640e:	46bd      	mov	sp, r7
 8006410:	bdb0      	pop	{r4, r5, r7, pc}
 8006412:	bf00      	nop
 8006414:	0800ef88 	.word	0x0800ef88
 8006418:	0800f418 	.word	0x0800f418
 800641c:	0800efcc 	.word	0x0800efcc
 8006420:	20006938 	.word	0x20006938
 8006424:	20006948 	.word	0x20006948
 8006428:	0800f448 	.word	0x0800f448
 800642c:	0800f470 	.word	0x0800f470

08006430 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006436:	4b2d      	ldr	r3, [pc, #180]	@ (80064ec <tcp_fasttmr+0xbc>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4b2b      	ldr	r3, [pc, #172]	@ (80064ec <tcp_fasttmr+0xbc>)
 8006440:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006442:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <tcp_fasttmr+0xc0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006448:	e048      	b.n	80064dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	7f9a      	ldrb	r2, [r3, #30]
 800644e:	4b27      	ldr	r3, [pc, #156]	@ (80064ec <tcp_fasttmr+0xbc>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d03f      	beq.n	80064d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006456:	4b25      	ldr	r3, [pc, #148]	@ (80064ec <tcp_fasttmr+0xbc>)
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	8b5b      	ldrh	r3, [r3, #26]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d010      	beq.n	800648c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8b5b      	ldrh	r3, [r3, #26]
 800646e:	f043 0302 	orr.w	r3, r3, #2
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f003 fac9 	bl	8009a10 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8b5b      	ldrh	r3, [r3, #26]
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8b5b      	ldrh	r3, [r3, #26]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8b5b      	ldrh	r3, [r3, #26]
 800649c:	f023 0308 	bic.w	r3, r3, #8
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fa76 	bl	8005998 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80064ba:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <tcp_fasttmr+0xc4>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f819 	bl	80064f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80064c6:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <tcp_fasttmr+0xc4>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d000      	beq.n	80064d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80064ce:	e7b8      	b.n	8006442 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	607b      	str	r3, [r7, #4]
 80064d4:	e002      	b.n	80064dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1b3      	bne.n	800644a <tcp_fasttmr+0x1a>
    }
  }
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000694e 	.word	0x2000694e
 80064f0:	20006944 	.word	0x20006944
 80064f4:	2000694c 	.word	0x2000694c

080064f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <tcp_process_refused_data+0x22>
 8006506:	4b37      	ldr	r3, [pc, #220]	@ (80065e4 <tcp_process_refused_data+0xec>)
 8006508:	f240 6209 	movw	r2, #1545	@ 0x609
 800650c:	4936      	ldr	r1, [pc, #216]	@ (80065e8 <tcp_process_refused_data+0xf0>)
 800650e:	4837      	ldr	r0, [pc, #220]	@ (80065ec <tcp_process_refused_data+0xf4>)
 8006510:	f007 f8be 	bl	800d690 <iprintf>
 8006514:	f06f 030f 	mvn.w	r3, #15
 8006518:	e060      	b.n	80065dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800651e:	7b5b      	ldrb	r3, [r3, #13]
 8006520:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006526:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <tcp_process_refused_data+0x58>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6918      	ldr	r0, [r3, #16]
 8006542:	2300      	movs	r3, #0
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	47a0      	blx	r4
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
 800654e:	e007      	b.n	8006560 <tcp_process_refused_data+0x68>
 8006550:	2300      	movs	r3, #0
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	2000      	movs	r0, #0
 8006558:	f000 f8a4 	bl	80066a4 <tcp_recv_null>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d12a      	bne.n	80065be <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d033      	beq.n	80065da <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006576:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800657a:	d005      	beq.n	8006588 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006580:	3301      	adds	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <tcp_process_refused_data+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6918      	ldr	r0, [r3, #16]
 800659c:	2300      	movs	r3, #0
 800659e:	2200      	movs	r2, #0
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	47a0      	blx	r4
 80065a4:	4603      	mov	r3, r0
 80065a6:	73fb      	strb	r3, [r7, #15]
 80065a8:	e001      	b.n	80065ae <tcp_process_refused_data+0xb6>
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80065ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b2:	f113 0f0d 	cmn.w	r3, #13
 80065b6:	d110      	bne.n	80065da <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80065b8:	f06f 030c 	mvn.w	r3, #12
 80065bc:	e00e      	b.n	80065dc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80065be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c2:	f113 0f0d 	cmn.w	r3, #13
 80065c6:	d102      	bne.n	80065ce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80065c8:	f06f 030c 	mvn.w	r3, #12
 80065cc:	e006      	b.n	80065dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80065d4:	f06f 0304 	mvn.w	r3, #4
 80065d8:	e000      	b.n	80065dc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd90      	pop	{r4, r7, pc}
 80065e4:	0800ef88 	.word	0x0800ef88
 80065e8:	0800f498 	.word	0x0800f498
 80065ec:	0800efcc 	.word	0x0800efcc

080065f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80065f8:	e007      	b.n	800660a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f80a 	bl	800661a <tcp_seg_free>
    seg = next;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f4      	bne.n	80065fa <tcp_segs_free+0xa>
  }
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00c      	beq.n	8006642 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fd7b 	bl	8005130 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	2003      	movs	r0, #3
 800663e:	f7fd ff01 	bl	8004444 <memp_free>
  }
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <tcp_seg_copy+0x1c>
 800665a:	4b0f      	ldr	r3, [pc, #60]	@ (8006698 <tcp_seg_copy+0x4c>)
 800665c:	f240 6282 	movw	r2, #1666	@ 0x682
 8006660:	490e      	ldr	r1, [pc, #56]	@ (800669c <tcp_seg_copy+0x50>)
 8006662:	480f      	ldr	r0, [pc, #60]	@ (80066a0 <tcp_seg_copy+0x54>)
 8006664:	f007 f814 	bl	800d690 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006668:	2003      	movs	r0, #3
 800666a:	f7fd fe7b 	bl	8004364 <memp_malloc>
 800666e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <tcp_seg_copy+0x2e>
    return NULL;
 8006676:	2300      	movs	r3, #0
 8006678:	e00a      	b.n	8006690 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800667a:	2210      	movs	r2, #16
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f007 f8e1 	bl	800d846 <memcpy>
  pbuf_ref(cseg->p);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fdf1 	bl	8005270 <pbuf_ref>
  return cseg;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	0800ef88 	.word	0x0800ef88
 800669c:	0800f4dc 	.word	0x0800f4dc
 80066a0:	0800efcc 	.word	0x0800efcc

080066a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <tcp_recv_null+0x28>
 80066b8:	4b12      	ldr	r3, [pc, #72]	@ (8006704 <tcp_recv_null+0x60>)
 80066ba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80066be:	4912      	ldr	r1, [pc, #72]	@ (8006708 <tcp_recv_null+0x64>)
 80066c0:	4812      	ldr	r0, [pc, #72]	@ (800670c <tcp_recv_null+0x68>)
 80066c2:	f006 ffe5 	bl	800d690 <iprintf>
 80066c6:	f06f 030f 	mvn.w	r3, #15
 80066ca:	e016      	b.n	80066fa <tcp_recv_null+0x56>

  if (p != NULL) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	891b      	ldrh	r3, [r3, #8]
 80066d6:	4619      	mov	r1, r3
 80066d8:	68b8      	ldr	r0, [r7, #8]
 80066da:	f7ff fb17 	bl	8005d0c <tcp_recved>
    pbuf_free(p);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe fd26 	bl	8005130 <pbuf_free>
 80066e4:	e008      	b.n	80066f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80066e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80066ee:	68b8      	ldr	r0, [r7, #8]
 80066f0:	f7ff f9bc 	bl	8005a6c <tcp_close>
 80066f4:	4603      	mov	r3, r0
 80066f6:	e000      	b.n	80066fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	0800ef88 	.word	0x0800ef88
 8006708:	0800f4f8 	.word	0x0800f4f8
 800670c:	0800efcc 	.word	0x0800efcc

08006710 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	db01      	blt.n	8006726 <tcp_kill_prio+0x16>
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	e000      	b.n	8006728 <tcp_kill_prio+0x18>
 8006726:	237f      	movs	r3, #127	@ 0x7f
 8006728:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d034      	beq.n	800679a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	3b01      	subs	r3, #1
 8006734:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800673e:	4b19      	ldr	r3, [pc, #100]	@ (80067a4 <tcp_kill_prio+0x94>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e01f      	b.n	8006786 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	7d5b      	ldrb	r3, [r3, #21]
 800674a:	7afa      	ldrb	r2, [r7, #11]
 800674c:	429a      	cmp	r2, r3
 800674e:	d80c      	bhi.n	800676a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006754:	7afa      	ldrb	r2, [r7, #11]
 8006756:	429a      	cmp	r2, r3
 8006758:	d112      	bne.n	8006780 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800675a:	4b13      	ldr	r3, [pc, #76]	@ (80067a8 <tcp_kill_prio+0x98>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	429a      	cmp	r2, r3
 8006768:	d80a      	bhi.n	8006780 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800676a:	4b0f      	ldr	r3, [pc, #60]	@ (80067a8 <tcp_kill_prio+0x98>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	7d5b      	ldrb	r3, [r3, #21]
 800677e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1dc      	bne.n	8006746 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006792:	6938      	ldr	r0, [r7, #16]
 8006794:	f7ff fa54 	bl	8005c40 <tcp_abort>
 8006798:	e000      	b.n	800679c <tcp_kill_prio+0x8c>
    return;
 800679a:	bf00      	nop
  }
}
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20006944 	.word	0x20006944
 80067a8:	20006938 	.word	0x20006938

080067ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d009      	beq.n	80067d0 <tcp_kill_state+0x24>
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	2b09      	cmp	r3, #9
 80067c0:	d006      	beq.n	80067d0 <tcp_kill_state+0x24>
 80067c2:	4b1a      	ldr	r3, [pc, #104]	@ (800682c <tcp_kill_state+0x80>)
 80067c4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80067c8:	4919      	ldr	r1, [pc, #100]	@ (8006830 <tcp_kill_state+0x84>)
 80067ca:	481a      	ldr	r0, [pc, #104]	@ (8006834 <tcp_kill_state+0x88>)
 80067cc:	f006 ff60 	bl	800d690 <iprintf>

  inactivity = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80067d8:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <tcp_kill_state+0x8c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	e017      	b.n	8006810 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	7d1b      	ldrb	r3, [r3, #20]
 80067e4:	79fa      	ldrb	r2, [r7, #7]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d10f      	bne.n	800680a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80067ea:	4b14      	ldr	r3, [pc, #80]	@ (800683c <tcp_kill_state+0x90>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d807      	bhi.n	800680a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80067fa:	4b10      	ldr	r3, [pc, #64]	@ (800683c <tcp_kill_state+0x90>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e4      	bne.n	80067e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800681c:	2100      	movs	r1, #0
 800681e:	6938      	ldr	r0, [r7, #16]
 8006820:	f7ff f950 	bl	8005ac4 <tcp_abandon>
  }
}
 8006824:	bf00      	nop
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	0800ef88 	.word	0x0800ef88
 8006830:	0800f514 	.word	0x0800f514
 8006834:	0800efcc 	.word	0x0800efcc
 8006838:	20006944 	.word	0x20006944
 800683c:	20006938 	.word	0x20006938

08006840 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800684e:	4b12      	ldr	r3, [pc, #72]	@ (8006898 <tcp_kill_timewait+0x58>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e012      	b.n	800687c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006856:	4b11      	ldr	r3, [pc, #68]	@ (800689c <tcp_kill_timewait+0x5c>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d807      	bhi.n	8006876 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <tcp_kill_timewait+0x5c>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e9      	bne.n	8006856 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006888:	68b8      	ldr	r0, [r7, #8]
 800688a:	f7ff f9d9 	bl	8005c40 <tcp_abort>
  }
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20006948 	.word	0x20006948
 800689c:	20006938 	.word	0x20006938

080068a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80068a6:	4b10      	ldr	r3, [pc, #64]	@ (80068e8 <tcp_handle_closepend+0x48>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80068ac:	e014      	b.n	80068d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8b5b      	ldrh	r3, [r3, #26]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8b5b      	ldrh	r3, [r3, #26]
 80068c4:	f023 0308 	bic.w	r3, r3, #8
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff f862 	bl	8005998 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e7      	bne.n	80068ae <tcp_handle_closepend+0xe>
  }
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20006944 	.word	0x20006944

080068ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068f6:	2001      	movs	r0, #1
 80068f8:	f7fd fd34 	bl	8004364 <memp_malloc>
 80068fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d126      	bne.n	8006952 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006904:	f7ff ffcc 	bl	80068a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006908:	f7ff ff9a 	bl	8006840 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800690c:	2001      	movs	r0, #1
 800690e:	f7fd fd29 	bl	8004364 <memp_malloc>
 8006912:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d11b      	bne.n	8006952 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800691a:	2009      	movs	r0, #9
 800691c:	f7ff ff46 	bl	80067ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006920:	2001      	movs	r0, #1
 8006922:	f7fd fd1f 	bl	8004364 <memp_malloc>
 8006926:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d111      	bne.n	8006952 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800692e:	2008      	movs	r0, #8
 8006930:	f7ff ff3c 	bl	80067ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006934:	2001      	movs	r0, #1
 8006936:	f7fd fd15 	bl	8004364 <memp_malloc>
 800693a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff fee3 	bl	8006710 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800694a:	2001      	movs	r0, #1
 800694c:	f7fd fd0a 	bl	8004364 <memp_malloc>
 8006950:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d03f      	beq.n	80069d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006958:	229c      	movs	r2, #156	@ 0x9c
 800695a:	2100      	movs	r1, #0
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f006 fefc 	bl	800d75a <memset>
    pcb->prio = prio;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	79fa      	ldrb	r2, [r7, #7]
 8006966:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800696e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006978:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	22ff      	movs	r2, #255	@ 0xff
 8006986:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800698e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2206      	movs	r2, #6
 8006994:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2206      	movs	r2, #6
 800699c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <tcp_alloc+0xf8>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <tcp_alloc+0xfc>)
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80069c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a08      	ldr	r2, [pc, #32]	@ (80069ec <tcp_alloc+0x100>)
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a07      	ldr	r2, [pc, #28]	@ (80069f0 <tcp_alloc+0x104>)
 80069d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80069d8:	68fb      	ldr	r3, [r7, #12]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20006938 	.word	0x20006938
 80069e8:	2000694e 	.word	0x2000694e
 80069ec:	080066a5 	.word	0x080066a5
 80069f0:	006ddd00 	.word	0x006ddd00

080069f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d107      	bne.n	8006a12 <tcp_pcb_purge+0x1e>
 8006a02:	4b21      	ldr	r3, [pc, #132]	@ (8006a88 <tcp_pcb_purge+0x94>)
 8006a04:	f640 0251 	movw	r2, #2129	@ 0x851
 8006a08:	4920      	ldr	r1, [pc, #128]	@ (8006a8c <tcp_pcb_purge+0x98>)
 8006a0a:	4821      	ldr	r0, [pc, #132]	@ (8006a90 <tcp_pcb_purge+0x9c>)
 8006a0c:	f006 fe40 	bl	800d690 <iprintf>
 8006a10:	e037      	b.n	8006a82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7d1b      	ldrb	r3, [r3, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d033      	beq.n	8006a82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006a1e:	2b0a      	cmp	r3, #10
 8006a20:	d02f      	beq.n	8006a82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d02b      	beq.n	8006a82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fb7a 	bl	8005130 <pbuf_free>
      pcb->refused_data = NULL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f986 	bl	8006d5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a56:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff fdc7 	bl	80065f0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fdc2 	bl	80065f0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0800ef88 	.word	0x0800ef88
 8006a8c:	0800f5d4 	.word	0x0800f5d4
 8006a90:	0800efcc 	.word	0x0800efcc

08006a94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <tcp_pcb_remove+0x1e>
 8006aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ba0 <tcp_pcb_remove+0x10c>)
 8006aa6:	f640 0283 	movw	r2, #2179	@ 0x883
 8006aaa:	493e      	ldr	r1, [pc, #248]	@ (8006ba4 <tcp_pcb_remove+0x110>)
 8006aac:	483e      	ldr	r0, [pc, #248]	@ (8006ba8 <tcp_pcb_remove+0x114>)
 8006aae:	f006 fdef 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <tcp_pcb_remove+0x32>
 8006ab8:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <tcp_pcb_remove+0x10c>)
 8006aba:	f640 0284 	movw	r2, #2180	@ 0x884
 8006abe:	493b      	ldr	r1, [pc, #236]	@ (8006bac <tcp_pcb_remove+0x118>)
 8006ac0:	4839      	ldr	r0, [pc, #228]	@ (8006ba8 <tcp_pcb_remove+0x114>)
 8006ac2:	f006 fde5 	bl	800d690 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d105      	bne.n	8006adc <tcp_pcb_remove+0x48>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e013      	b.n	8006b04 <tcp_pcb_remove+0x70>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e00c      	b.n	8006afe <tcp_pcb_remove+0x6a>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d104      	bne.n	8006af8 <tcp_pcb_remove+0x64>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	60da      	str	r2, [r3, #12]
 8006af6:	e005      	b.n	8006b04 <tcp_pcb_remove+0x70>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1ef      	bne.n	8006ae4 <tcp_pcb_remove+0x50>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2200      	movs	r2, #0
 8006b08:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006b0a:	6838      	ldr	r0, [r7, #0]
 8006b0c:	f7ff ff72 	bl	80069f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	7d1b      	ldrb	r3, [r3, #20]
 8006b14:	2b0a      	cmp	r3, #10
 8006b16:	d013      	beq.n	8006b40 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d00f      	beq.n	8006b40 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	8b5b      	ldrh	r3, [r3, #26]
 8006b24:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	8b5b      	ldrh	r3, [r3, #26]
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006b3a:	6838      	ldr	r0, [r7, #0]
 8006b3c:	f002 ff68 	bl	8009a10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	7d1b      	ldrb	r3, [r3, #20]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d020      	beq.n	8006b8a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <tcp_pcb_remove+0xca>
 8006b50:	4b13      	ldr	r3, [pc, #76]	@ (8006ba0 <tcp_pcb_remove+0x10c>)
 8006b52:	f640 0293 	movw	r2, #2195	@ 0x893
 8006b56:	4916      	ldr	r1, [pc, #88]	@ (8006bb0 <tcp_pcb_remove+0x11c>)
 8006b58:	4813      	ldr	r0, [pc, #76]	@ (8006ba8 <tcp_pcb_remove+0x114>)
 8006b5a:	f006 fd99 	bl	800d690 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <tcp_pcb_remove+0xe0>
 8006b66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <tcp_pcb_remove+0x10c>)
 8006b68:	f640 0294 	movw	r2, #2196	@ 0x894
 8006b6c:	4911      	ldr	r1, [pc, #68]	@ (8006bb4 <tcp_pcb_remove+0x120>)
 8006b6e:	480e      	ldr	r0, [pc, #56]	@ (8006ba8 <tcp_pcb_remove+0x114>)
 8006b70:	f006 fd8e 	bl	800d690 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <tcp_pcb_remove+0xf6>
 8006b7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <tcp_pcb_remove+0x10c>)
 8006b7e:	f640 0296 	movw	r2, #2198	@ 0x896
 8006b82:	490d      	ldr	r1, [pc, #52]	@ (8006bb8 <tcp_pcb_remove+0x124>)
 8006b84:	4808      	ldr	r0, [pc, #32]	@ (8006ba8 <tcp_pcb_remove+0x114>)
 8006b86:	f006 fd83 	bl	800d690 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	0800ef88 	.word	0x0800ef88
 8006ba4:	0800f5f0 	.word	0x0800f5f0
 8006ba8:	0800efcc 	.word	0x0800efcc
 8006bac:	0800f60c 	.word	0x0800f60c
 8006bb0:	0800f62c 	.word	0x0800f62c
 8006bb4:	0800f644 	.word	0x0800f644
 8006bb8:	0800f660 	.word	0x0800f660

08006bbc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <tcp_next_iss+0x1c>
 8006bca:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <tcp_next_iss+0x38>)
 8006bcc:	f640 02af 	movw	r2, #2223	@ 0x8af
 8006bd0:	4909      	ldr	r1, [pc, #36]	@ (8006bf8 <tcp_next_iss+0x3c>)
 8006bd2:	480a      	ldr	r0, [pc, #40]	@ (8006bfc <tcp_next_iss+0x40>)
 8006bd4:	f006 fd5c 	bl	800d690 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006bd8:	4b09      	ldr	r3, [pc, #36]	@ (8006c00 <tcp_next_iss+0x44>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <tcp_next_iss+0x48>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	4a07      	ldr	r2, [pc, #28]	@ (8006c00 <tcp_next_iss+0x44>)
 8006be4:	6013      	str	r3, [r2, #0]
  return iss;
 8006be6:	4b06      	ldr	r3, [pc, #24]	@ (8006c00 <tcp_next_iss+0x44>)
 8006be8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	0800ef88 	.word	0x0800ef88
 8006bf8:	0800f678 	.word	0x0800f678
 8006bfc:	0800efcc 	.word	0x0800efcc
 8006c00:	20000024 	.word	0x20000024
 8006c04:	20006938 	.word	0x20006938

08006c08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <tcp_eff_send_mss_netif+0x22>
 8006c1c:	4b14      	ldr	r3, [pc, #80]	@ (8006c70 <tcp_eff_send_mss_netif+0x68>)
 8006c1e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8006c22:	4914      	ldr	r1, [pc, #80]	@ (8006c74 <tcp_eff_send_mss_netif+0x6c>)
 8006c24:	4814      	ldr	r0, [pc, #80]	@ (8006c78 <tcp_eff_send_mss_netif+0x70>)
 8006c26:	f006 fd33 	bl	800d690 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006c30:	89fb      	ldrh	r3, [r7, #14]
 8006c32:	e019      	b.n	8006c68 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006c38:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006c3a:	8afb      	ldrh	r3, [r7, #22]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d012      	beq.n	8006c66 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006c40:	2328      	movs	r3, #40	@ 0x28
 8006c42:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006c44:	8afa      	ldrh	r2, [r7, #22]
 8006c46:	8abb      	ldrh	r3, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d904      	bls.n	8006c56 <tcp_eff_send_mss_netif+0x4e>
 8006c4c:	8afa      	ldrh	r2, [r7, #22]
 8006c4e:	8abb      	ldrh	r3, [r7, #20]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	e000      	b.n	8006c58 <tcp_eff_send_mss_netif+0x50>
 8006c56:	2300      	movs	r3, #0
 8006c58:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006c5a:	8a7a      	ldrh	r2, [r7, #18]
 8006c5c:	89fb      	ldrh	r3, [r7, #14]
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bf28      	it	cs
 8006c62:	4613      	movcs	r3, r2
 8006c64:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006c66:	89fb      	ldrh	r3, [r7, #14]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	0800ef88 	.word	0x0800ef88
 8006c74:	0800f694 	.word	0x0800f694
 8006c78:	0800efcc 	.word	0x0800efcc

08006c7c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d119      	bne.n	8006cc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006c90:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006c92:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8006c96:	4910      	ldr	r1, [pc, #64]	@ (8006cd8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006c98:	4810      	ldr	r0, [pc, #64]	@ (8006cdc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006c9a:	f006 fcf9 	bl	800d690 <iprintf>

  while (pcb != NULL) {
 8006c9e:	e011      	b.n	8006cc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d108      	bne.n	8006cbe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7fe ffc4 	bl	8005c40 <tcp_abort>
      pcb = next;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e002      	b.n	8006cc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1ea      	bne.n	8006ca0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	0800ef88 	.word	0x0800ef88
 8006cd8:	0800f6bc 	.word	0x0800f6bc
 8006cdc:	0800efcc 	.word	0x0800efcc

08006ce0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d02a      	beq.n	8006d46 <tcp_netif_ip_addr_changed+0x66>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d026      	beq.n	8006d46 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006cf8:	4b15      	ldr	r3, [pc, #84]	@ (8006d50 <tcp_netif_ip_addr_changed+0x70>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ffbc 	bl	8006c7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006d04:	4b13      	ldr	r3, [pc, #76]	@ (8006d54 <tcp_netif_ip_addr_changed+0x74>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff ffb6 	bl	8006c7c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d017      	beq.n	8006d46 <tcp_netif_ip_addr_changed+0x66>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d013      	beq.n	8006d46 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d58 <tcp_netif_ip_addr_changed+0x78>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e00c      	b.n	8006d40 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d103      	bne.n	8006d3a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1ef      	bne.n	8006d26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20006944 	.word	0x20006944
 8006d54:	2000693c 	.word	0x2000693c
 8006d58:	20006940 	.word	0x20006940

08006d5c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fc3d 	bl	80065f0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b08d      	sub	sp, #52	@ 0x34
 8006d88:	af04      	add	r7, sp, #16
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <tcp_input+0x1c>
 8006d94:	4b9b      	ldr	r3, [pc, #620]	@ (8007004 <tcp_input+0x280>)
 8006d96:	2283      	movs	r2, #131	@ 0x83
 8006d98:	499b      	ldr	r1, [pc, #620]	@ (8007008 <tcp_input+0x284>)
 8006d9a:	489c      	ldr	r0, [pc, #624]	@ (800700c <tcp_input+0x288>)
 8006d9c:	f006 fc78 	bl	800d690 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a9a      	ldr	r2, [pc, #616]	@ (8007010 <tcp_input+0x28c>)
 8006da6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	895b      	ldrh	r3, [r3, #10]
 8006dac:	2b13      	cmp	r3, #19
 8006dae:	f240 83d1 	bls.w	8007554 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006db2:	4b98      	ldr	r3, [pc, #608]	@ (8007014 <tcp_input+0x290>)
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	4a97      	ldr	r2, [pc, #604]	@ (8007014 <tcp_input+0x290>)
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f005 fc11 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 83c7 	bne.w	8007558 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006dca:	4b92      	ldr	r3, [pc, #584]	@ (8007014 <tcp_input+0x290>)
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006dd2:	2be0      	cmp	r3, #224	@ 0xe0
 8006dd4:	f000 83c0 	beq.w	8007558 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8007010 <tcp_input+0x28c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	899b      	ldrh	r3, [r3, #12]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fc fe47 	bl	8003a74 <lwip_htons>
 8006de6:	4603      	mov	r3, r0
 8006de8:	0b1b      	lsrs	r3, r3, #12
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006df2:	7cbb      	ldrb	r3, [r7, #18]
 8006df4:	2b13      	cmp	r3, #19
 8006df6:	f240 83b1 	bls.w	800755c <tcp_input+0x7d8>
 8006dfa:	7cbb      	ldrb	r3, [r7, #18]
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	891b      	ldrh	r3, [r3, #8]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	f200 83aa 	bhi.w	800755c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006e08:	7cbb      	ldrb	r3, [r7, #18]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b14      	subs	r3, #20
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	4b81      	ldr	r3, [pc, #516]	@ (8007018 <tcp_input+0x294>)
 8006e12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006e14:	4b81      	ldr	r3, [pc, #516]	@ (800701c <tcp_input+0x298>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	895a      	ldrh	r2, [r3, #10]
 8006e1e:	7cbb      	ldrb	r3, [r7, #18]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d309      	bcc.n	8006e3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006e26:	4b7c      	ldr	r3, [pc, #496]	@ (8007018 <tcp_input+0x294>)
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8007020 <tcp_input+0x29c>)
 8006e2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006e2e:	7cbb      	ldrb	r3, [r7, #18]
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fe f8f6 	bl	8005024 <pbuf_remove_header>
 8006e38:	e04e      	b.n	8006ed8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <tcp_input+0xca>
 8006e42:	4b70      	ldr	r3, [pc, #448]	@ (8007004 <tcp_input+0x280>)
 8006e44:	22c2      	movs	r2, #194	@ 0xc2
 8006e46:	4977      	ldr	r1, [pc, #476]	@ (8007024 <tcp_input+0x2a0>)
 8006e48:	4870      	ldr	r0, [pc, #448]	@ (800700c <tcp_input+0x288>)
 8006e4a:	f006 fc21 	bl	800d690 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006e4e:	2114      	movs	r1, #20
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fe f8e7 	bl	8005024 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	895a      	ldrh	r2, [r3, #10]
 8006e5a:	4b71      	ldr	r3, [pc, #452]	@ (8007020 <tcp_input+0x29c>)
 8006e5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8007018 <tcp_input+0x294>)
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	4b6f      	ldr	r3, [pc, #444]	@ (8007020 <tcp_input+0x29c>)
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8007020 <tcp_input+0x29c>)
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fe f8d7 	bl	8005024 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	895b      	ldrh	r3, [r3, #10]
 8006e7c:	8a3a      	ldrh	r2, [r7, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f200 836e 	bhi.w	8007560 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4a64      	ldr	r2, [pc, #400]	@ (800701c <tcp_input+0x298>)
 8006e8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	8a3a      	ldrh	r2, [r7, #16]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fe f8c4 	bl	8005024 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	891a      	ldrh	r2, [r3, #8]
 8006ea0:	8a3b      	ldrh	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	895b      	ldrh	r3, [r3, #10]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <tcp_input+0x13a>
 8006eb2:	4b54      	ldr	r3, [pc, #336]	@ (8007004 <tcp_input+0x280>)
 8006eb4:	22df      	movs	r2, #223	@ 0xdf
 8006eb6:	495c      	ldr	r1, [pc, #368]	@ (8007028 <tcp_input+0x2a4>)
 8006eb8:	4854      	ldr	r0, [pc, #336]	@ (800700c <tcp_input+0x288>)
 8006eba:	f006 fbe9 	bl	800d690 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	891a      	ldrh	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	891b      	ldrh	r3, [r3, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d005      	beq.n	8006ed8 <tcp_input+0x154>
 8006ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8007004 <tcp_input+0x280>)
 8006ece:	22e0      	movs	r2, #224	@ 0xe0
 8006ed0:	4956      	ldr	r1, [pc, #344]	@ (800702c <tcp_input+0x2a8>)
 8006ed2:	484e      	ldr	r0, [pc, #312]	@ (800700c <tcp_input+0x288>)
 8006ed4:	f006 fbdc 	bl	800d690 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8007010 <tcp_input+0x28c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8007010 <tcp_input+0x28c>)
 8006ee2:	6814      	ldr	r4, [r2, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fc fdc5 	bl	8003a74 <lwip_htons>
 8006eea:	4603      	mov	r3, r0
 8006eec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006eee:	4b48      	ldr	r3, [pc, #288]	@ (8007010 <tcp_input+0x28c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	885b      	ldrh	r3, [r3, #2]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	4a46      	ldr	r2, [pc, #280]	@ (8007010 <tcp_input+0x28c>)
 8006ef8:	6814      	ldr	r4, [r2, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fc fdba 	bl	8003a74 <lwip_htons>
 8006f00:	4603      	mov	r3, r0
 8006f02:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006f04:	4b42      	ldr	r3, [pc, #264]	@ (8007010 <tcp_input+0x28c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4a41      	ldr	r2, [pc, #260]	@ (8007010 <tcp_input+0x28c>)
 8006f0c:	6814      	ldr	r4, [r2, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fc fdc5 	bl	8003a9e <lwip_htonl>
 8006f14:	4603      	mov	r3, r0
 8006f16:	6063      	str	r3, [r4, #4]
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	4a45      	ldr	r2, [pc, #276]	@ (8007030 <tcp_input+0x2ac>)
 8006f1c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8007010 <tcp_input+0x28c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4a3a      	ldr	r2, [pc, #232]	@ (8007010 <tcp_input+0x28c>)
 8006f26:	6814      	ldr	r4, [r2, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fc fdb8 	bl	8003a9e <lwip_htonl>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	60a3      	str	r3, [r4, #8]
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	4a3f      	ldr	r2, [pc, #252]	@ (8007034 <tcp_input+0x2b0>)
 8006f36:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006f38:	4b35      	ldr	r3, [pc, #212]	@ (8007010 <tcp_input+0x28c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	89db      	ldrh	r3, [r3, #14]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4a33      	ldr	r2, [pc, #204]	@ (8007010 <tcp_input+0x28c>)
 8006f42:	6814      	ldr	r4, [r2, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fc fd95 	bl	8003a74 <lwip_htons>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006f4e:	4b30      	ldr	r3, [pc, #192]	@ (8007010 <tcp_input+0x28c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	899b      	ldrh	r3, [r3, #12]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fc fd8c 	bl	8003a74 <lwip_htons>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4b34      	ldr	r3, [pc, #208]	@ (8007038 <tcp_input+0x2b4>)
 8006f68:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	891a      	ldrh	r2, [r3, #8]
 8006f6e:	4b33      	ldr	r3, [pc, #204]	@ (800703c <tcp_input+0x2b8>)
 8006f70:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006f72:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <tcp_input+0x2b4>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00c      	beq.n	8006f98 <tcp_input+0x214>
    tcplen++;
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800703c <tcp_input+0x2b8>)
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	4b2d      	ldr	r3, [pc, #180]	@ (800703c <tcp_input+0x2b8>)
 8006f88:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	891a      	ldrh	r2, [r3, #8]
 8006f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800703c <tcp_input+0x2b8>)
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	f200 82e6 	bhi.w	8007564 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f9c:	4b28      	ldr	r3, [pc, #160]	@ (8007040 <tcp_input+0x2bc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	e09d      	b.n	80070e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	7d1b      	ldrb	r3, [r3, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <tcp_input+0x234>
 8006fac:	4b15      	ldr	r3, [pc, #84]	@ (8007004 <tcp_input+0x280>)
 8006fae:	22fb      	movs	r2, #251	@ 0xfb
 8006fb0:	4924      	ldr	r1, [pc, #144]	@ (8007044 <tcp_input+0x2c0>)
 8006fb2:	4816      	ldr	r0, [pc, #88]	@ (800700c <tcp_input+0x288>)
 8006fb4:	f006 fb6c 	bl	800d690 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	7d1b      	ldrb	r3, [r3, #20]
 8006fbc:	2b0a      	cmp	r3, #10
 8006fbe:	d105      	bne.n	8006fcc <tcp_input+0x248>
 8006fc0:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <tcp_input+0x280>)
 8006fc2:	22fc      	movs	r2, #252	@ 0xfc
 8006fc4:	4920      	ldr	r1, [pc, #128]	@ (8007048 <tcp_input+0x2c4>)
 8006fc6:	4811      	ldr	r0, [pc, #68]	@ (800700c <tcp_input+0x288>)
 8006fc8:	f006 fb62 	bl	800d690 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	7d1b      	ldrb	r3, [r3, #20]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d105      	bne.n	8006fe0 <tcp_input+0x25c>
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <tcp_input+0x280>)
 8006fd6:	22fd      	movs	r2, #253	@ 0xfd
 8006fd8:	491c      	ldr	r1, [pc, #112]	@ (800704c <tcp_input+0x2c8>)
 8006fda:	480c      	ldr	r0, [pc, #48]	@ (800700c <tcp_input+0x288>)
 8006fdc:	f006 fb58 	bl	800d690 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	7a1b      	ldrb	r3, [r3, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d033      	beq.n	8007050 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	7a1a      	ldrb	r2, [r3, #8]
 8006fec:	4b09      	ldr	r3, [pc, #36]	@ (8007014 <tcp_input+0x290>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d029      	beq.n	8007050 <tcp_input+0x2cc>
      prev = pcb;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	61bb      	str	r3, [r7, #24]
      continue;
 8007000:	e06b      	b.n	80070da <tcp_input+0x356>
 8007002:	bf00      	nop
 8007004:	0800f6f0 	.word	0x0800f6f0
 8007008:	0800f724 	.word	0x0800f724
 800700c:	0800f73c 	.word	0x0800f73c
 8007010:	20006960 	.word	0x20006960
 8007014:	20000208 	.word	0x20000208
 8007018:	20006964 	.word	0x20006964
 800701c:	20006968 	.word	0x20006968
 8007020:	20006966 	.word	0x20006966
 8007024:	0800f764 	.word	0x0800f764
 8007028:	0800f774 	.word	0x0800f774
 800702c:	0800f780 	.word	0x0800f780
 8007030:	20006970 	.word	0x20006970
 8007034:	20006974 	.word	0x20006974
 8007038:	2000697c 	.word	0x2000697c
 800703c:	2000697a 	.word	0x2000697a
 8007040:	20006944 	.word	0x20006944
 8007044:	0800f7a0 	.word	0x0800f7a0
 8007048:	0800f7c8 	.word	0x0800f7c8
 800704c:	0800f7f4 	.word	0x0800f7f4
    }

    if (pcb->remote_port == tcphdr->src &&
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	8b1a      	ldrh	r2, [r3, #24]
 8007054:	4b72      	ldr	r3, [pc, #456]	@ (8007220 <tcp_input+0x49c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	429a      	cmp	r2, r3
 800705e:	d13a      	bne.n	80070d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	8ada      	ldrh	r2, [r3, #22]
 8007064:	4b6e      	ldr	r3, [pc, #440]	@ (8007220 <tcp_input+0x49c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800706c:	429a      	cmp	r2, r3
 800706e:	d132      	bne.n	80070d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4b6b      	ldr	r3, [pc, #428]	@ (8007224 <tcp_input+0x4a0>)
 8007076:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007078:	429a      	cmp	r2, r3
 800707a:	d12c      	bne.n	80070d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b68      	ldr	r3, [pc, #416]	@ (8007224 <tcp_input+0x4a0>)
 8007082:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007084:	429a      	cmp	r2, r3
 8007086:	d126      	bne.n	80070d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	429a      	cmp	r2, r3
 8007090:	d106      	bne.n	80070a0 <tcp_input+0x31c>
 8007092:	4b65      	ldr	r3, [pc, #404]	@ (8007228 <tcp_input+0x4a4>)
 8007094:	f240 120d 	movw	r2, #269	@ 0x10d
 8007098:	4964      	ldr	r1, [pc, #400]	@ (800722c <tcp_input+0x4a8>)
 800709a:	4865      	ldr	r0, [pc, #404]	@ (8007230 <tcp_input+0x4ac>)
 800709c:	f006 faf8 	bl	800d690 <iprintf>
      if (prev != NULL) {
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <tcp_input+0x338>
        prev->next = pcb->next;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80070ae:	4b61      	ldr	r3, [pc, #388]	@ (8007234 <tcp_input+0x4b0>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80070b6:	4a5f      	ldr	r2, [pc, #380]	@ (8007234 <tcp_input+0x4b0>)
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d111      	bne.n	80070ea <tcp_input+0x366>
 80070c6:	4b58      	ldr	r3, [pc, #352]	@ (8007228 <tcp_input+0x4a4>)
 80070c8:	f240 1215 	movw	r2, #277	@ 0x115
 80070cc:	495a      	ldr	r1, [pc, #360]	@ (8007238 <tcp_input+0x4b4>)
 80070ce:	4858      	ldr	r0, [pc, #352]	@ (8007230 <tcp_input+0x4ac>)
 80070d0:	f006 fade 	bl	800d690 <iprintf>
      break;
 80070d4:	e009      	b.n	80070ea <tcp_input+0x366>
    }
    prev = pcb;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f47f af5e 	bne.w	8006fa4 <tcp_input+0x220>
 80070e8:	e000      	b.n	80070ec <tcp_input+0x368>
      break;
 80070ea:	bf00      	nop
  }

  if (pcb == NULL) {
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f040 80aa 	bne.w	8007248 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070f4:	4b51      	ldr	r3, [pc, #324]	@ (800723c <tcp_input+0x4b8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	e03f      	b.n	800717c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	7d1b      	ldrb	r3, [r3, #20]
 8007100:	2b0a      	cmp	r3, #10
 8007102:	d006      	beq.n	8007112 <tcp_input+0x38e>
 8007104:	4b48      	ldr	r3, [pc, #288]	@ (8007228 <tcp_input+0x4a4>)
 8007106:	f240 121f 	movw	r2, #287	@ 0x11f
 800710a:	494d      	ldr	r1, [pc, #308]	@ (8007240 <tcp_input+0x4bc>)
 800710c:	4848      	ldr	r0, [pc, #288]	@ (8007230 <tcp_input+0x4ac>)
 800710e:	f006 fabf 	bl	800d690 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	7a1b      	ldrb	r3, [r3, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	7a1a      	ldrb	r2, [r3, #8]
 800711e:	4b41      	ldr	r3, [pc, #260]	@ (8007224 <tcp_input+0x4a0>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007126:	3301      	adds	r3, #1
 8007128:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800712a:	429a      	cmp	r2, r3
 800712c:	d122      	bne.n	8007174 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	8b1a      	ldrh	r2, [r3, #24]
 8007132:	4b3b      	ldr	r3, [pc, #236]	@ (8007220 <tcp_input+0x49c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	429a      	cmp	r2, r3
 800713c:	d11b      	bne.n	8007176 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	8ada      	ldrh	r2, [r3, #22]
 8007142:	4b37      	ldr	r3, [pc, #220]	@ (8007220 <tcp_input+0x49c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800714a:	429a      	cmp	r2, r3
 800714c:	d113      	bne.n	8007176 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	4b34      	ldr	r3, [pc, #208]	@ (8007224 <tcp_input+0x4a0>)
 8007154:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007156:	429a      	cmp	r2, r3
 8007158:	d10d      	bne.n	8007176 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b31      	ldr	r3, [pc, #196]	@ (8007224 <tcp_input+0x4a0>)
 8007160:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007162:	429a      	cmp	r2, r3
 8007164:	d107      	bne.n	8007176 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007166:	69f8      	ldr	r0, [r7, #28]
 8007168:	f000 fb56 	bl	8007818 <tcp_timewait_input>
        }
        pbuf_free(p);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fd ffdf 	bl	8005130 <pbuf_free>
        return;
 8007172:	e1fd      	b.n	8007570 <tcp_input+0x7ec>
        continue;
 8007174:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1bc      	bne.n	80070fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007186:	4b2f      	ldr	r3, [pc, #188]	@ (8007244 <tcp_input+0x4c0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e02a      	b.n	80071e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	7a1b      	ldrb	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	7a1a      	ldrb	r2, [r3, #8]
 800719a:	4b22      	ldr	r3, [pc, #136]	@ (8007224 <tcp_input+0x4a0>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071a2:	3301      	adds	r3, #1
 80071a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d002      	beq.n	80071b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	61bb      	str	r3, [r7, #24]
        continue;
 80071ae:	e016      	b.n	80071de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	8ada      	ldrh	r2, [r3, #22]
 80071b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007220 <tcp_input+0x49c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	429a      	cmp	r2, r3
 80071be:	d10c      	bne.n	80071da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4b17      	ldr	r3, [pc, #92]	@ (8007224 <tcp_input+0x4a0>)
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d00f      	beq.n	80071ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00d      	beq.n	80071ee <tcp_input+0x46a>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1d1      	bne.n	800718e <tcp_input+0x40a>
 80071ea:	e000      	b.n	80071ee <tcp_input+0x46a>
            break;
 80071ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d029      	beq.n	8007248 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <tcp_input+0x4c0>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800720a:	4a0e      	ldr	r2, [pc, #56]	@ (8007244 <tcp_input+0x4c0>)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007210:	6978      	ldr	r0, [r7, #20]
 8007212:	f000 fa03 	bl	800761c <tcp_listen_input>
      }
      pbuf_free(p);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fd ff8a 	bl	8005130 <pbuf_free>
      return;
 800721c:	e1a8      	b.n	8007570 <tcp_input+0x7ec>
 800721e:	bf00      	nop
 8007220:	20006960 	.word	0x20006960
 8007224:	20000208 	.word	0x20000208
 8007228:	0800f6f0 	.word	0x0800f6f0
 800722c:	0800f81c 	.word	0x0800f81c
 8007230:	0800f73c 	.word	0x0800f73c
 8007234:	20006944 	.word	0x20006944
 8007238:	0800f848 	.word	0x0800f848
 800723c:	20006948 	.word	0x20006948
 8007240:	0800f874 	.word	0x0800f874
 8007244:	20006940 	.word	0x20006940
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8158 	beq.w	8007500 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007250:	4b95      	ldr	r3, [pc, #596]	@ (80074a8 <tcp_input+0x724>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	891a      	ldrh	r2, [r3, #8]
 800725a:	4b93      	ldr	r3, [pc, #588]	@ (80074a8 <tcp_input+0x724>)
 800725c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800725e:	4a92      	ldr	r2, [pc, #584]	@ (80074a8 <tcp_input+0x724>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007264:	4b91      	ldr	r3, [pc, #580]	@ (80074ac <tcp_input+0x728>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a8f      	ldr	r2, [pc, #572]	@ (80074a8 <tcp_input+0x724>)
 800726a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800726c:	4b90      	ldr	r3, [pc, #576]	@ (80074b0 <tcp_input+0x72c>)
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007272:	4b90      	ldr	r3, [pc, #576]	@ (80074b4 <tcp_input+0x730>)
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007278:	4b8f      	ldr	r3, [pc, #572]	@ (80074b8 <tcp_input+0x734>)
 800727a:	2200      	movs	r2, #0
 800727c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800727e:	4b8f      	ldr	r3, [pc, #572]	@ (80074bc <tcp_input+0x738>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d006      	beq.n	8007298 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7b5b      	ldrb	r3, [r3, #13]
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800729c:	2b00      	cmp	r3, #0
 800729e:	d017      	beq.n	80072d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80072a0:	69f8      	ldr	r0, [r7, #28]
 80072a2:	f7ff f929 	bl	80064f8 <tcp_process_refused_data>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f113 0f0d 	cmn.w	r3, #13
 80072ac:	d007      	beq.n	80072be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80072b6:	4b82      	ldr	r3, [pc, #520]	@ (80074c0 <tcp_input+0x73c>)
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f040 80e3 	bne.w	800748e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80072c8:	69f8      	ldr	r0, [r7, #28]
 80072ca:	f003 f9a7 	bl	800a61c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80072ce:	e0de      	b.n	800748e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80072d0:	4a7c      	ldr	r2, [pc, #496]	@ (80074c4 <tcp_input+0x740>)
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80072d6:	69f8      	ldr	r0, [r7, #28]
 80072d8:	f000 fb18 	bl	800790c <tcp_process>
 80072dc:	4603      	mov	r3, r0
 80072de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80072e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80072e4:	f113 0f0d 	cmn.w	r3, #13
 80072e8:	f000 80d3 	beq.w	8007492 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80072ec:	4b71      	ldr	r3, [pc, #452]	@ (80074b4 <tcp_input+0x730>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d015      	beq.n	8007324 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <tcp_input+0x590>
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	6912      	ldr	r2, [r2, #16]
 800730c:	f06f 010d 	mvn.w	r1, #13
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007314:	69f9      	ldr	r1, [r7, #28]
 8007316:	486c      	ldr	r0, [pc, #432]	@ (80074c8 <tcp_input+0x744>)
 8007318:	f7ff fbbc 	bl	8006a94 <tcp_pcb_remove>
        tcp_free(pcb);
 800731c:	69f8      	ldr	r0, [r7, #28]
 800731e:	f7fe f9a7 	bl	8005670 <tcp_free>
 8007322:	e0da      	b.n	80074da <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007328:	4b63      	ldr	r3, [pc, #396]	@ (80074b8 <tcp_input+0x734>)
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01d      	beq.n	800736c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007330:	4b61      	ldr	r3, [pc, #388]	@ (80074b8 <tcp_input+0x734>)
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <tcp_input+0x5d2>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	6910      	ldr	r0, [r2, #16]
 800734a:	89fa      	ldrh	r2, [r7, #14]
 800734c:	69f9      	ldr	r1, [r7, #28]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	74fb      	strb	r3, [r7, #19]
 8007354:	e001      	b.n	800735a <tcp_input+0x5d6>
 8007356:	2300      	movs	r3, #0
 8007358:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800735a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800735e:	f113 0f0d 	cmn.w	r3, #13
 8007362:	f000 8098 	beq.w	8007496 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007366:	4b54      	ldr	r3, [pc, #336]	@ (80074b8 <tcp_input+0x734>)
 8007368:	2200      	movs	r2, #0
 800736a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800736c:	69f8      	ldr	r0, [r7, #28]
 800736e:	f000 f915 	bl	800759c <tcp_input_delayed_close>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8090 	bne.w	800749a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800737a:	4b4d      	ldr	r3, [pc, #308]	@ (80074b0 <tcp_input+0x72c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d041      	beq.n	8007406 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007386:	2b00      	cmp	r3, #0
 8007388:	d006      	beq.n	8007398 <tcp_input+0x614>
 800738a:	4b50      	ldr	r3, [pc, #320]	@ (80074cc <tcp_input+0x748>)
 800738c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007390:	494f      	ldr	r1, [pc, #316]	@ (80074d0 <tcp_input+0x74c>)
 8007392:	4850      	ldr	r0, [pc, #320]	@ (80074d4 <tcp_input+0x750>)
 8007394:	f006 f97c 	bl	800d690 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	8b5b      	ldrh	r3, [r3, #26]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80073a4:	4b42      	ldr	r3, [pc, #264]	@ (80074b0 <tcp_input+0x72c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fd fec1 	bl	8005130 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80073ae:	69f8      	ldr	r0, [r7, #28]
 80073b0:	f7fe fc46 	bl	8005c40 <tcp_abort>
            goto aborted;
 80073b4:	e091      	b.n	80074da <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <tcp_input+0x656>
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	6918      	ldr	r0, [r3, #16]
 80073ca:	4b39      	ldr	r3, [pc, #228]	@ (80074b0 <tcp_input+0x72c>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	2300      	movs	r3, #0
 80073d0:	69f9      	ldr	r1, [r7, #28]
 80073d2:	47a0      	blx	r4
 80073d4:	4603      	mov	r3, r0
 80073d6:	74fb      	strb	r3, [r7, #19]
 80073d8:	e008      	b.n	80073ec <tcp_input+0x668>
 80073da:	4b35      	ldr	r3, [pc, #212]	@ (80074b0 <tcp_input+0x72c>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	2000      	movs	r0, #0
 80073e4:	f7ff f95e 	bl	80066a4 <tcp_recv_null>
 80073e8:	4603      	mov	r3, r0
 80073ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80073ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073f0:	f113 0f0d 	cmn.w	r3, #13
 80073f4:	d053      	beq.n	800749e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80073f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80073fe:	4b2c      	ldr	r3, [pc, #176]	@ (80074b0 <tcp_input+0x72c>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007406:	4b2b      	ldr	r3, [pc, #172]	@ (80074b4 <tcp_input+0x730>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d030      	beq.n	8007474 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800741e:	7b5a      	ldrb	r2, [r3, #13]
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007424:	f042 0220 	orr.w	r2, r2, #32
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	735a      	strb	r2, [r3, #13]
 800742c:	e022      	b.n	8007474 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007432:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007436:	d005      	beq.n	8007444 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800743c:	3301      	adds	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <tcp_input+0x6e2>
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	6918      	ldr	r0, [r3, #16]
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	69f9      	ldr	r1, [r7, #28]
 800745e:	47a0      	blx	r4
 8007460:	4603      	mov	r3, r0
 8007462:	74fb      	strb	r3, [r7, #19]
 8007464:	e001      	b.n	800746a <tcp_input+0x6e6>
 8007466:	2300      	movs	r3, #0
 8007468:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800746a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800746e:	f113 0f0d 	cmn.w	r3, #13
 8007472:	d016      	beq.n	80074a2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007474:	4b13      	ldr	r3, [pc, #76]	@ (80074c4 <tcp_input+0x740>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800747a:	69f8      	ldr	r0, [r7, #28]
 800747c:	f000 f88e 	bl	800759c <tcp_input_delayed_close>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d128      	bne.n	80074d8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007486:	69f8      	ldr	r0, [r7, #28]
 8007488:	f002 fac2 	bl	8009a10 <tcp_output>
 800748c:	e025      	b.n	80074da <tcp_input+0x756>
        goto aborted;
 800748e:	bf00      	nop
 8007490:	e023      	b.n	80074da <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007492:	bf00      	nop
 8007494:	e021      	b.n	80074da <tcp_input+0x756>
              goto aborted;
 8007496:	bf00      	nop
 8007498:	e01f      	b.n	80074da <tcp_input+0x756>
          goto aborted;
 800749a:	bf00      	nop
 800749c:	e01d      	b.n	80074da <tcp_input+0x756>
            goto aborted;
 800749e:	bf00      	nop
 80074a0:	e01b      	b.n	80074da <tcp_input+0x756>
              goto aborted;
 80074a2:	bf00      	nop
 80074a4:	e019      	b.n	80074da <tcp_input+0x756>
 80074a6:	bf00      	nop
 80074a8:	20006950 	.word	0x20006950
 80074ac:	20006960 	.word	0x20006960
 80074b0:	20006980 	.word	0x20006980
 80074b4:	2000697d 	.word	0x2000697d
 80074b8:	20006978 	.word	0x20006978
 80074bc:	2000697c 	.word	0x2000697c
 80074c0:	2000697a 	.word	0x2000697a
 80074c4:	20006984 	.word	0x20006984
 80074c8:	20006944 	.word	0x20006944
 80074cc:	0800f6f0 	.word	0x0800f6f0
 80074d0:	0800f8a4 	.word	0x0800f8a4
 80074d4:	0800f73c 	.word	0x0800f73c
          goto aborted;
 80074d8:	bf00      	nop
    tcp_input_pcb = NULL;
 80074da:	4b27      	ldr	r3, [pc, #156]	@ (8007578 <tcp_input+0x7f4>)
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80074e0:	4b26      	ldr	r3, [pc, #152]	@ (800757c <tcp_input+0x7f8>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80074e6:	4b26      	ldr	r3, [pc, #152]	@ (8007580 <tcp_input+0x7fc>)
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d03f      	beq.n	800756e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80074ee:	4b24      	ldr	r3, [pc, #144]	@ (8007580 <tcp_input+0x7fc>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd fe1c 	bl	8005130 <pbuf_free>
      inseg.p = NULL;
 80074f8:	4b21      	ldr	r3, [pc, #132]	@ (8007580 <tcp_input+0x7fc>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80074fe:	e036      	b.n	800756e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007500:	4b20      	ldr	r3, [pc, #128]	@ (8007584 <tcp_input+0x800>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	899b      	ldrh	r3, [r3, #12]
 8007506:	b29b      	uxth	r3, r3
 8007508:	4618      	mov	r0, r3
 800750a:	f7fc fab3 	bl	8003a74 <lwip_htons>
 800750e:	4603      	mov	r3, r0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d118      	bne.n	800754c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800751a:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <tcp_input+0x804>)
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	4b1b      	ldr	r3, [pc, #108]	@ (800758c <tcp_input+0x808>)
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	4b1a      	ldr	r3, [pc, #104]	@ (8007590 <tcp_input+0x80c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800752a:	4b16      	ldr	r3, [pc, #88]	@ (8007584 <tcp_input+0x800>)
 800752c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800752e:	885b      	ldrh	r3, [r3, #2]
 8007530:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007532:	4a14      	ldr	r2, [pc, #80]	@ (8007584 <tcp_input+0x800>)
 8007534:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007536:	8812      	ldrh	r2, [r2, #0]
 8007538:	b292      	uxth	r2, r2
 800753a:	9202      	str	r2, [sp, #8]
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <tcp_input+0x810>)
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	4b15      	ldr	r3, [pc, #84]	@ (8007598 <tcp_input+0x814>)
 8007544:	4602      	mov	r2, r0
 8007546:	2000      	movs	r0, #0
 8007548:	f003 f816 	bl	800a578 <tcp_rst>
    pbuf_free(p);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fd fdef 	bl	8005130 <pbuf_free>
  return;
 8007552:	e00c      	b.n	800756e <tcp_input+0x7ea>
    goto dropped;
 8007554:	bf00      	nop
 8007556:	e006      	b.n	8007566 <tcp_input+0x7e2>
    goto dropped;
 8007558:	bf00      	nop
 800755a:	e004      	b.n	8007566 <tcp_input+0x7e2>
    goto dropped;
 800755c:	bf00      	nop
 800755e:	e002      	b.n	8007566 <tcp_input+0x7e2>
      goto dropped;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <tcp_input+0x7e2>
      goto dropped;
 8007564:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fd fde2 	bl	8005130 <pbuf_free>
 800756c:	e000      	b.n	8007570 <tcp_input+0x7ec>
  return;
 800756e:	bf00      	nop
}
 8007570:	3724      	adds	r7, #36	@ 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd90      	pop	{r4, r7, pc}
 8007576:	bf00      	nop
 8007578:	20006984 	.word	0x20006984
 800757c:	20006980 	.word	0x20006980
 8007580:	20006950 	.word	0x20006950
 8007584:	20006960 	.word	0x20006960
 8007588:	20006974 	.word	0x20006974
 800758c:	2000697a 	.word	0x2000697a
 8007590:	20006970 	.word	0x20006970
 8007594:	20000218 	.word	0x20000218
 8007598:	2000021c 	.word	0x2000021c

0800759c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <tcp_input_delayed_close+0x1c>
 80075aa:	4b17      	ldr	r3, [pc, #92]	@ (8007608 <tcp_input_delayed_close+0x6c>)
 80075ac:	f240 225a 	movw	r2, #602	@ 0x25a
 80075b0:	4916      	ldr	r1, [pc, #88]	@ (800760c <tcp_input_delayed_close+0x70>)
 80075b2:	4817      	ldr	r0, [pc, #92]	@ (8007610 <tcp_input_delayed_close+0x74>)
 80075b4:	f006 f86c 	bl	800d690 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80075b8:	4b16      	ldr	r3, [pc, #88]	@ (8007614 <tcp_input_delayed_close+0x78>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01c      	beq.n	80075fe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8b5b      	ldrh	r3, [r3, #26]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10d      	bne.n	80075ec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <tcp_input_delayed_close+0x50>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6912      	ldr	r2, [r2, #16]
 80075e4:	f06f 010e 	mvn.w	r1, #14
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	480a      	ldr	r0, [pc, #40]	@ (8007618 <tcp_input_delayed_close+0x7c>)
 80075f0:	f7ff fa50 	bl	8006a94 <tcp_pcb_remove>
    tcp_free(pcb);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7fe f83b 	bl	8005670 <tcp_free>
    return 1;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	0800f6f0 	.word	0x0800f6f0
 800760c:	0800f8c0 	.word	0x0800f8c0
 8007610:	0800f73c 	.word	0x0800f73c
 8007614:	2000697d 	.word	0x2000697d
 8007618:	20006944 	.word	0x20006944

0800761c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b08b      	sub	sp, #44	@ 0x2c
 8007620:	af04      	add	r7, sp, #16
 8007622:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007624:	4b6f      	ldr	r3, [pc, #444]	@ (80077e4 <tcp_listen_input+0x1c8>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 80d2 	bne.w	80077d6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <tcp_listen_input+0x2a>
 8007638:	4b6b      	ldr	r3, [pc, #428]	@ (80077e8 <tcp_listen_input+0x1cc>)
 800763a:	f240 2281 	movw	r2, #641	@ 0x281
 800763e:	496b      	ldr	r1, [pc, #428]	@ (80077ec <tcp_listen_input+0x1d0>)
 8007640:	486b      	ldr	r0, [pc, #428]	@ (80077f0 <tcp_listen_input+0x1d4>)
 8007642:	f006 f825 	bl	800d690 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007646:	4b67      	ldr	r3, [pc, #412]	@ (80077e4 <tcp_listen_input+0x1c8>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	d019      	beq.n	8007686 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007652:	4b68      	ldr	r3, [pc, #416]	@ (80077f4 <tcp_listen_input+0x1d8>)
 8007654:	6819      	ldr	r1, [r3, #0]
 8007656:	4b68      	ldr	r3, [pc, #416]	@ (80077f8 <tcp_listen_input+0x1dc>)
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	4b67      	ldr	r3, [pc, #412]	@ (80077fc <tcp_listen_input+0x1e0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007662:	4b67      	ldr	r3, [pc, #412]	@ (8007800 <tcp_listen_input+0x1e4>)
 8007664:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800766a:	4a65      	ldr	r2, [pc, #404]	@ (8007800 <tcp_listen_input+0x1e4>)
 800766c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800766e:	8812      	ldrh	r2, [r2, #0]
 8007670:	b292      	uxth	r2, r2
 8007672:	9202      	str	r2, [sp, #8]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	4b63      	ldr	r3, [pc, #396]	@ (8007804 <tcp_listen_input+0x1e8>)
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	4b63      	ldr	r3, [pc, #396]	@ (8007808 <tcp_listen_input+0x1ec>)
 800767c:	4602      	mov	r2, r0
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f002 ff7a 	bl	800a578 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007684:	e0a9      	b.n	80077da <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007686:	4b57      	ldr	r3, [pc, #348]	@ (80077e4 <tcp_listen_input+0x1c8>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80a3 	beq.w	80077da <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7d5b      	ldrb	r3, [r3, #21]
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff f927 	bl	80068ec <tcp_alloc>
 800769e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d111      	bne.n	80076ca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <tcp_listen_input+0xa8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6910      	ldr	r0, [r2, #16]
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076ba:	2100      	movs	r1, #0
 80076bc:	4798      	blx	r3
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]
      return;
 80076c2:	e08b      	b.n	80077dc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80076c4:	23f0      	movs	r3, #240	@ 0xf0
 80076c6:	73bb      	strb	r3, [r7, #14]
      return;
 80076c8:	e088      	b.n	80077dc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80076ca:	4b50      	ldr	r3, [pc, #320]	@ (800780c <tcp_listen_input+0x1f0>)
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80076d2:	4b4e      	ldr	r3, [pc, #312]	@ (800780c <tcp_listen_input+0x1f0>)
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8ada      	ldrh	r2, [r3, #22]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80076e2:	4b47      	ldr	r3, [pc, #284]	@ (8007800 <tcp_listen_input+0x1e4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2203      	movs	r2, #3
 80076f2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80076f4:	4b41      	ldr	r3, [pc, #260]	@ (80077fc <tcp_listen_input+0x1e0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007706:	6978      	ldr	r0, [r7, #20]
 8007708:	f7ff fa58 	bl	8006bbc <tcp_next_iss>
 800770c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007726:	4b35      	ldr	r3, [pc, #212]	@ (80077fc <tcp_listen_input+0x1e0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7a5b      	ldrb	r3, [r3, #9]
 8007742:	f003 030c 	and.w	r3, r3, #12
 8007746:	b2da      	uxtb	r2, r3
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7a1a      	ldrb	r2, [r3, #8]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007754:	4b2e      	ldr	r3, [pc, #184]	@ (8007810 <tcp_listen_input+0x1f4>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	60da      	str	r2, [r3, #12]
 800775c:	4a2c      	ldr	r2, [pc, #176]	@ (8007810 <tcp_listen_input+0x1f4>)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	f003 f8cb 	bl	800a8fc <tcp_timer_needed>
 8007766:	4b2b      	ldr	r3, [pc, #172]	@ (8007814 <tcp_listen_input+0x1f8>)
 8007768:	2201      	movs	r2, #1
 800776a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800776c:	6978      	ldr	r0, [r7, #20]
 800776e:	f001 fd8b 	bl	8009288 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007772:	4b23      	ldr	r3, [pc, #140]	@ (8007800 <tcp_listen_input+0x1e4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	89db      	ldrh	r3, [r3, #14]
 8007778:	b29a      	uxth	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f004 fc8f 	bl	800c0b8 <ip4_route>
 800779a:	4601      	mov	r1, r0
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3304      	adds	r3, #4
 80077a0:	461a      	mov	r2, r3
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff fa30 	bl	8006c08 <tcp_eff_send_mss_netif>
 80077a8:	4603      	mov	r3, r0
 80077aa:	461a      	mov	r2, r3
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80077b0:	2112      	movs	r1, #18
 80077b2:	6978      	ldr	r0, [r7, #20]
 80077b4:	f002 f83e 	bl	8009834 <tcp_enqueue_flags>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80077bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80077c4:	2100      	movs	r1, #0
 80077c6:	6978      	ldr	r0, [r7, #20]
 80077c8:	f7fe f97c 	bl	8005ac4 <tcp_abandon>
      return;
 80077cc:	e006      	b.n	80077dc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f002 f91e 	bl	8009a10 <tcp_output>
  return;
 80077d4:	e001      	b.n	80077da <tcp_listen_input+0x1be>
    return;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <tcp_listen_input+0x1c0>
  return;
 80077da:	bf00      	nop
}
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd90      	pop	{r4, r7, pc}
 80077e2:	bf00      	nop
 80077e4:	2000697c 	.word	0x2000697c
 80077e8:	0800f6f0 	.word	0x0800f6f0
 80077ec:	0800f8e8 	.word	0x0800f8e8
 80077f0:	0800f73c 	.word	0x0800f73c
 80077f4:	20006974 	.word	0x20006974
 80077f8:	2000697a 	.word	0x2000697a
 80077fc:	20006970 	.word	0x20006970
 8007800:	20006960 	.word	0x20006960
 8007804:	20000218 	.word	0x20000218
 8007808:	2000021c 	.word	0x2000021c
 800780c:	20000208 	.word	0x20000208
 8007810:	20006944 	.word	0x20006944
 8007814:	2000694c 	.word	0x2000694c

08007818 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af04      	add	r7, sp, #16
 800781e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007820:	4b2f      	ldr	r3, [pc, #188]	@ (80078e0 <tcp_timewait_input+0xc8>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d153      	bne.n	80078d4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <tcp_timewait_input+0x28>
 8007832:	4b2c      	ldr	r3, [pc, #176]	@ (80078e4 <tcp_timewait_input+0xcc>)
 8007834:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8007838:	492b      	ldr	r1, [pc, #172]	@ (80078e8 <tcp_timewait_input+0xd0>)
 800783a:	482c      	ldr	r0, [pc, #176]	@ (80078ec <tcp_timewait_input+0xd4>)
 800783c:	f005 ff28 	bl	800d690 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007840:	4b27      	ldr	r3, [pc, #156]	@ (80078e0 <tcp_timewait_input+0xc8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02a      	beq.n	80078a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800784c:	4b28      	ldr	r3, [pc, #160]	@ (80078f0 <tcp_timewait_input+0xd8>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	db2d      	blt.n	80078b6 <tcp_timewait_input+0x9e>
 800785a:	4b25      	ldr	r3, [pc, #148]	@ (80078f0 <tcp_timewait_input+0xd8>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007866:	440b      	add	r3, r1
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	dc23      	bgt.n	80078b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800786e:	4b21      	ldr	r3, [pc, #132]	@ (80078f4 <tcp_timewait_input+0xdc>)
 8007870:	6819      	ldr	r1, [r3, #0]
 8007872:	4b21      	ldr	r3, [pc, #132]	@ (80078f8 <tcp_timewait_input+0xe0>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	4b1d      	ldr	r3, [pc, #116]	@ (80078f0 <tcp_timewait_input+0xd8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800787e:	4b1f      	ldr	r3, [pc, #124]	@ (80078fc <tcp_timewait_input+0xe4>)
 8007880:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007882:	885b      	ldrh	r3, [r3, #2]
 8007884:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007886:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <tcp_timewait_input+0xe4>)
 8007888:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800788a:	8812      	ldrh	r2, [r2, #0]
 800788c:	b292      	uxth	r2, r2
 800788e:	9202      	str	r2, [sp, #8]
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	4b1b      	ldr	r3, [pc, #108]	@ (8007900 <tcp_timewait_input+0xe8>)
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4b1b      	ldr	r3, [pc, #108]	@ (8007904 <tcp_timewait_input+0xec>)
 8007898:	4602      	mov	r2, r0
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f002 fe6c 	bl	800a578 <tcp_rst>
      return;
 80078a0:	e01b      	b.n	80078da <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80078a2:	4b0f      	ldr	r3, [pc, #60]	@ (80078e0 <tcp_timewait_input+0xc8>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80078ae:	4b16      	ldr	r3, [pc, #88]	@ (8007908 <tcp_timewait_input+0xf0>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80078b6:	4b10      	ldr	r3, [pc, #64]	@ (80078f8 <tcp_timewait_input+0xe0>)
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00c      	beq.n	80078d8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8b5b      	ldrh	r3, [r3, #26]
 80078c2:	f043 0302 	orr.w	r3, r3, #2
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f002 f89f 	bl	8009a10 <tcp_output>
  }
  return;
 80078d2:	e001      	b.n	80078d8 <tcp_timewait_input+0xc0>
    return;
 80078d4:	bf00      	nop
 80078d6:	e000      	b.n	80078da <tcp_timewait_input+0xc2>
  return;
 80078d8:	bf00      	nop
}
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	2000697c 	.word	0x2000697c
 80078e4:	0800f6f0 	.word	0x0800f6f0
 80078e8:	0800f908 	.word	0x0800f908
 80078ec:	0800f73c 	.word	0x0800f73c
 80078f0:	20006970 	.word	0x20006970
 80078f4:	20006974 	.word	0x20006974
 80078f8:	2000697a 	.word	0x2000697a
 80078fc:	20006960 	.word	0x20006960
 8007900:	20000218 	.word	0x20000218
 8007904:	2000021c 	.word	0x2000021c
 8007908:	20006938 	.word	0x20006938

0800790c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b08d      	sub	sp, #52	@ 0x34
 8007910:	af04      	add	r7, sp, #16
 8007912:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <tcp_process+0x24>
 8007922:	4b9d      	ldr	r3, [pc, #628]	@ (8007b98 <tcp_process+0x28c>)
 8007924:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007928:	499c      	ldr	r1, [pc, #624]	@ (8007b9c <tcp_process+0x290>)
 800792a:	489d      	ldr	r0, [pc, #628]	@ (8007ba0 <tcp_process+0x294>)
 800792c:	f005 feb0 	bl	800d690 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007930:	4b9c      	ldr	r3, [pc, #624]	@ (8007ba4 <tcp_process+0x298>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d04e      	beq.n	80079da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7d1b      	ldrb	r3, [r3, #20]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d108      	bne.n	8007956 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007948:	4b97      	ldr	r3, [pc, #604]	@ (8007ba8 <tcp_process+0x29c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d123      	bne.n	8007998 <tcp_process+0x8c>
        acceptable = 1;
 8007950:	2301      	movs	r3, #1
 8007952:	76fb      	strb	r3, [r7, #27]
 8007954:	e020      	b.n	8007998 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800795a:	4b94      	ldr	r3, [pc, #592]	@ (8007bac <tcp_process+0x2a0>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d102      	bne.n	8007968 <tcp_process+0x5c>
        acceptable = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	76fb      	strb	r3, [r7, #27]
 8007966:	e017      	b.n	8007998 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007968:	4b90      	ldr	r3, [pc, #576]	@ (8007bac <tcp_process+0x2a0>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	db10      	blt.n	8007998 <tcp_process+0x8c>
 8007976:	4b8d      	ldr	r3, [pc, #564]	@ (8007bac <tcp_process+0x2a0>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007982:	440b      	add	r3, r1
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	dc06      	bgt.n	8007998 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8b5b      	ldrh	r3, [r3, #26]
 800798e:	f043 0302 	orr.w	r3, r3, #2
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007998:	7efb      	ldrb	r3, [r7, #27]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01b      	beq.n	80079d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7d1b      	ldrb	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <tcp_process+0xa8>
 80079a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007b98 <tcp_process+0x28c>)
 80079a8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80079ac:	4980      	ldr	r1, [pc, #512]	@ (8007bb0 <tcp_process+0x2a4>)
 80079ae:	487c      	ldr	r0, [pc, #496]	@ (8007ba0 <tcp_process+0x294>)
 80079b0:	f005 fe6e 	bl	800d690 <iprintf>
      recv_flags |= TF_RESET;
 80079b4:	4b7f      	ldr	r3, [pc, #508]	@ (8007bb4 <tcp_process+0x2a8>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	f043 0308 	orr.w	r3, r3, #8
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4b7d      	ldr	r3, [pc, #500]	@ (8007bb4 <tcp_process+0x2a8>)
 80079c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8b5b      	ldrh	r3, [r3, #26]
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80079d0:	f06f 030d 	mvn.w	r3, #13
 80079d4:	e37a      	b.n	80080cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e378      	b.n	80080cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80079da:	4b72      	ldr	r3, [pc, #456]	@ (8007ba4 <tcp_process+0x298>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <tcp_process+0xfc>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7d1b      	ldrb	r3, [r3, #20]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d00c      	beq.n	8007a08 <tcp_process+0xfc>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7d1b      	ldrb	r3, [r3, #20]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d008      	beq.n	8007a08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	8b5b      	ldrh	r3, [r3, #26]
 80079fa:	f043 0302 	orr.w	r3, r3, #2
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e361      	b.n	80080cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8b5b      	ldrh	r3, [r3, #26]
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007a14:	4b68      	ldr	r3, [pc, #416]	@ (8007bb8 <tcp_process+0x2ac>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fc2b 	bl	8009288 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7d1b      	ldrb	r3, [r3, #20]
 8007a36:	3b02      	subs	r3, #2
 8007a38:	2b07      	cmp	r3, #7
 8007a3a:	f200 8337 	bhi.w	80080ac <tcp_process+0x7a0>
 8007a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <tcp_process+0x138>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a65 	.word	0x08007a65
 8007a48:	08007c95 	.word	0x08007c95
 8007a4c:	08007e0d 	.word	0x08007e0d
 8007a50:	08007e37 	.word	0x08007e37
 8007a54:	08007f5b 	.word	0x08007f5b
 8007a58:	08007e0d 	.word	0x08007e0d
 8007a5c:	08007fe7 	.word	0x08007fe7
 8007a60:	08008077 	.word	0x08008077
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007a64:	4b4f      	ldr	r3, [pc, #316]	@ (8007ba4 <tcp_process+0x298>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80e4 	beq.w	8007c3a <tcp_process+0x32e>
 8007a72:	4b4c      	ldr	r3, [pc, #304]	@ (8007ba4 <tcp_process+0x298>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80dd 	beq.w	8007c3a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	4b48      	ldr	r3, [pc, #288]	@ (8007ba8 <tcp_process+0x29c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	f040 80d5 	bne.w	8007c3a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007a90:	4b46      	ldr	r3, [pc, #280]	@ (8007bac <tcp_process+0x2a0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8007aa2:	4b41      	ldr	r3, [pc, #260]	@ (8007ba8 <tcp_process+0x29c>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007aaa:	4b44      	ldr	r3, [pc, #272]	@ (8007bbc <tcp_process+0x2b0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	89db      	ldrh	r3, [r3, #14]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007ac4:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <tcp_process+0x2a0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	1e5a      	subs	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4618      	mov	r0, r3
 8007ade:	f004 faeb 	bl	800c0b8 <ip4_route>
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff f88c 	bl	8006c08 <tcp_eff_send_mss_netif>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007afc:	009a      	lsls	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf38      	it	cc
 8007b0c:	460b      	movcc	r3, r1
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d204      	bcs.n	8007b1c <tcp_process+0x210>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	e00d      	b.n	8007b38 <tcp_process+0x22c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d904      	bls.n	8007b34 <tcp_process+0x228>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	e001      	b.n	8007b38 <tcp_process+0x22c>
 8007b34:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <tcp_process+0x24a>
 8007b48:	4b13      	ldr	r3, [pc, #76]	@ (8007b98 <tcp_process+0x28c>)
 8007b4a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8007b4e:	491c      	ldr	r1, [pc, #112]	@ (8007bc0 <tcp_process+0x2b4>)
 8007b50:	4813      	ldr	r0, [pc, #76]	@ (8007ba0 <tcp_process+0x294>)
 8007b52:	f005 fd9d 	bl	800d690 <iprintf>
        --pcb->snd_queuelen;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d12a      	bne.n	8007bc8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b76:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <tcp_process+0x280>
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <tcp_process+0x28c>)
 8007b80:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8007b84:	490f      	ldr	r1, [pc, #60]	@ (8007bc4 <tcp_process+0x2b8>)
 8007b86:	4806      	ldr	r0, [pc, #24]	@ (8007ba0 <tcp_process+0x294>)
 8007b88:	f005 fd82 	bl	800d690 <iprintf>
          pcb->unsent = rseg->next;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007b94:	e01c      	b.n	8007bd0 <tcp_process+0x2c4>
 8007b96:	bf00      	nop
 8007b98:	0800f6f0 	.word	0x0800f6f0
 8007b9c:	0800f928 	.word	0x0800f928
 8007ba0:	0800f73c 	.word	0x0800f73c
 8007ba4:	2000697c 	.word	0x2000697c
 8007ba8:	20006974 	.word	0x20006974
 8007bac:	20006970 	.word	0x20006970
 8007bb0:	0800f944 	.word	0x0800f944
 8007bb4:	2000697d 	.word	0x2000697d
 8007bb8:	20006938 	.word	0x20006938
 8007bbc:	20006960 	.word	0x20006960
 8007bc0:	0800f964 	.word	0x0800f964
 8007bc4:	0800f97c 	.word	0x0800f97c
        } else {
          pcb->unacked = rseg->next;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8007bd0:	69f8      	ldr	r0, [r7, #28]
 8007bd2:	f7fe fd22 	bl	800661a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007be4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007be6:	e006      	b.n	8007bf6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <tcp_process+0x30a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6910      	ldr	r0, [r2, #16]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4798      	blx	r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	76bb      	strb	r3, [r7, #26]
 8007c14:	e001      	b.n	8007c1a <tcp_process+0x30e>
 8007c16:	2300      	movs	r3, #0
 8007c18:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007c1a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007c1e:	f113 0f0d 	cmn.w	r3, #13
 8007c22:	d102      	bne.n	8007c2a <tcp_process+0x31e>
          return ERR_ABRT;
 8007c24:	f06f 030c 	mvn.w	r3, #12
 8007c28:	e250      	b.n	80080cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	8b5b      	ldrh	r3, [r3, #26]
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007c38:	e23a      	b.n	80080b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007c3a:	4b98      	ldr	r3, [pc, #608]	@ (8007e9c <tcp_process+0x590>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8234 	beq.w	80080b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c48:	4b95      	ldr	r3, [pc, #596]	@ (8007ea0 <tcp_process+0x594>)
 8007c4a:	6819      	ldr	r1, [r3, #0]
 8007c4c:	4b95      	ldr	r3, [pc, #596]	@ (8007ea4 <tcp_process+0x598>)
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	4b95      	ldr	r3, [pc, #596]	@ (8007ea8 <tcp_process+0x59c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c58:	4b94      	ldr	r3, [pc, #592]	@ (8007eac <tcp_process+0x5a0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c5c:	885b      	ldrh	r3, [r3, #2]
 8007c5e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c60:	4a92      	ldr	r2, [pc, #584]	@ (8007eac <tcp_process+0x5a0>)
 8007c62:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c64:	8812      	ldrh	r2, [r2, #0]
 8007c66:	b292      	uxth	r2, r2
 8007c68:	9202      	str	r2, [sp, #8]
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	4b90      	ldr	r3, [pc, #576]	@ (8007eb0 <tcp_process+0x5a4>)
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4b90      	ldr	r3, [pc, #576]	@ (8007eb4 <tcp_process+0x5a8>)
 8007c72:	4602      	mov	r2, r0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f002 fc7f 	bl	800a578 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c80:	2b05      	cmp	r3, #5
 8007c82:	f200 8215 	bhi.w	80080b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f002 fa4b 	bl	800a128 <tcp_rexmit_rto>
      break;
 8007c92:	e20d      	b.n	80080b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007c94:	4b81      	ldr	r3, [pc, #516]	@ (8007e9c <tcp_process+0x590>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80a1 	beq.w	8007de4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ea0 <tcp_process+0x594>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	db7e      	blt.n	8007db0 <tcp_process+0x4a4>
 8007cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea0 <tcp_process+0x594>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dc77      	bgt.n	8007db0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d102      	bne.n	8007cd4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007cce:	23fa      	movs	r3, #250	@ 0xfa
 8007cd0:	76bb      	strb	r3, [r7, #26]
 8007cd2:	e01d      	b.n	8007d10 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <tcp_process+0x3e0>
 8007cde:	4b76      	ldr	r3, [pc, #472]	@ (8007eb8 <tcp_process+0x5ac>)
 8007ce0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8007ce4:	4975      	ldr	r1, [pc, #468]	@ (8007ebc <tcp_process+0x5b0>)
 8007ce6:	4876      	ldr	r0, [pc, #472]	@ (8007ec0 <tcp_process+0x5b4>)
 8007ce8:	f005 fcd2 	bl	800d690 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <tcp_process+0x400>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6910      	ldr	r0, [r2, #16]
 8007d00:	2200      	movs	r2, #0
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4798      	blx	r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	76bb      	strb	r3, [r7, #26]
 8007d0a:	e001      	b.n	8007d10 <tcp_process+0x404>
 8007d0c:	23f0      	movs	r3, #240	@ 0xf0
 8007d0e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007d10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007d18:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007d1c:	f113 0f0d 	cmn.w	r3, #13
 8007d20:	d002      	beq.n	8007d28 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fd ff8c 	bl	8005c40 <tcp_abort>
            }
            return ERR_ABRT;
 8007d28:	f06f 030c 	mvn.w	r3, #12
 8007d2c:	e1ce      	b.n	80080cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fae0 	bl	80082f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007d34:	4b63      	ldr	r3, [pc, #396]	@ (8007ec4 <tcp_process+0x5b8>)
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <tcp_process+0x43c>
            recv_acked--;
 8007d3c:	4b61      	ldr	r3, [pc, #388]	@ (8007ec4 <tcp_process+0x5b8>)
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	4b5f      	ldr	r3, [pc, #380]	@ (8007ec4 <tcp_process+0x5b8>)
 8007d46:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d4c:	009a      	lsls	r2, r3, #2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf38      	it	cc
 8007d5c:	460b      	movcc	r3, r1
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d204      	bcs.n	8007d6c <tcp_process+0x460>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	e00d      	b.n	8007d88 <tcp_process+0x47c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d904      	bls.n	8007d84 <tcp_process+0x478>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	e001      	b.n	8007d88 <tcp_process+0x47c>
 8007d84:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8007ec8 <tcp_process+0x5bc>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d037      	beq.n	8007e0a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	8b5b      	ldrh	r3, [r3, #26]
 8007d9e:	f043 0302 	orr.w	r3, r3, #2
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2207      	movs	r2, #7
 8007dac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007dae:	e02c      	b.n	8007e0a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007db0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ea0 <tcp_process+0x594>)
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ea4 <tcp_process+0x598>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b3b      	ldr	r3, [pc, #236]	@ (8007ea8 <tcp_process+0x59c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8007eac <tcp_process+0x5a0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dc8:	4a38      	ldr	r2, [pc, #224]	@ (8007eac <tcp_process+0x5a0>)
 8007dca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dcc:	8812      	ldrh	r2, [r2, #0]
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	9202      	str	r2, [sp, #8]
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	4b36      	ldr	r3, [pc, #216]	@ (8007eb0 <tcp_process+0x5a4>)
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4b36      	ldr	r3, [pc, #216]	@ (8007eb4 <tcp_process+0x5a8>)
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f002 fbcb 	bl	800a578 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007de2:	e167      	b.n	80080b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007de4:	4b2d      	ldr	r3, [pc, #180]	@ (8007e9c <tcp_process+0x590>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8161 	beq.w	80080b4 <tcp_process+0x7a8>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	4b2b      	ldr	r3, [pc, #172]	@ (8007ea8 <tcp_process+0x59c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	f040 8159 	bne.w	80080b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f002 f9b2 	bl	800a16c <tcp_rexmit>
      break;
 8007e08:	e154      	b.n	80080b4 <tcp_process+0x7a8>
 8007e0a:	e153      	b.n	80080b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa71 	bl	80082f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007e12:	4b2d      	ldr	r3, [pc, #180]	@ (8007ec8 <tcp_process+0x5bc>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 814c 	beq.w	80080b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8b5b      	ldrh	r3, [r3, #26]
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2207      	movs	r2, #7
 8007e32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007e34:	e140      	b.n	80080b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa5c 	bl	80082f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007e3c:	4b22      	ldr	r3, [pc, #136]	@ (8007ec8 <tcp_process+0x5bc>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d071      	beq.n	8007f2c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e48:	4b14      	ldr	r3, [pc, #80]	@ (8007e9c <tcp_process+0x590>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d060      	beq.n	8007f16 <tcp_process+0x60a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e58:	4b11      	ldr	r3, [pc, #68]	@ (8007ea0 <tcp_process+0x594>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d15a      	bne.n	8007f16 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d156      	bne.n	8007f16 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8b5b      	ldrh	r3, [r3, #26]
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fe fdbc 	bl	80069f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007e7c:	4b13      	ldr	r3, [pc, #76]	@ (8007ecc <tcp_process+0x5c0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d105      	bne.n	8007e92 <tcp_process+0x586>
 8007e86:	4b11      	ldr	r3, [pc, #68]	@ (8007ecc <tcp_process+0x5c0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ecc <tcp_process+0x5c0>)
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	e02e      	b.n	8007ef0 <tcp_process+0x5e4>
 8007e92:	4b0e      	ldr	r3, [pc, #56]	@ (8007ecc <tcp_process+0x5c0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e027      	b.n	8007eea <tcp_process+0x5de>
 8007e9a:	bf00      	nop
 8007e9c:	2000697c 	.word	0x2000697c
 8007ea0:	20006974 	.word	0x20006974
 8007ea4:	2000697a 	.word	0x2000697a
 8007ea8:	20006970 	.word	0x20006970
 8007eac:	20006960 	.word	0x20006960
 8007eb0:	20000218 	.word	0x20000218
 8007eb4:	2000021c 	.word	0x2000021c
 8007eb8:	0800f6f0 	.word	0x0800f6f0
 8007ebc:	0800f990 	.word	0x0800f990
 8007ec0:	0800f73c 	.word	0x0800f73c
 8007ec4:	20006978 	.word	0x20006978
 8007ec8:	2000697d 	.word	0x2000697d
 8007ecc:	20006944 	.word	0x20006944
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d104      	bne.n	8007ee4 <tcp_process+0x5d8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	e005      	b.n	8007ef0 <tcp_process+0x5e4>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1ef      	bne.n	8007ed0 <tcp_process+0x5c4>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	60da      	str	r2, [r3, #12]
 8007ef6:	4b77      	ldr	r3, [pc, #476]	@ (80080d4 <tcp_process+0x7c8>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220a      	movs	r2, #10
 8007f00:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007f02:	4b75      	ldr	r3, [pc, #468]	@ (80080d8 <tcp_process+0x7cc>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	4a73      	ldr	r2, [pc, #460]	@ (80080d8 <tcp_process+0x7cc>)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	f002 fcf4 	bl	800a8fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007f14:	e0d2      	b.n	80080bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	8b5b      	ldrh	r3, [r3, #26]
 8007f1a:	f043 0302 	orr.w	r3, r3, #2
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2208      	movs	r2, #8
 8007f28:	751a      	strb	r2, [r3, #20]
      break;
 8007f2a:	e0c7      	b.n	80080bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80080dc <tcp_process+0x7d0>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80c1 	beq.w	80080bc <tcp_process+0x7b0>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f3e:	4b68      	ldr	r3, [pc, #416]	@ (80080e0 <tcp_process+0x7d4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	f040 80ba 	bne.w	80080bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f040 80b5 	bne.w	80080bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2206      	movs	r2, #6
 8007f56:	751a      	strb	r2, [r3, #20]
      break;
 8007f58:	e0b0      	b.n	80080bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f9ca 	bl	80082f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007f60:	4b60      	ldr	r3, [pc, #384]	@ (80080e4 <tcp_process+0x7d8>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a9 	beq.w	80080c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8b5b      	ldrh	r3, [r3, #26]
 8007f72:	f043 0302 	orr.w	r3, r3, #2
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fe fd39 	bl	80069f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007f82:	4b59      	ldr	r3, [pc, #356]	@ (80080e8 <tcp_process+0x7dc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d105      	bne.n	8007f98 <tcp_process+0x68c>
 8007f8c:	4b56      	ldr	r3, [pc, #344]	@ (80080e8 <tcp_process+0x7dc>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4a55      	ldr	r2, [pc, #340]	@ (80080e8 <tcp_process+0x7dc>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e013      	b.n	8007fc0 <tcp_process+0x6b4>
 8007f98:	4b53      	ldr	r3, [pc, #332]	@ (80080e8 <tcp_process+0x7dc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	e00c      	b.n	8007fba <tcp_process+0x6ae>
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d104      	bne.n	8007fb4 <tcp_process+0x6a8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	60da      	str	r2, [r3, #12]
 8007fb2:	e005      	b.n	8007fc0 <tcp_process+0x6b4>
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	613b      	str	r3, [r7, #16]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1ef      	bne.n	8007fa0 <tcp_process+0x694>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	4b43      	ldr	r3, [pc, #268]	@ (80080d4 <tcp_process+0x7c8>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	220a      	movs	r2, #10
 8007fd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007fd2:	4b41      	ldr	r3, [pc, #260]	@ (80080d8 <tcp_process+0x7cc>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	4a3f      	ldr	r2, [pc, #252]	@ (80080d8 <tcp_process+0x7cc>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	f002 fc8c 	bl	800a8fc <tcp_timer_needed>
      }
      break;
 8007fe4:	e06c      	b.n	80080c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f984 	bl	80082f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007fec:	4b3b      	ldr	r3, [pc, #236]	@ (80080dc <tcp_process+0x7d0>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d065      	beq.n	80080c4 <tcp_process+0x7b8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ffc:	4b38      	ldr	r3, [pc, #224]	@ (80080e0 <tcp_process+0x7d4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d15f      	bne.n	80080c4 <tcp_process+0x7b8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d15b      	bne.n	80080c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fe fcf1 	bl	80069f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008012:	4b35      	ldr	r3, [pc, #212]	@ (80080e8 <tcp_process+0x7dc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d105      	bne.n	8008028 <tcp_process+0x71c>
 800801c:	4b32      	ldr	r3, [pc, #200]	@ (80080e8 <tcp_process+0x7dc>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	4a31      	ldr	r2, [pc, #196]	@ (80080e8 <tcp_process+0x7dc>)
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e013      	b.n	8008050 <tcp_process+0x744>
 8008028:	4b2f      	ldr	r3, [pc, #188]	@ (80080e8 <tcp_process+0x7dc>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	e00c      	b.n	800804a <tcp_process+0x73e>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d104      	bne.n	8008044 <tcp_process+0x738>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	60da      	str	r2, [r3, #12]
 8008042:	e005      	b.n	8008050 <tcp_process+0x744>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1ef      	bne.n	8008030 <tcp_process+0x724>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	60da      	str	r2, [r3, #12]
 8008056:	4b1f      	ldr	r3, [pc, #124]	@ (80080d4 <tcp_process+0x7c8>)
 8008058:	2201      	movs	r2, #1
 800805a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	220a      	movs	r2, #10
 8008060:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008062:	4b1d      	ldr	r3, [pc, #116]	@ (80080d8 <tcp_process+0x7cc>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <tcp_process+0x7cc>)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	f002 fc44 	bl	800a8fc <tcp_timer_needed>
      }
      break;
 8008074:	e026      	b.n	80080c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f93c 	bl	80082f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800807c:	4b17      	ldr	r3, [pc, #92]	@ (80080dc <tcp_process+0x7d0>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01f      	beq.n	80080c8 <tcp_process+0x7bc>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800808c:	4b14      	ldr	r3, [pc, #80]	@ (80080e0 <tcp_process+0x7d4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d119      	bne.n	80080c8 <tcp_process+0x7bc>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d115      	bne.n	80080c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800809c:	4b11      	ldr	r3, [pc, #68]	@ (80080e4 <tcp_process+0x7d8>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	f043 0310 	orr.w	r3, r3, #16
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <tcp_process+0x7d8>)
 80080a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80080aa:	e00d      	b.n	80080c8 <tcp_process+0x7bc>
    default:
      break;
 80080ac:	bf00      	nop
 80080ae:	e00c      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080b0:	bf00      	nop
 80080b2:	e00a      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080b4:	bf00      	nop
 80080b6:	e008      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080b8:	bf00      	nop
 80080ba:	e006      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080bc:	bf00      	nop
 80080be:	e004      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080c0:	bf00      	nop
 80080c2:	e002      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080c4:	bf00      	nop
 80080c6:	e000      	b.n	80080ca <tcp_process+0x7be>
      break;
 80080c8:	bf00      	nop
  }
  return ERR_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3724      	adds	r7, #36	@ 0x24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	2000694c 	.word	0x2000694c
 80080d8:	20006948 	.word	0x20006948
 80080dc:	2000697c 	.word	0x2000697c
 80080e0:	20006974 	.word	0x20006974
 80080e4:	2000697d 	.word	0x2000697d
 80080e8:	20006944 	.word	0x20006944

080080ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <tcp_oos_insert_segment+0x1e>
 80080fc:	4b3b      	ldr	r3, [pc, #236]	@ (80081ec <tcp_oos_insert_segment+0x100>)
 80080fe:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008102:	493b      	ldr	r1, [pc, #236]	@ (80081f0 <tcp_oos_insert_segment+0x104>)
 8008104:	483b      	ldr	r0, [pc, #236]	@ (80081f4 <tcp_oos_insert_segment+0x108>)
 8008106:	f005 fac3 	bl	800d690 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	899b      	ldrh	r3, [r3, #12]
 8008110:	b29b      	uxth	r3, r3
 8008112:	4618      	mov	r0, r3
 8008114:	f7fb fcae 	bl	8003a74 <lwip_htons>
 8008118:	4603      	mov	r3, r0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d028      	beq.n	8008176 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008124:	6838      	ldr	r0, [r7, #0]
 8008126:	f7fe fa63 	bl	80065f0 <tcp_segs_free>
    next = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	e056      	b.n	80081de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	899b      	ldrh	r3, [r3, #12]
 8008136:	b29b      	uxth	r3, r3
 8008138:	4618      	mov	r0, r3
 800813a:	f7fb fc9b 	bl	8003a74 <lwip_htons>
 800813e:	4603      	mov	r3, r0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00d      	beq.n	8008166 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	899b      	ldrh	r3, [r3, #12]
 8008150:	b29c      	uxth	r4, r3
 8008152:	2001      	movs	r0, #1
 8008154:	f7fb fc8e 	bl	8003a74 <lwip_htons>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	4322      	orrs	r2, r4
 8008162:	b292      	uxth	r2, r2
 8008164:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f7fe fa52 	bl	800661a <tcp_seg_free>
    while (next &&
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	891b      	ldrh	r3, [r3, #8]
 8008180:	461a      	mov	r2, r3
 8008182:	4b1d      	ldr	r3, [pc, #116]	@ (80081f8 <tcp_oos_insert_segment+0x10c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	441a      	add	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	8909      	ldrh	r1, [r1, #8]
 8008192:	440b      	add	r3, r1
 8008194:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008196:	2b00      	cmp	r3, #0
 8008198:	daca      	bge.n	8008130 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01e      	beq.n	80081de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	891b      	ldrh	r3, [r3, #8]
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b14      	ldr	r3, [pc, #80]	@ (80081f8 <tcp_oos_insert_segment+0x10c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	441a      	add	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd12      	ble.n	80081de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <tcp_oos_insert_segment+0x10c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	891b      	ldrh	r3, [r3, #8]
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f7fc fe23 	bl	8004e24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}
 80081ec:	0800f6f0 	.word	0x0800f6f0
 80081f0:	0800f9b0 	.word	0x0800f9b0
 80081f4:	0800f73c 	.word	0x0800f73c
 80081f8:	20006970 	.word	0x20006970

080081fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80081fc:	b5b0      	push	{r4, r5, r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800820a:	e03e      	b.n	800828a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	4618      	mov	r0, r3
 800821c:	f7fd f810 	bl	8005240 <pbuf_clen>
 8008220:	4603      	mov	r3, r0
 8008222:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800822a:	8a7a      	ldrh	r2, [r7, #18]
 800822c:	429a      	cmp	r2, r3
 800822e:	d906      	bls.n	800823e <tcp_free_acked_segments+0x42>
 8008230:	4b2a      	ldr	r3, [pc, #168]	@ (80082dc <tcp_free_acked_segments+0xe0>)
 8008232:	f240 4257 	movw	r2, #1111	@ 0x457
 8008236:	492a      	ldr	r1, [pc, #168]	@ (80082e0 <tcp_free_acked_segments+0xe4>)
 8008238:	482a      	ldr	r0, [pc, #168]	@ (80082e4 <tcp_free_acked_segments+0xe8>)
 800823a:	f005 fa29 	bl	800d690 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008244:	8a7b      	ldrh	r3, [r7, #18]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	891a      	ldrh	r2, [r3, #8]
 8008254:	4b24      	ldr	r3, [pc, #144]	@ (80082e8 <tcp_free_acked_segments+0xec>)
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	4413      	add	r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	4b22      	ldr	r3, [pc, #136]	@ (80082e8 <tcp_free_acked_segments+0xec>)
 800825e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008260:	6978      	ldr	r0, [r7, #20]
 8008262:	f7fe f9da 	bl	800661a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00c      	beq.n	800828a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <tcp_free_acked_segments+0x8e>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <tcp_free_acked_segments+0x8e>
 800827c:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <tcp_free_acked_segments+0xe0>)
 800827e:	f240 4261 	movw	r2, #1121	@ 0x461
 8008282:	491a      	ldr	r1, [pc, #104]	@ (80082ec <tcp_free_acked_segments+0xf0>)
 8008284:	4817      	ldr	r0, [pc, #92]	@ (80082e4 <tcp_free_acked_segments+0xe8>)
 8008286:	f005 fa03 	bl	800d690 <iprintf>
  while (seg_list != NULL &&
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d020      	beq.n	80082d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4618      	mov	r0, r3
 8008298:	f7fb fc01 	bl	8003a9e <lwip_htonl>
 800829c:	4604      	mov	r4, r0
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	891b      	ldrh	r3, [r3, #8]
 80082a2:	461d      	mov	r5, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	899b      	ldrh	r3, [r3, #12]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fb fbe1 	bl	8003a74 <lwip_htons>
 80082b2:	4603      	mov	r3, r0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <tcp_free_acked_segments+0xc6>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <tcp_free_acked_segments+0xc8>
 80082c2:	2300      	movs	r3, #0
 80082c4:	442b      	add	r3, r5
 80082c6:	18e2      	adds	r2, r4, r3
 80082c8:	4b09      	ldr	r3, [pc, #36]	@ (80082f0 <tcp_free_acked_segments+0xf4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dd9c      	ble.n	800820c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80082d2:	68bb      	ldr	r3, [r7, #8]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bdb0      	pop	{r4, r5, r7, pc}
 80082dc:	0800f6f0 	.word	0x0800f6f0
 80082e0:	0800f9d8 	.word	0x0800f9d8
 80082e4:	0800f73c 	.word	0x0800f73c
 80082e8:	20006978 	.word	0x20006978
 80082ec:	0800fa00 	.word	0x0800fa00
 80082f0:	20006974 	.word	0x20006974

080082f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80082f4:	b5b0      	push	{r4, r5, r7, lr}
 80082f6:	b094      	sub	sp, #80	@ 0x50
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <tcp_receive+0x20>
 8008306:	4b91      	ldr	r3, [pc, #580]	@ (800854c <tcp_receive+0x258>)
 8008308:	f240 427b 	movw	r2, #1147	@ 0x47b
 800830c:	4990      	ldr	r1, [pc, #576]	@ (8008550 <tcp_receive+0x25c>)
 800830e:	4891      	ldr	r0, [pc, #580]	@ (8008554 <tcp_receive+0x260>)
 8008310:	f005 f9be 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7d1b      	ldrb	r3, [r3, #20]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d806      	bhi.n	800832a <tcp_receive+0x36>
 800831c:	4b8b      	ldr	r3, [pc, #556]	@ (800854c <tcp_receive+0x258>)
 800831e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8008322:	498d      	ldr	r1, [pc, #564]	@ (8008558 <tcp_receive+0x264>)
 8008324:	488b      	ldr	r0, [pc, #556]	@ (8008554 <tcp_receive+0x260>)
 8008326:	f005 f9b3 	bl	800d690 <iprintf>

  if (flags & TCP_ACK) {
 800832a:	4b8c      	ldr	r3, [pc, #560]	@ (800855c <tcp_receive+0x268>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8264 	beq.w	8008800 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008344:	4413      	add	r3, r2
 8008346:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800834c:	4b84      	ldr	r3, [pc, #528]	@ (8008560 <tcp_receive+0x26c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	db1b      	blt.n	800838e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800835a:	4b81      	ldr	r3, [pc, #516]	@ (8008560 <tcp_receive+0x26c>)
 800835c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800835e:	429a      	cmp	r2, r3
 8008360:	d106      	bne.n	8008370 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008366:	4b7f      	ldr	r3, [pc, #508]	@ (8008564 <tcp_receive+0x270>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	db0e      	blt.n	800838e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008374:	4b7b      	ldr	r3, [pc, #492]	@ (8008564 <tcp_receive+0x270>)
 8008376:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008378:	429a      	cmp	r2, r3
 800837a:	d125      	bne.n	80083c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800837c:	4b7a      	ldr	r3, [pc, #488]	@ (8008568 <tcp_receive+0x274>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	89db      	ldrh	r3, [r3, #14]
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800838a:	429a      	cmp	r2, r3
 800838c:	d91c      	bls.n	80083c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800838e:	4b76      	ldr	r3, [pc, #472]	@ (8008568 <tcp_receive+0x274>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	89db      	ldrh	r3, [r3, #14]
 8008394:	b29a      	uxth	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d205      	bcs.n	80083b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80083b8:	4b69      	ldr	r3, [pc, #420]	@ (8008560 <tcp_receive+0x26c>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80083c0:	4b68      	ldr	r3, [pc, #416]	@ (8008564 <tcp_receive+0x270>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80083c8:	4b66      	ldr	r3, [pc, #408]	@ (8008564 <tcp_receive+0x270>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dc58      	bgt.n	8008488 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80083d6:	4b65      	ldr	r3, [pc, #404]	@ (800856c <tcp_receive+0x278>)
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d14b      	bne.n	8008476 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80083e8:	4413      	add	r3, r2
 80083ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d142      	bne.n	8008476 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	db3d      	blt.n	8008476 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083fe:	4b59      	ldr	r3, [pc, #356]	@ (8008564 <tcp_receive+0x270>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d137      	bne.n	8008476 <tcp_receive+0x182>
              found_dupack = 1;
 8008406:	2301      	movs	r3, #1
 8008408:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008410:	2bff      	cmp	r3, #255	@ 0xff
 8008412:	d007      	beq.n	8008424 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800841a:	3301      	adds	r3, #1
 800841c:	b2da      	uxtb	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800842a:	2b03      	cmp	r3, #3
 800842c:	d91b      	bls.n	8008466 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008438:	4413      	add	r3, r2
 800843a:	b29a      	uxth	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008442:	429a      	cmp	r2, r3
 8008444:	d30a      	bcc.n	800845c <tcp_receive+0x168>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008450:	4413      	add	r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800845a:	e004      	b.n	8008466 <tcp_receive+0x172>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008462:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800846c:	2b02      	cmp	r3, #2
 800846e:	d902      	bls.n	8008476 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fee7 	bl	800a244 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008478:	2b00      	cmp	r3, #0
 800847a:	f040 8161 	bne.w	8008740 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008486:	e15b      	b.n	8008740 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008488:	4b36      	ldr	r3, [pc, #216]	@ (8008564 <tcp_receive+0x270>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	f2c0 814e 	blt.w	8008736 <tcp_receive+0x442>
 800849a:	4b32      	ldr	r3, [pc, #200]	@ (8008564 <tcp_receive+0x270>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f300 8146 	bgt.w	8008736 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8b5b      	ldrh	r3, [r3, #26]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d010      	beq.n	80084d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8b5b      	ldrh	r3, [r3, #26]
 80084ba:	f023 0304 	bic.w	r3, r3, #4
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80084e6:	10db      	asrs	r3, r3, #3
 80084e8:	b21b      	sxth	r3, r3
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	4413      	add	r3, r2
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	b21a      	sxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008500:	4b18      	ldr	r3, [pc, #96]	@ (8008564 <tcp_receive+0x270>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850a:	b29b      	uxth	r3, r3
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008518:	4b12      	ldr	r3, [pc, #72]	@ (8008564 <tcp_receive+0x270>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	7d1b      	ldrb	r3, [r3, #20]
 8008524:	2b03      	cmp	r3, #3
 8008526:	f240 8097 	bls.w	8008658 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008536:	429a      	cmp	r2, r3
 8008538:	d245      	bcs.n	80085c6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8b5b      	ldrh	r3, [r3, #26]
 800853e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008542:	2b00      	cmp	r3, #0
 8008544:	d014      	beq.n	8008570 <tcp_receive+0x27c>
 8008546:	2301      	movs	r3, #1
 8008548:	e013      	b.n	8008572 <tcp_receive+0x27e>
 800854a:	bf00      	nop
 800854c:	0800f6f0 	.word	0x0800f6f0
 8008550:	0800fa20 	.word	0x0800fa20
 8008554:	0800f73c 	.word	0x0800f73c
 8008558:	0800fa3c 	.word	0x0800fa3c
 800855c:	2000697c 	.word	0x2000697c
 8008560:	20006970 	.word	0x20006970
 8008564:	20006974 	.word	0x20006974
 8008568:	20006960 	.word	0x20006960
 800856c:	2000697a 	.word	0x2000697a
 8008570:	2302      	movs	r3, #2
 8008572:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008576:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800857a:	b29a      	uxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008580:	fb12 f303 	smulbb	r3, r2, r3
 8008584:	b29b      	uxth	r3, r3
 8008586:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008588:	4293      	cmp	r3, r2
 800858a:	bf28      	it	cs
 800858c:	4613      	movcs	r3, r2
 800858e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008596:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008598:	4413      	add	r3, r2
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d309      	bcc.n	80085ba <tcp_receive+0x2c6>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80085ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80085ae:	4413      	add	r3, r2
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80085b8:	e04e      	b.n	8008658 <tcp_receive+0x364>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80085c4:	e048      	b.n	8008658 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80085cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80085ce:	4413      	add	r3, r2
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085d8:	429a      	cmp	r2, r3
 80085da:	d309      	bcc.n	80085f0 <tcp_receive+0x2fc>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80085e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80085e4:	4413      	add	r3, r2
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80085ee:	e004      	b.n	80085fa <tcp_receive+0x306>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008606:	429a      	cmp	r2, r3
 8008608:	d326      	bcc.n	8008658 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	b29a      	uxth	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800862a:	4413      	add	r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008634:	429a      	cmp	r2, r3
 8008636:	d30a      	bcc.n	800864e <tcp_receive+0x35a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008642:	4413      	add	r3, r2
 8008644:	b29a      	uxth	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800864c:	e004      	b.n	8008658 <tcp_receive+0x364>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008654:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008660:	4a98      	ldr	r2, [pc, #608]	@ (80088c4 <tcp_receive+0x5d0>)
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff fdca 	bl	80081fc <tcp_free_acked_segments>
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008676:	4a94      	ldr	r2, [pc, #592]	@ (80088c8 <tcp_receive+0x5d4>)
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fdbf 	bl	80081fc <tcp_free_acked_segments>
 800867e:	4602      	mov	r2, r0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008688:	2b00      	cmp	r3, #0
 800868a:	d104      	bne.n	8008696 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008692:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008694:	e002      	b.n	800869c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80086b8:	4b84      	ldr	r3, [pc, #528]	@ (80088cc <tcp_receive+0x5d8>)
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	4413      	add	r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	8b5b      	ldrh	r3, [r3, #26]
 80086ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d035      	beq.n	800873e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d118      	bne.n	800870c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00c      	beq.n	80086fc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fb f9d5 	bl	8003a9e <lwip_htonl>
 80086f4:	4603      	mov	r3, r0
 80086f6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dc20      	bgt.n	800873e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8b5b      	ldrh	r3, [r3, #26]
 8008700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800870a:	e018      	b.n	800873e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4618      	mov	r0, r3
 800871a:	f7fb f9c0 	bl	8003a9e <lwip_htonl>
 800871e:	4603      	mov	r3, r0
 8008720:	1ae3      	subs	r3, r4, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	dc0b      	bgt.n	800873e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8b5b      	ldrh	r3, [r3, #26]
 800872a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800872e:	b29a      	uxth	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008734:	e003      	b.n	800873e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 ff70 	bl	800a61c <tcp_send_empty_ack>
 800873c:	e000      	b.n	8008740 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800873e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008744:	2b00      	cmp	r3, #0
 8008746:	d05b      	beq.n	8008800 <tcp_receive+0x50c>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874c:	4b60      	ldr	r3, [pc, #384]	@ (80088d0 <tcp_receive+0x5dc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	da54      	bge.n	8008800 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008756:	4b5f      	ldr	r3, [pc, #380]	@ (80088d4 <tcp_receive+0x5e0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	b29a      	uxth	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008760:	b29b      	uxth	r3, r3
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	b29b      	uxth	r3, r3
 8008766:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800876a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008774:	10db      	asrs	r3, r3, #3
 8008776:	b21b      	sxth	r3, r3
 8008778:	b29b      	uxth	r3, r3
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	b29b      	uxth	r3, r3
 800877e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008788:	b29a      	uxth	r2, r3
 800878a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800878e:	4413      	add	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	b21a      	sxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008798:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800879c:	2b00      	cmp	r3, #0
 800879e:	da05      	bge.n	80087ac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80087a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80087a4:	425b      	negs	r3, r3
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80087ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80087b6:	109b      	asrs	r3, r3, #2
 80087b8:	b21b      	sxth	r3, r3
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80087d0:	4413      	add	r3, r2
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	b21a      	sxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80087e0:	10db      	asrs	r3, r3, #3
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4413      	add	r3, r2
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	b21a      	sxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008800:	4b35      	ldr	r3, [pc, #212]	@ (80088d8 <tcp_receive+0x5e4>)
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 84df 	beq.w	80091c8 <tcp_receive+0xed4>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7d1b      	ldrb	r3, [r3, #20]
 800880e:	2b06      	cmp	r3, #6
 8008810:	f200 84da 	bhi.w	80091c8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008818:	4b30      	ldr	r3, [pc, #192]	@ (80088dc <tcp_receive+0x5e8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	f2c0 808f 	blt.w	8008944 <tcp_receive+0x650>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800882a:	4b2b      	ldr	r3, [pc, #172]	@ (80088d8 <tcp_receive+0x5e4>)
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	4619      	mov	r1, r3
 8008830:	4b2a      	ldr	r3, [pc, #168]	@ (80088dc <tcp_receive+0x5e8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	440b      	add	r3, r1
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	3301      	adds	r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	f300 8082 	bgt.w	8008944 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008840:	4b27      	ldr	r3, [pc, #156]	@ (80088e0 <tcp_receive+0x5ec>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800884a:	4b24      	ldr	r3, [pc, #144]	@ (80088dc <tcp_receive+0x5e8>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008852:	4b23      	ldr	r3, [pc, #140]	@ (80088e0 <tcp_receive+0x5ec>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <tcp_receive+0x574>
 800885a:	4b22      	ldr	r3, [pc, #136]	@ (80088e4 <tcp_receive+0x5f0>)
 800885c:	f240 5294 	movw	r2, #1428	@ 0x594
 8008860:	4921      	ldr	r1, [pc, #132]	@ (80088e8 <tcp_receive+0x5f4>)
 8008862:	4822      	ldr	r0, [pc, #136]	@ (80088ec <tcp_receive+0x5f8>)
 8008864:	f004 ff14 	bl	800d690 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800886e:	4293      	cmp	r3, r2
 8008870:	d906      	bls.n	8008880 <tcp_receive+0x58c>
 8008872:	4b1c      	ldr	r3, [pc, #112]	@ (80088e4 <tcp_receive+0x5f0>)
 8008874:	f240 5295 	movw	r2, #1429	@ 0x595
 8008878:	491d      	ldr	r1, [pc, #116]	@ (80088f0 <tcp_receive+0x5fc>)
 800887a:	481c      	ldr	r0, [pc, #112]	@ (80088ec <tcp_receive+0x5f8>)
 800887c:	f004 ff08 	bl	800d690 <iprintf>
      off = (u16_t)off32;
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008886:	4b16      	ldr	r3, [pc, #88]	@ (80088e0 <tcp_receive+0x5ec>)
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	891b      	ldrh	r3, [r3, #8]
 800888c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008890:	429a      	cmp	r2, r3
 8008892:	d906      	bls.n	80088a2 <tcp_receive+0x5ae>
 8008894:	4b13      	ldr	r3, [pc, #76]	@ (80088e4 <tcp_receive+0x5f0>)
 8008896:	f240 5297 	movw	r2, #1431	@ 0x597
 800889a:	4916      	ldr	r1, [pc, #88]	@ (80088f4 <tcp_receive+0x600>)
 800889c:	4813      	ldr	r0, [pc, #76]	@ (80088ec <tcp_receive+0x5f8>)
 800889e:	f004 fef7 	bl	800d690 <iprintf>
      inseg.len -= off;
 80088a2:	4b0f      	ldr	r3, [pc, #60]	@ (80088e0 <tcp_receive+0x5ec>)
 80088a4:	891a      	ldrh	r2, [r3, #8]
 80088a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <tcp_receive+0x5ec>)
 80088b0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80088b2:	4b0b      	ldr	r3, [pc, #44]	@ (80088e0 <tcp_receive+0x5ec>)
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	891a      	ldrh	r2, [r3, #8]
 80088b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80088c0:	e02a      	b.n	8008918 <tcp_receive+0x624>
 80088c2:	bf00      	nop
 80088c4:	0800fa58 	.word	0x0800fa58
 80088c8:	0800fa60 	.word	0x0800fa60
 80088cc:	20006978 	.word	0x20006978
 80088d0:	20006974 	.word	0x20006974
 80088d4:	20006938 	.word	0x20006938
 80088d8:	2000697a 	.word	0x2000697a
 80088dc:	20006970 	.word	0x20006970
 80088e0:	20006950 	.word	0x20006950
 80088e4:	0800f6f0 	.word	0x0800f6f0
 80088e8:	0800fa68 	.word	0x0800fa68
 80088ec:	0800f73c 	.word	0x0800f73c
 80088f0:	0800fa78 	.word	0x0800fa78
 80088f4:	0800fa88 	.word	0x0800fa88
        off -= p->len;
 80088f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088fa:	895b      	ldrh	r3, [r3, #10]
 80088fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008908:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800890a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800890c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800890e:	2200      	movs	r2, #0
 8008910:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8008918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800891a:	895b      	ldrh	r3, [r3, #10]
 800891c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008920:	429a      	cmp	r2, r3
 8008922:	d8e9      	bhi.n	80088f8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008924:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008928:	4619      	mov	r1, r3
 800892a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800892c:	f7fc fb7a 	bl	8005024 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	4a90      	ldr	r2, [pc, #576]	@ (8008b78 <tcp_receive+0x884>)
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	4b90      	ldr	r3, [pc, #576]	@ (8008b7c <tcp_receive+0x888>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	4a8e      	ldr	r2, [pc, #568]	@ (8008b78 <tcp_receive+0x884>)
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008942:	e00d      	b.n	8008960 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008944:	4b8c      	ldr	r3, [pc, #560]	@ (8008b78 <tcp_receive+0x884>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	da06      	bge.n	8008960 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	8b5b      	ldrh	r3, [r3, #26]
 8008956:	f043 0302 	orr.w	r3, r3, #2
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008960:	4b85      	ldr	r3, [pc, #532]	@ (8008b78 <tcp_receive+0x884>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	f2c0 8427 	blt.w	80091be <tcp_receive+0xeca>
 8008970:	4b81      	ldr	r3, [pc, #516]	@ (8008b78 <tcp_receive+0x884>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800897c:	440b      	add	r3, r1
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	3301      	adds	r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	f300 841b 	bgt.w	80091be <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800898c:	4b7a      	ldr	r3, [pc, #488]	@ (8008b78 <tcp_receive+0x884>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	f040 8298 	bne.w	8008ec6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008996:	4b79      	ldr	r3, [pc, #484]	@ (8008b7c <tcp_receive+0x888>)
 8008998:	891c      	ldrh	r4, [r3, #8]
 800899a:	4b78      	ldr	r3, [pc, #480]	@ (8008b7c <tcp_receive+0x888>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	899b      	ldrh	r3, [r3, #12]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fb f866 	bl	8003a74 <lwip_htons>
 80089a8:	4603      	mov	r3, r0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <tcp_receive+0x6c4>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e000      	b.n	80089ba <tcp_receive+0x6c6>
 80089b8:	2300      	movs	r3, #0
 80089ba:	4423      	add	r3, r4
 80089bc:	b29a      	uxth	r2, r3
 80089be:	4b70      	ldr	r3, [pc, #448]	@ (8008b80 <tcp_receive+0x88c>)
 80089c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80089c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008b80 <tcp_receive+0x88c>)
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d274      	bcs.n	8008ab8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80089ce:	4b6b      	ldr	r3, [pc, #428]	@ (8008b7c <tcp_receive+0x888>)
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	899b      	ldrh	r3, [r3, #12]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fb f84c 	bl	8003a74 <lwip_htons>
 80089dc:	4603      	mov	r3, r0
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01e      	beq.n	8008a26 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80089e8:	4b64      	ldr	r3, [pc, #400]	@ (8008b7c <tcp_receive+0x888>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	899b      	ldrh	r3, [r3, #12]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	b21b      	sxth	r3, r3
 80089f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80089f6:	b21c      	sxth	r4, r3
 80089f8:	4b60      	ldr	r3, [pc, #384]	@ (8008b7c <tcp_receive+0x888>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	899b      	ldrh	r3, [r3, #12]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fb f837 	bl	8003a74 <lwip_htons>
 8008a06:	4603      	mov	r3, r0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fb f82f 	bl	8003a74 <lwip_htons>
 8008a16:	4603      	mov	r3, r0
 8008a18:	b21b      	sxth	r3, r3
 8008a1a:	4323      	orrs	r3, r4
 8008a1c:	b21a      	sxth	r2, r3
 8008a1e:	4b57      	ldr	r3, [pc, #348]	@ (8008b7c <tcp_receive+0x888>)
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	b292      	uxth	r2, r2
 8008a24:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008a2a:	4b54      	ldr	r3, [pc, #336]	@ (8008b7c <tcp_receive+0x888>)
 8008a2c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008a2e:	4b53      	ldr	r3, [pc, #332]	@ (8008b7c <tcp_receive+0x888>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	899b      	ldrh	r3, [r3, #12]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fb f81c 	bl	8003a74 <lwip_htons>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <tcp_receive+0x760>
            inseg.len -= 1;
 8008a48:	4b4c      	ldr	r3, [pc, #304]	@ (8008b7c <tcp_receive+0x888>)
 8008a4a:	891b      	ldrh	r3, [r3, #8]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	4b4a      	ldr	r3, [pc, #296]	@ (8008b7c <tcp_receive+0x888>)
 8008a52:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008a54:	4b49      	ldr	r3, [pc, #292]	@ (8008b7c <tcp_receive+0x888>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	4a48      	ldr	r2, [pc, #288]	@ (8008b7c <tcp_receive+0x888>)
 8008a5a:	8912      	ldrh	r2, [r2, #8]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fc f9e0 	bl	8004e24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008a64:	4b45      	ldr	r3, [pc, #276]	@ (8008b7c <tcp_receive+0x888>)
 8008a66:	891c      	ldrh	r4, [r3, #8]
 8008a68:	4b44      	ldr	r3, [pc, #272]	@ (8008b7c <tcp_receive+0x888>)
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	899b      	ldrh	r3, [r3, #12]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fa ffff 	bl	8003a74 <lwip_htons>
 8008a76:	4603      	mov	r3, r0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <tcp_receive+0x792>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <tcp_receive+0x794>
 8008a86:	2300      	movs	r3, #0
 8008a88:	4423      	add	r3, r4
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b80 <tcp_receive+0x88c>)
 8008a8e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008a90:	4b3b      	ldr	r3, [pc, #236]	@ (8008b80 <tcp_receive+0x88c>)
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	4b38      	ldr	r3, [pc, #224]	@ (8008b78 <tcp_receive+0x884>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	441a      	add	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008aa4:	440b      	add	r3, r1
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d006      	beq.n	8008ab8 <tcp_receive+0x7c4>
 8008aaa:	4b36      	ldr	r3, [pc, #216]	@ (8008b84 <tcp_receive+0x890>)
 8008aac:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8008ab0:	4935      	ldr	r1, [pc, #212]	@ (8008b88 <tcp_receive+0x894>)
 8008ab2:	4836      	ldr	r0, [pc, #216]	@ (8008b8c <tcp_receive+0x898>)
 8008ab4:	f004 fdec 	bl	800d690 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 80e6 	beq.w	8008c8e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8008b7c <tcp_receive+0x888>)
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	899b      	ldrh	r3, [r3, #12]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fa ffd2 	bl	8003a74 <lwip_htons>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d010      	beq.n	8008afe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008adc:	e00a      	b.n	8008af4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ae2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7fd fd93 	bl	800661a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f0      	bne.n	8008ade <tcp_receive+0x7ea>
 8008afc:	e0c7      	b.n	8008c8e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008b04:	e051      	b.n	8008baa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	899b      	ldrh	r3, [r3, #12]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fa ffb0 	bl	8003a74 <lwip_htons>
 8008b14:	4603      	mov	r3, r0
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d03c      	beq.n	8008b9a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008b20:	4b16      	ldr	r3, [pc, #88]	@ (8008b7c <tcp_receive+0x888>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	899b      	ldrh	r3, [r3, #12]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fa ffa3 	bl	8003a74 <lwip_htons>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d12f      	bne.n	8008b9a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008b3a:	4b10      	ldr	r3, [pc, #64]	@ (8008b7c <tcp_receive+0x888>)
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	899b      	ldrh	r3, [r3, #12]
 8008b40:	b29c      	uxth	r4, r3
 8008b42:	2001      	movs	r0, #1
 8008b44:	f7fa ff96 	bl	8003a74 <lwip_htons>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b7c <tcp_receive+0x888>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	4322      	orrs	r2, r4
 8008b52:	b292      	uxth	r2, r2
 8008b54:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <tcp_receive+0x888>)
 8008b58:	891c      	ldrh	r4, [r3, #8]
 8008b5a:	4b08      	ldr	r3, [pc, #32]	@ (8008b7c <tcp_receive+0x888>)
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	899b      	ldrh	r3, [r3, #12]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fa ff86 	bl	8003a74 <lwip_htons>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00d      	beq.n	8008b90 <tcp_receive+0x89c>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e00c      	b.n	8008b92 <tcp_receive+0x89e>
 8008b78:	20006970 	.word	0x20006970
 8008b7c:	20006950 	.word	0x20006950
 8008b80:	2000697a 	.word	0x2000697a
 8008b84:	0800f6f0 	.word	0x0800f6f0
 8008b88:	0800fa98 	.word	0x0800fa98
 8008b8c:	0800f73c 	.word	0x0800f73c
 8008b90:	2300      	movs	r3, #0
 8008b92:	4423      	add	r3, r4
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	4b98      	ldr	r3, [pc, #608]	@ (8008df8 <tcp_receive+0xb04>)
 8008b98:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8008ba4:	6938      	ldr	r0, [r7, #16]
 8008ba6:	f7fd fd38 	bl	800661a <tcp_seg_free>
            while (next &&
 8008baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00e      	beq.n	8008bce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008bb0:	4b91      	ldr	r3, [pc, #580]	@ (8008df8 <tcp_receive+0xb04>)
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4b91      	ldr	r3, [pc, #580]	@ (8008dfc <tcp_receive+0xb08>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	441a      	add	r2, r3
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bc4:	8909      	ldrh	r1, [r1, #8]
 8008bc6:	440b      	add	r3, r1
 8008bc8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da9b      	bge.n	8008b06 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d059      	beq.n	8008c88 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008bd4:	4b88      	ldr	r3, [pc, #544]	@ (8008df8 <tcp_receive+0xb04>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b88      	ldr	r3, [pc, #544]	@ (8008dfc <tcp_receive+0xb08>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	441a      	add	r2, r3
 8008be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dd4d      	ble.n	8008c88 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	4b81      	ldr	r3, [pc, #516]	@ (8008dfc <tcp_receive+0xb08>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	4b80      	ldr	r3, [pc, #512]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008c02:	4b7f      	ldr	r3, [pc, #508]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	899b      	ldrh	r3, [r3, #12]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fa ff32 	bl	8003a74 <lwip_htons>
 8008c10:	4603      	mov	r3, r0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <tcp_receive+0x934>
                inseg.len -= 1;
 8008c1c:	4b78      	ldr	r3, [pc, #480]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c1e:	891b      	ldrh	r3, [r3, #8]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	4b76      	ldr	r3, [pc, #472]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008c28:	4b75      	ldr	r3, [pc, #468]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4a74      	ldr	r2, [pc, #464]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c2e:	8912      	ldrh	r2, [r2, #8]
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fc f8f6 	bl	8004e24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008c38:	4b71      	ldr	r3, [pc, #452]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c3a:	891c      	ldrh	r4, [r3, #8]
 8008c3c:	4b70      	ldr	r3, [pc, #448]	@ (8008e00 <tcp_receive+0xb0c>)
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	899b      	ldrh	r3, [r3, #12]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fa ff15 	bl	8003a74 <lwip_htons>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <tcp_receive+0x966>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <tcp_receive+0x968>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4423      	add	r3, r4
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	4b65      	ldr	r3, [pc, #404]	@ (8008df8 <tcp_receive+0xb04>)
 8008c62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008c64:	4b64      	ldr	r3, [pc, #400]	@ (8008df8 <tcp_receive+0xb04>)
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4b64      	ldr	r3, [pc, #400]	@ (8008dfc <tcp_receive+0xb08>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	441a      	add	r2, r3
 8008c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d006      	beq.n	8008c88 <tcp_receive+0x994>
 8008c7a:	4b62      	ldr	r3, [pc, #392]	@ (8008e04 <tcp_receive+0xb10>)
 8008c7c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8008c80:	4961      	ldr	r1, [pc, #388]	@ (8008e08 <tcp_receive+0xb14>)
 8008c82:	4862      	ldr	r0, [pc, #392]	@ (8008e0c <tcp_receive+0xb18>)
 8008c84:	f004 fd04 	bl	800d690 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c8c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8008df8 <tcp_receive+0xb04>)
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	4b59      	ldr	r3, [pc, #356]	@ (8008dfc <tcp_receive+0xb08>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	441a      	add	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008ca2:	4b55      	ldr	r3, [pc, #340]	@ (8008df8 <tcp_receive+0xb04>)
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d206      	bcs.n	8008cb8 <tcp_receive+0x9c4>
 8008caa:	4b56      	ldr	r3, [pc, #344]	@ (8008e04 <tcp_receive+0xb10>)
 8008cac:	f240 6207 	movw	r2, #1543	@ 0x607
 8008cb0:	4957      	ldr	r1, [pc, #348]	@ (8008e10 <tcp_receive+0xb1c>)
 8008cb2:	4856      	ldr	r0, [pc, #344]	@ (8008e0c <tcp_receive+0xb18>)
 8008cb4:	f004 fcec 	bl	800d690 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8008df8 <tcp_receive+0xb04>)
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7fc ffc5 	bl	8005c58 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008cce:	4b4c      	ldr	r3, [pc, #304]	@ (8008e00 <tcp_receive+0xb0c>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	891b      	ldrh	r3, [r3, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008cd8:	4b49      	ldr	r3, [pc, #292]	@ (8008e00 <tcp_receive+0xb0c>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8008e14 <tcp_receive+0xb20>)
 8008cde:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008ce0:	4b47      	ldr	r3, [pc, #284]	@ (8008e00 <tcp_receive+0xb0c>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ce6:	4b46      	ldr	r3, [pc, #280]	@ (8008e00 <tcp_receive+0xb0c>)
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	899b      	ldrh	r3, [r3, #12]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fa fec0 	bl	8003a74 <lwip_htons>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80b8 	beq.w	8008e72 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008d02:	4b45      	ldr	r3, [pc, #276]	@ (8008e18 <tcp_receive+0xb24>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	f043 0320 	orr.w	r3, r3, #32
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	4b42      	ldr	r3, [pc, #264]	@ (8008e18 <tcp_receive+0xb24>)
 8008d0e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008d10:	e0af      	b.n	8008e72 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d16:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4a36      	ldr	r2, [pc, #216]	@ (8008dfc <tcp_receive+0xb08>)
 8008d22:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	891b      	ldrh	r3, [r3, #8]
 8008d28:	461c      	mov	r4, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	899b      	ldrh	r3, [r3, #12]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fa fe9e 	bl	8003a74 <lwip_htons>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <tcp_receive+0xa54>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <tcp_receive+0xa56>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	191a      	adds	r2, r3, r4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d5a:	461c      	mov	r4, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	891b      	ldrh	r3, [r3, #8]
 8008d60:	461d      	mov	r5, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	899b      	ldrh	r3, [r3, #12]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fa fe82 	bl	8003a74 <lwip_htons>
 8008d70:	4603      	mov	r3, r0
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	f003 0303 	and.w	r3, r3, #3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <tcp_receive+0xa8c>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <tcp_receive+0xa8e>
 8008d80:	2300      	movs	r3, #0
 8008d82:	442b      	add	r3, r5
 8008d84:	429c      	cmp	r4, r3
 8008d86:	d206      	bcs.n	8008d96 <tcp_receive+0xaa2>
 8008d88:	4b1e      	ldr	r3, [pc, #120]	@ (8008e04 <tcp_receive+0xb10>)
 8008d8a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8008d8e:	4923      	ldr	r1, [pc, #140]	@ (8008e1c <tcp_receive+0xb28>)
 8008d90:	481e      	ldr	r0, [pc, #120]	@ (8008e0c <tcp_receive+0xb18>)
 8008d92:	f004 fc7d 	bl	800d690 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	891b      	ldrh	r3, [r3, #8]
 8008d9a:	461c      	mov	r4, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	899b      	ldrh	r3, [r3, #12]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fa fe65 	bl	8003a74 <lwip_htons>
 8008daa:	4603      	mov	r3, r0
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <tcp_receive+0xac6>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <tcp_receive+0xac8>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	1919      	adds	r1, r3, r4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008dc2:	b28b      	uxth	r3, r1
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7fc ff43 	bl	8005c58 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	891b      	ldrh	r3, [r3, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d028      	beq.n	8008e2e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <tcp_receive+0xb20>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01d      	beq.n	8008e20 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008de4:	4b0b      	ldr	r3, [pc, #44]	@ (8008e14 <tcp_receive+0xb20>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fc fa60 	bl	80052b4 <pbuf_cat>
 8008df4:	e018      	b.n	8008e28 <tcp_receive+0xb34>
 8008df6:	bf00      	nop
 8008df8:	2000697a 	.word	0x2000697a
 8008dfc:	20006970 	.word	0x20006970
 8008e00:	20006950 	.word	0x20006950
 8008e04:	0800f6f0 	.word	0x0800f6f0
 8008e08:	0800fad0 	.word	0x0800fad0
 8008e0c:	0800f73c 	.word	0x0800f73c
 8008e10:	0800fb0c 	.word	0x0800fb0c
 8008e14:	20006980 	.word	0x20006980
 8008e18:	2000697d 	.word	0x2000697d
 8008e1c:	0800fb2c 	.word	0x0800fb2c
            } else {
              recv_data = cseg->p;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a70      	ldr	r2, [pc, #448]	@ (8008fe8 <tcp_receive+0xcf4>)
 8008e26:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	899b      	ldrh	r3, [r3, #12]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fa fe1c 	bl	8003a74 <lwip_htons>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00d      	beq.n	8008e64 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008e48:	4b68      	ldr	r3, [pc, #416]	@ (8008fec <tcp_receive+0xcf8>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f043 0320 	orr.w	r3, r3, #32
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	4b66      	ldr	r3, [pc, #408]	@ (8008fec <tcp_receive+0xcf8>)
 8008e54:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d102      	bne.n	8008e64 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2207      	movs	r2, #7
 8008e62:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8008e6c:	68b8      	ldr	r0, [r7, #8]
 8008e6e:	f7fd fbd4 	bl	800661a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d008      	beq.n	8008e8c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8008e86:	429a      	cmp	r2, r3
 8008e88:	f43f af43 	beq.w	8008d12 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	8b5b      	ldrh	r3, [r3, #26]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00e      	beq.n	8008eb6 <tcp_receive+0xbc2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8b5b      	ldrh	r3, [r3, #26]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	835a      	strh	r2, [r3, #26]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8b5b      	ldrh	r3, [r3, #26]
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008eb4:	e187      	b.n	80091c6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8b5b      	ldrh	r3, [r3, #26]
 8008eba:	f043 0301 	orr.w	r3, r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008ec4:	e17f      	b.n	80091c6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008ece:	4848      	ldr	r0, [pc, #288]	@ (8008ff0 <tcp_receive+0xcfc>)
 8008ed0:	f7fd fbbc 	bl	800664c <tcp_seg_copy>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	675a      	str	r2, [r3, #116]	@ 0x74
 8008eda:	e16c      	b.n	80091b6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ee6:	e156      	b.n	8009196 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4b41      	ldr	r3, [pc, #260]	@ (8008ff4 <tcp_receive+0xd00>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d11d      	bne.n	8008f32 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff0 <tcp_receive+0xcfc>)
 8008ef8:	891a      	ldrh	r2, [r3, #8]
 8008efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efc:	891b      	ldrh	r3, [r3, #8]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	f240 814e 	bls.w	80091a0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f04:	483a      	ldr	r0, [pc, #232]	@ (8008ff0 <tcp_receive+0xcfc>)
 8008f06:	f7fd fba1 	bl	800664c <tcp_seg_copy>
 8008f0a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8148 	beq.w	80091a4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8008f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	e002      	b.n	8008f28 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008f28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	f7ff f8de 	bl	80080ec <tcp_oos_insert_segment>
                }
                break;
 8008f30:	e138      	b.n	80091a4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d117      	bne.n	8008f68 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008f38:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff4 <tcp_receive+0xd00>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	da57      	bge.n	8008ff8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f48:	4829      	ldr	r0, [pc, #164]	@ (8008ff0 <tcp_receive+0xcfc>)
 8008f4a:	f7fd fb7f 	bl	800664c <tcp_seg_copy>
 8008f4e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 8128 	beq.w	80091a8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008f5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f60:	69b8      	ldr	r0, [r7, #24]
 8008f62:	f7ff f8c3 	bl	80080ec <tcp_oos_insert_segment>
                  }
                  break;
 8008f66:	e11f      	b.n	80091a8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008f68:	4b22      	ldr	r3, [pc, #136]	@ (8008ff4 <tcp_receive+0xd00>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	db3e      	blt.n	8008ff8 <tcp_receive+0xd04>
 8008f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ff4 <tcp_receive+0xd00>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	3301      	adds	r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dc35      	bgt.n	8008ff8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f8c:	4818      	ldr	r0, [pc, #96]	@ (8008ff0 <tcp_receive+0xcfc>)
 8008f8e:	f7fd fb5d 	bl	800664c <tcp_seg_copy>
 8008f92:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 8108 	beq.w	80091ac <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fa4:	8912      	ldrh	r2, [r2, #8]
 8008fa6:	441a      	add	r2, r3
 8008fa8:	4b12      	ldr	r3, [pc, #72]	@ (8008ff4 <tcp_receive+0xd00>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	dd12      	ble.n	8008fd8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <tcp_receive+0xd00>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fce:	891b      	ldrh	r3, [r3, #8]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fb ff26 	bl	8004e24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008fde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fe0:	69f8      	ldr	r0, [r7, #28]
 8008fe2:	f7ff f883 	bl	80080ec <tcp_oos_insert_segment>
                  }
                  break;
 8008fe6:	e0e1      	b.n	80091ac <tcp_receive+0xeb8>
 8008fe8:	20006980 	.word	0x20006980
 8008fec:	2000697d 	.word	0x2000697d
 8008ff0:	20006950 	.word	0x20006950
 8008ff4:	20006970 	.word	0x20006970
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	f040 80c5 	bne.w	8009190 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009006:	4b7f      	ldr	r3, [pc, #508]	@ (8009204 <tcp_receive+0xf10>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009012:	2b00      	cmp	r3, #0
 8009014:	f340 80bc 	ble.w	8009190 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	899b      	ldrh	r3, [r3, #12]
 800901e:	b29b      	uxth	r3, r3
 8009020:	4618      	mov	r0, r3
 8009022:	f7fa fd27 	bl	8003a74 <lwip_htons>
 8009026:	4603      	mov	r3, r0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	f040 80be 	bne.w	80091b0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009034:	4874      	ldr	r0, [pc, #464]	@ (8009208 <tcp_receive+0xf14>)
 8009036:	f7fd fb09 	bl	800664c <tcp_seg_copy>
 800903a:	4602      	mov	r2, r0
 800903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80b5 	beq.w	80091b4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800904a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009052:	8912      	ldrh	r2, [r2, #8]
 8009054:	441a      	add	r2, r3
 8009056:	4b6b      	ldr	r3, [pc, #428]	@ (8009204 <tcp_receive+0xf10>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd12      	ble.n	8009086 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009060:	4b68      	ldr	r3, [pc, #416]	@ (8009204 <tcp_receive+0xf10>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	b29a      	uxth	r2, r3
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	b29b      	uxth	r3, r3
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	b29a      	uxth	r2, r3
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907c:	891b      	ldrh	r3, [r3, #8]
 800907e:	4619      	mov	r1, r3
 8009080:	4610      	mov	r0, r2
 8009082:	f7fb fecf 	bl	8004e24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009086:	4b61      	ldr	r3, [pc, #388]	@ (800920c <tcp_receive+0xf18>)
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	4b5d      	ldr	r3, [pc, #372]	@ (8009204 <tcp_receive+0xf10>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	441a      	add	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800909a:	440b      	add	r3, r1
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f340 8088 	ble.w	80091b4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80090a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	899b      	ldrh	r3, [r3, #12]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa fce0 	bl	8003a74 <lwip_htons>
 80090b4:	4603      	mov	r3, r0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d021      	beq.n	8009104 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	899b      	ldrh	r3, [r3, #12]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	b21b      	sxth	r3, r3
 80090cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80090d0:	b21c      	sxth	r4, r3
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	899b      	ldrh	r3, [r3, #12]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fa fcc9 	bl	8003a74 <lwip_htons>
 80090e2:	4603      	mov	r3, r0
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fa fcc1 	bl	8003a74 <lwip_htons>
 80090f2:	4603      	mov	r3, r0
 80090f4:	b21b      	sxth	r3, r3
 80090f6:	4323      	orrs	r3, r4
 80090f8:	b21a      	sxth	r2, r3
 80090fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	b292      	uxth	r2, r2
 8009102:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009108:	b29a      	uxth	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800910e:	4413      	add	r3, r2
 8009110:	b299      	uxth	r1, r3
 8009112:	4b3c      	ldr	r3, [pc, #240]	@ (8009204 <tcp_receive+0xf10>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	b29a      	uxth	r2, r3
 8009118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	1a8a      	subs	r2, r1, r2
 800911e:	b292      	uxth	r2, r2
 8009120:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7fb fe77 	bl	8004e24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	891c      	ldrh	r4, [r3, #8]
 800913c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	899b      	ldrh	r3, [r3, #12]
 8009144:	b29b      	uxth	r3, r3
 8009146:	4618      	mov	r0, r3
 8009148:	f7fa fc94 	bl	8003a74 <lwip_htons>
 800914c:	4603      	mov	r3, r0
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <tcp_receive+0xe68>
 8009158:	2301      	movs	r3, #1
 800915a:	e000      	b.n	800915e <tcp_receive+0xe6a>
 800915c:	2300      	movs	r3, #0
 800915e:	4423      	add	r3, r4
 8009160:	b29a      	uxth	r2, r3
 8009162:	4b2a      	ldr	r3, [pc, #168]	@ (800920c <tcp_receive+0xf18>)
 8009164:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009166:	4b29      	ldr	r3, [pc, #164]	@ (800920c <tcp_receive+0xf18>)
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	4b25      	ldr	r3, [pc, #148]	@ (8009204 <tcp_receive+0xf10>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	441a      	add	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800917a:	440b      	add	r3, r1
 800917c:	429a      	cmp	r2, r3
 800917e:	d019      	beq.n	80091b4 <tcp_receive+0xec0>
 8009180:	4b23      	ldr	r3, [pc, #140]	@ (8009210 <tcp_receive+0xf1c>)
 8009182:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009186:	4923      	ldr	r1, [pc, #140]	@ (8009214 <tcp_receive+0xf20>)
 8009188:	4823      	ldr	r0, [pc, #140]	@ (8009218 <tcp_receive+0xf24>)
 800918a:	f004 fa81 	bl	800d690 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800918e:	e011      	b.n	80091b4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	2b00      	cmp	r3, #0
 800919a:	f47f aea5 	bne.w	8008ee8 <tcp_receive+0xbf4>
 800919e:	e00a      	b.n	80091b6 <tcp_receive+0xec2>
                break;
 80091a0:	bf00      	nop
 80091a2:	e008      	b.n	80091b6 <tcp_receive+0xec2>
                break;
 80091a4:	bf00      	nop
 80091a6:	e006      	b.n	80091b6 <tcp_receive+0xec2>
                  break;
 80091a8:	bf00      	nop
 80091aa:	e004      	b.n	80091b6 <tcp_receive+0xec2>
                  break;
 80091ac:	bf00      	nop
 80091ae:	e002      	b.n	80091b6 <tcp_receive+0xec2>
                  break;
 80091b0:	bf00      	nop
 80091b2:	e000      	b.n	80091b6 <tcp_receive+0xec2>
                break;
 80091b4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fa30 	bl	800a61c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80091bc:	e003      	b.n	80091c6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 fa2c 	bl	800a61c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80091c4:	e01a      	b.n	80091fc <tcp_receive+0xf08>
 80091c6:	e019      	b.n	80091fc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80091c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <tcp_receive+0xf10>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	db0a      	blt.n	80091ec <tcp_receive+0xef8>
 80091d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009204 <tcp_receive+0xf10>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80091e2:	440b      	add	r3, r1
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	3301      	adds	r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd07      	ble.n	80091fc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	8b5b      	ldrh	r3, [r3, #26]
 80091f0:	f043 0302 	orr.w	r3, r3, #2
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80091fa:	e7ff      	b.n	80091fc <tcp_receive+0xf08>
 80091fc:	bf00      	nop
 80091fe:	3750      	adds	r7, #80	@ 0x50
 8009200:	46bd      	mov	sp, r7
 8009202:	bdb0      	pop	{r4, r5, r7, pc}
 8009204:	20006970 	.word	0x20006970
 8009208:	20006950 	.word	0x20006950
 800920c:	2000697a 	.word	0x2000697a
 8009210:	0800f6f0 	.word	0x0800f6f0
 8009214:	0800fa98 	.word	0x0800fa98
 8009218:	0800f73c 	.word	0x0800f73c

0800921c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009222:	4b15      	ldr	r3, [pc, #84]	@ (8009278 <tcp_get_next_optbyte+0x5c>)
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	b291      	uxth	r1, r2
 800922a:	4a13      	ldr	r2, [pc, #76]	@ (8009278 <tcp_get_next_optbyte+0x5c>)
 800922c:	8011      	strh	r1, [r2, #0]
 800922e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009230:	4b12      	ldr	r3, [pc, #72]	@ (800927c <tcp_get_next_optbyte+0x60>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <tcp_get_next_optbyte+0x26>
 8009238:	4b11      	ldr	r3, [pc, #68]	@ (8009280 <tcp_get_next_optbyte+0x64>)
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	88fa      	ldrh	r2, [r7, #6]
 800923e:	429a      	cmp	r2, r3
 8009240:	d208      	bcs.n	8009254 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009242:	4b10      	ldr	r3, [pc, #64]	@ (8009284 <tcp_get_next_optbyte+0x68>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3314      	adds	r3, #20
 8009248:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4413      	add	r3, r2
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	e00b      	b.n	800926c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009254:	88fb      	ldrh	r3, [r7, #6]
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b09      	ldr	r3, [pc, #36]	@ (8009280 <tcp_get_next_optbyte+0x64>)
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009262:	4b06      	ldr	r3, [pc, #24]	@ (800927c <tcp_get_next_optbyte+0x60>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	797b      	ldrb	r3, [r7, #5]
 8009268:	4413      	add	r3, r2
 800926a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	2000696c 	.word	0x2000696c
 800927c:	20006968 	.word	0x20006968
 8009280:	20006966 	.word	0x20006966
 8009284:	20006960 	.word	0x20006960

08009288 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <tcp_parseopt+0x1c>
 8009296:	4b32      	ldr	r3, [pc, #200]	@ (8009360 <tcp_parseopt+0xd8>)
 8009298:	f240 727d 	movw	r2, #1917	@ 0x77d
 800929c:	4931      	ldr	r1, [pc, #196]	@ (8009364 <tcp_parseopt+0xdc>)
 800929e:	4832      	ldr	r0, [pc, #200]	@ (8009368 <tcp_parseopt+0xe0>)
 80092a0:	f004 f9f6 	bl	800d690 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80092a4:	4b31      	ldr	r3, [pc, #196]	@ (800936c <tcp_parseopt+0xe4>)
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d056      	beq.n	800935a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80092ac:	4b30      	ldr	r3, [pc, #192]	@ (8009370 <tcp_parseopt+0xe8>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	e046      	b.n	8009342 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80092b4:	f7ff ffb2 	bl	800921c <tcp_get_next_optbyte>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d006      	beq.n	80092d0 <tcp_parseopt+0x48>
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	dc2a      	bgt.n	800931c <tcp_parseopt+0x94>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d042      	beq.n	8009350 <tcp_parseopt+0xc8>
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d038      	beq.n	8009340 <tcp_parseopt+0xb8>
 80092ce:	e025      	b.n	800931c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80092d0:	f7ff ffa4 	bl	800921c <tcp_get_next_optbyte>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d13c      	bne.n	8009354 <tcp_parseopt+0xcc>
 80092da:	4b25      	ldr	r3, [pc, #148]	@ (8009370 <tcp_parseopt+0xe8>)
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	4a22      	ldr	r2, [pc, #136]	@ (800936c <tcp_parseopt+0xe4>)
 80092e2:	8812      	ldrh	r2, [r2, #0]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	da35      	bge.n	8009354 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80092e8:	f7ff ff98 	bl	800921c <tcp_get_next_optbyte>
 80092ec:	4603      	mov	r3, r0
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80092f2:	f7ff ff93 	bl	800921c <tcp_get_next_optbyte>
 80092f6:	4603      	mov	r3, r0
 80092f8:	461a      	mov	r2, r3
 80092fa:	89bb      	ldrh	r3, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009300:	89bb      	ldrh	r3, [r7, #12]
 8009302:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009306:	d804      	bhi.n	8009312 <tcp_parseopt+0x8a>
 8009308:	89bb      	ldrh	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <tcp_parseopt+0x8a>
 800930e:	89ba      	ldrh	r2, [r7, #12]
 8009310:	e001      	b.n	8009316 <tcp_parseopt+0x8e>
 8009312:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800931a:	e012      	b.n	8009342 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800931c:	f7ff ff7e 	bl	800921c <tcp_get_next_optbyte>
 8009320:	4603      	mov	r3, r0
 8009322:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d916      	bls.n	8009358 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	b29a      	uxth	r2, r3
 800932e:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <tcp_parseopt+0xe8>)
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	4413      	add	r3, r2
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b02      	subs	r3, #2
 8009338:	b29a      	uxth	r2, r3
 800933a:	4b0d      	ldr	r3, [pc, #52]	@ (8009370 <tcp_parseopt+0xe8>)
 800933c:	801a      	strh	r2, [r3, #0]
 800933e:	e000      	b.n	8009342 <tcp_parseopt+0xba>
          break;
 8009340:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <tcp_parseopt+0xe8>)
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	4b09      	ldr	r3, [pc, #36]	@ (800936c <tcp_parseopt+0xe4>)
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d3b2      	bcc.n	80092b4 <tcp_parseopt+0x2c>
 800934e:	e004      	b.n	800935a <tcp_parseopt+0xd2>
          return;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <tcp_parseopt+0xd2>
            return;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <tcp_parseopt+0xd2>
            return;
 8009358:	bf00      	nop
      }
    }
  }
}
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	0800f6f0 	.word	0x0800f6f0
 8009364:	0800fb54 	.word	0x0800fb54
 8009368:	0800f73c 	.word	0x0800f73c
 800936c:	20006964 	.word	0x20006964
 8009370:	2000696c 	.word	0x2000696c

08009374 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009378:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <tcp_trigger_input_pcb_close+0x1c>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f043 0310 	orr.w	r3, r3, #16
 8009380:	b2da      	uxtb	r2, r3
 8009382:	4b03      	ldr	r3, [pc, #12]	@ (8009390 <tcp_trigger_input_pcb_close+0x1c>)
 8009384:	701a      	strb	r2, [r3, #0]
}
 8009386:	bf00      	nop
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	2000697d 	.word	0x2000697d

08009394 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <tcp_route+0x28>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	7a1b      	ldrb	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d006      	beq.n	80093bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	7a1b      	ldrb	r3, [r3, #8]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fb fb5c 	bl	8004a70 <netif_get_by_index>
 80093b8:	4603      	mov	r3, r0
 80093ba:	e003      	b.n	80093c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f002 fe7b 	bl	800c0b8 <ip4_route>
 80093c2:	4603      	mov	r3, r0
  }
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80093cc:	b590      	push	{r4, r7, lr}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <tcp_create_segment+0x22>
 80093e2:	4b43      	ldr	r3, [pc, #268]	@ (80094f0 <tcp_create_segment+0x124>)
 80093e4:	22a3      	movs	r2, #163	@ 0xa3
 80093e6:	4943      	ldr	r1, [pc, #268]	@ (80094f4 <tcp_create_segment+0x128>)
 80093e8:	4843      	ldr	r0, [pc, #268]	@ (80094f8 <tcp_create_segment+0x12c>)
 80093ea:	f004 f951 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <tcp_create_segment+0x34>
 80093f4:	4b3e      	ldr	r3, [pc, #248]	@ (80094f0 <tcp_create_segment+0x124>)
 80093f6:	22a4      	movs	r2, #164	@ 0xa4
 80093f8:	4940      	ldr	r1, [pc, #256]	@ (80094fc <tcp_create_segment+0x130>)
 80093fa:	483f      	ldr	r0, [pc, #252]	@ (80094f8 <tcp_create_segment+0x12c>)
 80093fc:	f004 f948 	bl	800d690 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009400:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800940e:	2003      	movs	r0, #3
 8009410:	f7fa ffa8 	bl	8004364 <memp_malloc>
 8009414:	6138      	str	r0, [r7, #16]
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800941c:	68b8      	ldr	r0, [r7, #8]
 800941e:	f7fb fe87 	bl	8005130 <pbuf_free>
    return NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	e060      	b.n	80094e8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800942c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	891a      	ldrh	r2, [r3, #8]
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	b29b      	uxth	r3, r3
 8009442:	429a      	cmp	r2, r3
 8009444:	d205      	bcs.n	8009452 <tcp_create_segment+0x86>
 8009446:	4b2a      	ldr	r3, [pc, #168]	@ (80094f0 <tcp_create_segment+0x124>)
 8009448:	22b0      	movs	r2, #176	@ 0xb0
 800944a:	492d      	ldr	r1, [pc, #180]	@ (8009500 <tcp_create_segment+0x134>)
 800944c:	482a      	ldr	r0, [pc, #168]	@ (80094f8 <tcp_create_segment+0x12c>)
 800944e:	f004 f91f 	bl	800d690 <iprintf>
  seg->len = p->tot_len - optlen;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	891a      	ldrh	r2, [r3, #8]
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	b29b      	uxth	r3, r3
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	b29a      	uxth	r2, r3
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009462:	2114      	movs	r1, #20
 8009464:	68b8      	ldr	r0, [r7, #8]
 8009466:	f7fb fdcd 	bl	8005004 <pbuf_add_header>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009470:	6938      	ldr	r0, [r7, #16]
 8009472:	f7fd f8d2 	bl	800661a <tcp_seg_free>
    return NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	e036      	b.n	80094e8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8ada      	ldrh	r2, [r3, #22]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	68dc      	ldr	r4, [r3, #12]
 800948c:	4610      	mov	r0, r2
 800948e:	f7fa faf1 	bl	8003a74 <lwip_htons>
 8009492:	4603      	mov	r3, r0
 8009494:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8b1a      	ldrh	r2, [r3, #24]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	68dc      	ldr	r4, [r3, #12]
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fa fae8 	bl	8003a74 <lwip_htons>
 80094a4:	4603      	mov	r3, r0
 80094a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	68dc      	ldr	r4, [r3, #12]
 80094ac:	6838      	ldr	r0, [r7, #0]
 80094ae:	f7fa faf6 	bl	8003a9e <lwip_htonl>
 80094b2:	4603      	mov	r3, r0
 80094b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	089b      	lsrs	r3, r3, #2
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	3305      	adds	r3, #5
 80094be:	b29b      	uxth	r3, r3
 80094c0:	031b      	lsls	r3, r3, #12
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	4313      	orrs	r3, r2
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	68dc      	ldr	r4, [r3, #12]
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7fa facf 	bl	8003a74 <lwip_htons>
 80094d6:	4603      	mov	r3, r0
 80094d8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	749a      	strb	r2, [r3, #18]
 80094e2:	2200      	movs	r2, #0
 80094e4:	74da      	strb	r2, [r3, #19]
  return seg;
 80094e6:	693b      	ldr	r3, [r7, #16]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}
 80094f0:	0800fb70 	.word	0x0800fb70
 80094f4:	0800fba4 	.word	0x0800fba4
 80094f8:	0800fbc4 	.word	0x0800fbc4
 80094fc:	0800fbec 	.word	0x0800fbec
 8009500:	0800fc10 	.word	0x0800fc10

08009504 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009504:	b590      	push	{r4, r7, lr}
 8009506:	b08b      	sub	sp, #44	@ 0x2c
 8009508:	af02      	add	r7, sp, #8
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d106      	bne.n	8009530 <tcp_split_unsent_seg+0x2c>
 8009522:	4b95      	ldr	r3, [pc, #596]	@ (8009778 <tcp_split_unsent_seg+0x274>)
 8009524:	f240 324b 	movw	r2, #843	@ 0x34b
 8009528:	4994      	ldr	r1, [pc, #592]	@ (800977c <tcp_split_unsent_seg+0x278>)
 800952a:	4895      	ldr	r0, [pc, #596]	@ (8009780 <tcp_split_unsent_seg+0x27c>)
 800952c:	f004 f8b0 	bl	800d690 <iprintf>

  useg = pcb->unsent;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009534:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800953c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009540:	e116      	b.n	8009770 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009542:	887b      	ldrh	r3, [r7, #2]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d109      	bne.n	800955c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009548:	4b8b      	ldr	r3, [pc, #556]	@ (8009778 <tcp_split_unsent_seg+0x274>)
 800954a:	f240 3253 	movw	r2, #851	@ 0x353
 800954e:	498d      	ldr	r1, [pc, #564]	@ (8009784 <tcp_split_unsent_seg+0x280>)
 8009550:	488b      	ldr	r0, [pc, #556]	@ (8009780 <tcp_split_unsent_seg+0x27c>)
 8009552:	f004 f89d 	bl	800d690 <iprintf>
    return ERR_VAL;
 8009556:	f06f 0305 	mvn.w	r3, #5
 800955a:	e109      	b.n	8009770 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	891b      	ldrh	r3, [r3, #8]
 8009560:	887a      	ldrh	r2, [r7, #2]
 8009562:	429a      	cmp	r2, r3
 8009564:	d301      	bcc.n	800956a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	e102      	b.n	8009770 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800956e:	887a      	ldrh	r2, [r7, #2]
 8009570:	429a      	cmp	r2, r3
 8009572:	d906      	bls.n	8009582 <tcp_split_unsent_seg+0x7e>
 8009574:	4b80      	ldr	r3, [pc, #512]	@ (8009778 <tcp_split_unsent_seg+0x274>)
 8009576:	f240 325b 	movw	r2, #859	@ 0x35b
 800957a:	4983      	ldr	r1, [pc, #524]	@ (8009788 <tcp_split_unsent_seg+0x284>)
 800957c:	4880      	ldr	r0, [pc, #512]	@ (8009780 <tcp_split_unsent_seg+0x27c>)
 800957e:	f004 f887 	bl	800d690 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	891b      	ldrh	r3, [r3, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <tcp_split_unsent_seg+0x94>
 800958a:	4b7b      	ldr	r3, [pc, #492]	@ (8009778 <tcp_split_unsent_seg+0x274>)
 800958c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8009590:	497e      	ldr	r1, [pc, #504]	@ (800978c <tcp_split_unsent_seg+0x288>)
 8009592:	487b      	ldr	r0, [pc, #492]	@ (8009780 <tcp_split_unsent_seg+0x27c>)
 8009594:	f004 f87c 	bl	800d690 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	7a9b      	ldrb	r3, [r3, #10]
 800959c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	891a      	ldrh	r2, [r3, #8]
 80095ae:	887b      	ldrh	r3, [r7, #2]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	89bb      	ldrh	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80095c2:	4619      	mov	r1, r3
 80095c4:	2036      	movs	r0, #54	@ 0x36
 80095c6:	f7fb facf 	bl	8004b68 <pbuf_alloc>
 80095ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 80b7 	beq.w	8009742 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	891a      	ldrh	r2, [r3, #8]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	891b      	ldrh	r3, [r3, #8]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	4413      	add	r3, r2
 80095e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	6858      	ldr	r0, [r3, #4]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	18d1      	adds	r1, r2, r3
 80095f4:	897b      	ldrh	r3, [r7, #10]
 80095f6:	89ba      	ldrh	r2, [r7, #12]
 80095f8:	f7fb ff84 	bl	8005504 <pbuf_copy_partial>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	89bb      	ldrh	r3, [r7, #12]
 8009602:	4293      	cmp	r3, r2
 8009604:	f040 809f 	bne.w	8009746 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	899b      	ldrh	r3, [r3, #12]
 800960e:	b29b      	uxth	r3, r3
 8009610:	4618      	mov	r0, r3
 8009612:	f7fa fa2f 	bl	8003a74 <lwip_htons>
 8009616:	4603      	mov	r3, r0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800961e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009620:	2300      	movs	r3, #0
 8009622:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009624:	7efb      	ldrb	r3, [r7, #27]
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800962e:	7efb      	ldrb	r3, [r7, #27]
 8009630:	f023 0308 	bic.w	r3, r3, #8
 8009634:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009636:	7ebb      	ldrb	r3, [r7, #26]
 8009638:	f043 0308 	orr.w	r3, r3, #8
 800963c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800963e:	7efb      	ldrb	r3, [r7, #27]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009648:	7efb      	ldrb	r3, [r7, #27]
 800964a:	f023 0301 	bic.w	r3, r3, #1
 800964e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009650:	7ebb      	ldrb	r3, [r7, #26]
 8009652:	f043 0301 	orr.w	r3, r3, #1
 8009656:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fa fa1d 	bl	8003a9e <lwip_htonl>
 8009664:	4602      	mov	r2, r0
 8009666:	887b      	ldrh	r3, [r7, #2]
 8009668:	18d1      	adds	r1, r2, r3
 800966a:	7eba      	ldrb	r2, [r7, #26]
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	460b      	mov	r3, r1
 8009672:	6939      	ldr	r1, [r7, #16]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff fea9 	bl	80093cc <tcp_create_segment>
 800967a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d063      	beq.n	800974a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	4618      	mov	r0, r3
 8009688:	f7fb fdda 	bl	8005240 <pbuf_clen>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	b29a      	uxth	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	6858      	ldr	r0, [r3, #4]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	891a      	ldrh	r2, [r3, #8]
 80096aa:	89bb      	ldrh	r3, [r7, #12]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4619      	mov	r1, r3
 80096b2:	f7fb fbb7 	bl	8004e24 <pbuf_realloc>
  useg->len -= remainder;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	891a      	ldrh	r2, [r3, #8]
 80096ba:	89bb      	ldrh	r3, [r7, #12]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	b29a      	uxth	r2, r3
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	899b      	ldrh	r3, [r3, #12]
 80096ca:	b29c      	uxth	r4, r3
 80096cc:	7efb      	ldrb	r3, [r7, #27]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fa f9cf 	bl	8003a74 <lwip_htons>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	4322      	orrs	r2, r4
 80096e0:	b292      	uxth	r2, r2
 80096e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fb fda9 	bl	8005240 <pbuf_clen>
 80096ee:	4603      	mov	r3, r0
 80096f0:	461a      	mov	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80096f8:	4413      	add	r3, r2
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fb fd9a 	bl	8005240 <pbuf_clen>
 800970c:	4603      	mov	r3, r0
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009716:	4413      	add	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d103      	bne.n	800973e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	e016      	b.n	8009770 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009742:	bf00      	nop
 8009744:	e002      	b.n	800974c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009746:	bf00      	nop
 8009748:	e000      	b.n	800974c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800974a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d006      	beq.n	8009760 <tcp_split_unsent_seg+0x25c>
 8009752:	4b09      	ldr	r3, [pc, #36]	@ (8009778 <tcp_split_unsent_seg+0x274>)
 8009754:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8009758:	490d      	ldr	r1, [pc, #52]	@ (8009790 <tcp_split_unsent_seg+0x28c>)
 800975a:	4809      	ldr	r0, [pc, #36]	@ (8009780 <tcp_split_unsent_seg+0x27c>)
 800975c:	f003 ff98 	bl	800d690 <iprintf>
  if (p != NULL) {
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009766:	6938      	ldr	r0, [r7, #16]
 8009768:	f7fb fce2 	bl	8005130 <pbuf_free>
  }

  return ERR_MEM;
 800976c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009770:	4618      	mov	r0, r3
 8009772:	3724      	adds	r7, #36	@ 0x24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd90      	pop	{r4, r7, pc}
 8009778:	0800fb70 	.word	0x0800fb70
 800977c:	0800ff04 	.word	0x0800ff04
 8009780:	0800fbc4 	.word	0x0800fbc4
 8009784:	0800ff28 	.word	0x0800ff28
 8009788:	0800ff4c 	.word	0x0800ff4c
 800978c:	0800ff5c 	.word	0x0800ff5c
 8009790:	0800ff6c 	.word	0x0800ff6c

08009794 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009794:	b590      	push	{r4, r7, lr}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <tcp_send_fin+0x1c>
 80097a2:	4b21      	ldr	r3, [pc, #132]	@ (8009828 <tcp_send_fin+0x94>)
 80097a4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80097a8:	4920      	ldr	r1, [pc, #128]	@ (800982c <tcp_send_fin+0x98>)
 80097aa:	4821      	ldr	r0, [pc, #132]	@ (8009830 <tcp_send_fin+0x9c>)
 80097ac:	f003 ff70 	bl	800d690 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d02e      	beq.n	8009816 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	e002      	b.n	80097c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f8      	bne.n	80097c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	899b      	ldrh	r3, [r3, #12]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fa f94c 	bl	8003a74 <lwip_htons>
 80097dc:	4603      	mov	r3, r0
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d116      	bne.n	8009816 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	899b      	ldrh	r3, [r3, #12]
 80097ee:	b29c      	uxth	r4, r3
 80097f0:	2001      	movs	r0, #1
 80097f2:	f7fa f93f 	bl	8003a74 <lwip_htons>
 80097f6:	4603      	mov	r3, r0
 80097f8:	461a      	mov	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	4322      	orrs	r2, r4
 8009800:	b292      	uxth	r2, r2
 8009802:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	8b5b      	ldrh	r3, [r3, #26]
 8009808:	f043 0320 	orr.w	r3, r3, #32
 800980c:	b29a      	uxth	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e004      	b.n	8009820 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009816:	2101      	movs	r1, #1
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f80b 	bl	8009834 <tcp_enqueue_flags>
 800981e:	4603      	mov	r3, r0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	bd90      	pop	{r4, r7, pc}
 8009828:	0800fb70 	.word	0x0800fb70
 800982c:	0800ff78 	.word	0x0800ff78
 8009830:	0800fbc4 	.word	0x0800fbc4

08009834 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08a      	sub	sp, #40	@ 0x28
 8009838:	af02      	add	r7, sp, #8
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <tcp_enqueue_flags+0x2c>
 8009852:	4b67      	ldr	r3, [pc, #412]	@ (80099f0 <tcp_enqueue_flags+0x1bc>)
 8009854:	f240 4211 	movw	r2, #1041	@ 0x411
 8009858:	4966      	ldr	r1, [pc, #408]	@ (80099f4 <tcp_enqueue_flags+0x1c0>)
 800985a:	4867      	ldr	r0, [pc, #412]	@ (80099f8 <tcp_enqueue_flags+0x1c4>)
 800985c:	f003 ff18 	bl	800d690 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d106      	bne.n	8009874 <tcp_enqueue_flags+0x40>
 8009866:	4b62      	ldr	r3, [pc, #392]	@ (80099f0 <tcp_enqueue_flags+0x1bc>)
 8009868:	f240 4213 	movw	r2, #1043	@ 0x413
 800986c:	4963      	ldr	r1, [pc, #396]	@ (80099fc <tcp_enqueue_flags+0x1c8>)
 800986e:	4862      	ldr	r0, [pc, #392]	@ (80099f8 <tcp_enqueue_flags+0x1c4>)
 8009870:	f003 ff0e 	bl	800d690 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800987e:	2301      	movs	r3, #1
 8009880:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009882:	7ffb      	ldrb	r3, [r7, #31]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	b29b      	uxth	r3, r3
 8009892:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009896:	4619      	mov	r1, r3
 8009898:	2036      	movs	r0, #54	@ 0x36
 800989a:	f7fb f965 	bl	8004b68 <pbuf_alloc>
 800989e:	6138      	str	r0, [r7, #16]
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8b5b      	ldrh	r3, [r3, #26]
 80098aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80098b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098b8:	e095      	b.n	80099e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	895a      	ldrh	r2, [r3, #10]
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d206      	bcs.n	80098d4 <tcp_enqueue_flags+0xa0>
 80098c6:	4b4a      	ldr	r3, [pc, #296]	@ (80099f0 <tcp_enqueue_flags+0x1bc>)
 80098c8:	f240 4239 	movw	r2, #1081	@ 0x439
 80098cc:	494c      	ldr	r1, [pc, #304]	@ (8009a00 <tcp_enqueue_flags+0x1cc>)
 80098ce:	484a      	ldr	r0, [pc, #296]	@ (80099f8 <tcp_enqueue_flags+0x1c4>)
 80098d0:	f003 fede 	bl	800d690 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80098d8:	78fa      	ldrb	r2, [r7, #3]
 80098da:	7ffb      	ldrb	r3, [r7, #31]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	460b      	mov	r3, r1
 80098e0:	6939      	ldr	r1, [r7, #16]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff fd72 	bl	80093cc <tcp_create_segment>
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	8b5b      	ldrh	r3, [r3, #26]
 80098f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009902:	e070      	b.n	80099e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d006      	beq.n	800991e <tcp_enqueue_flags+0xea>
 8009910:	4b37      	ldr	r3, [pc, #220]	@ (80099f0 <tcp_enqueue_flags+0x1bc>)
 8009912:	f240 4242 	movw	r2, #1090	@ 0x442
 8009916:	493b      	ldr	r1, [pc, #236]	@ (8009a04 <tcp_enqueue_flags+0x1d0>)
 8009918:	4837      	ldr	r0, [pc, #220]	@ (80099f8 <tcp_enqueue_flags+0x1c4>)
 800991a:	f003 feb9 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	891b      	ldrh	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <tcp_enqueue_flags+0x100>
 8009926:	4b32      	ldr	r3, [pc, #200]	@ (80099f0 <tcp_enqueue_flags+0x1bc>)
 8009928:	f240 4243 	movw	r2, #1091	@ 0x443
 800992c:	4936      	ldr	r1, [pc, #216]	@ (8009a08 <tcp_enqueue_flags+0x1d4>)
 800992e:	4832      	ldr	r0, [pc, #200]	@ (80099f8 <tcp_enqueue_flags+0x1c4>)
 8009930:	f003 feae 	bl	800d690 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009942:	e00d      	b.n	8009960 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009948:	61bb      	str	r3, [r7, #24]
 800994a:	e002      	b.n	8009952 <tcp_enqueue_flags+0x11e>
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	61bb      	str	r3, [r7, #24]
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f8      	bne.n	800994c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <tcp_enqueue_flags+0x148>
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d004      	beq.n	8009986 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009986:	78fb      	ldrb	r3, [r7, #3]
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8b5b      	ldrh	r3, [r3, #26]
 8009994:	f043 0320 	orr.w	r3, r3, #32
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fb fc4c 	bl	8005240 <pbuf_clen>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80099b2:	4413      	add	r3, r2
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00e      	beq.n	80099e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <tcp_enqueue_flags+0x1b0>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <tcp_enqueue_flags+0x1b0>
 80099d6:	4b06      	ldr	r3, [pc, #24]	@ (80099f0 <tcp_enqueue_flags+0x1bc>)
 80099d8:	f240 4265 	movw	r2, #1125	@ 0x465
 80099dc:	490b      	ldr	r1, [pc, #44]	@ (8009a0c <tcp_enqueue_flags+0x1d8>)
 80099de:	4806      	ldr	r0, [pc, #24]	@ (80099f8 <tcp_enqueue_flags+0x1c4>)
 80099e0:	f003 fe56 	bl	800d690 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	0800fb70 	.word	0x0800fb70
 80099f4:	0800ff94 	.word	0x0800ff94
 80099f8:	0800fbc4 	.word	0x0800fbc4
 80099fc:	0800ffec 	.word	0x0800ffec
 8009a00:	0801000c 	.word	0x0801000c
 8009a04:	08010048 	.word	0x08010048
 8009a08:	08010060 	.word	0x08010060
 8009a0c:	0801008c 	.word	0x0801008c

08009a10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009a10:	b5b0      	push	{r4, r5, r7, lr}
 8009a12:	b08a      	sub	sp, #40	@ 0x28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <tcp_output+0x1c>
 8009a1e:	4b8a      	ldr	r3, [pc, #552]	@ (8009c48 <tcp_output+0x238>)
 8009a20:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8009a24:	4989      	ldr	r1, [pc, #548]	@ (8009c4c <tcp_output+0x23c>)
 8009a26:	488a      	ldr	r0, [pc, #552]	@ (8009c50 <tcp_output+0x240>)
 8009a28:	f003 fe32 	bl	800d690 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7d1b      	ldrb	r3, [r3, #20]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d106      	bne.n	8009a42 <tcp_output+0x32>
 8009a34:	4b84      	ldr	r3, [pc, #528]	@ (8009c48 <tcp_output+0x238>)
 8009a36:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8009a3a:	4986      	ldr	r1, [pc, #536]	@ (8009c54 <tcp_output+0x244>)
 8009a3c:	4884      	ldr	r0, [pc, #528]	@ (8009c50 <tcp_output+0x240>)
 8009a3e:	f003 fe27 	bl	800d690 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009a42:	4b85      	ldr	r3, [pc, #532]	@ (8009c58 <tcp_output+0x248>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d101      	bne.n	8009a50 <tcp_output+0x40>
    return ERR_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e1ce      	b.n	8009dee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	bf28      	it	cs
 8009a60:	4613      	movcs	r3, r2
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8b5b      	ldrh	r3, [r3, #26]
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 81aa 	beq.w	8009dd4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fdcb 	bl	800a61c <tcp_send_empty_ack>
 8009a86:	4603      	mov	r3, r0
 8009a88:	e1b1      	b.n	8009dee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	461a      	mov	r2, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fc7e 	bl	8009394 <tcp_route>
 8009a98:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <tcp_output+0x96>
    return ERR_RTE;
 8009aa0:	f06f 0303 	mvn.w	r3, #3
 8009aa4:	e1a3      	b.n	8009dee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <tcp_output+0xa4>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d111      	bne.n	8009ad8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <tcp_output+0xb0>
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	3304      	adds	r3, #4
 8009abe:	e000      	b.n	8009ac2 <tcp_output+0xb2>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d102      	bne.n	8009ad0 <tcp_output+0xc0>
      return ERR_RTE;
 8009aca:	f06f 0303 	mvn.w	r3, #3
 8009ace:	e18e      	b.n	8009dee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f9 ffdd 	bl	8003a9e <lwip_htonl>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aee:	8912      	ldrh	r2, [r2, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d227      	bcs.n	8009b48 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009afe:	461a      	mov	r2, r3
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d114      	bne.n	8009b30 <tcp_output+0x120>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d110      	bne.n	8009b30 <tcp_output+0x120>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10b      	bne.n	8009b30 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8b5b      	ldrh	r3, [r3, #26]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 814d 	beq.w	8009dd8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fd6c 	bl	800a61c <tcp_send_empty_ack>
 8009b44:	4603      	mov	r3, r0
 8009b46:	e152      	b.n	8009dee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b54:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 811c 	beq.w	8009d96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009b5e:	e002      	b.n	8009b66 <tcp_output+0x156>
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	623b      	str	r3, [r7, #32]
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1f8      	bne.n	8009b60 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009b6e:	e112      	b.n	8009d96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	899b      	ldrh	r3, [r3, #12]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f9 ff7b 	bl	8003a74 <lwip_htons>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d006      	beq.n	8009b98 <tcp_output+0x188>
 8009b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c48 <tcp_output+0x238>)
 8009b8c:	f240 5236 	movw	r2, #1334	@ 0x536
 8009b90:	4932      	ldr	r1, [pc, #200]	@ (8009c5c <tcp_output+0x24c>)
 8009b92:	482f      	ldr	r0, [pc, #188]	@ (8009c50 <tcp_output+0x240>)
 8009b94:	f003 fd7c 	bl	800d690 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01f      	beq.n	8009be0 <tcp_output+0x1d0>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	8b5b      	ldrh	r3, [r3, #26]
 8009ba4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d119      	bne.n	8009be0 <tcp_output+0x1d0>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <tcp_output+0x1bc>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d110      	bne.n	8009be0 <tcp_output+0x1d0>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bc2:	891a      	ldrh	r2, [r3, #8]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d209      	bcs.n	8009be0 <tcp_output+0x1d0>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d004      	beq.n	8009be0 <tcp_output+0x1d0>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	d901      	bls.n	8009be4 <tcp_output+0x1d4>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e000      	b.n	8009be6 <tcp_output+0x1d6>
 8009be4:	2300      	movs	r3, #0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	8b5b      	ldrh	r3, [r3, #26]
 8009bee:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 80e4 	beq.w	8009dc0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7d1b      	ldrb	r3, [r3, #20]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d00d      	beq.n	8009c1c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	899b      	ldrh	r3, [r3, #12]
 8009c06:	b29c      	uxth	r4, r3
 8009c08:	2010      	movs	r0, #16
 8009c0a:	f7f9 ff33 	bl	8003a74 <lwip_htons>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	4322      	orrs	r2, r4
 8009c18:	b292      	uxth	r2, r2
 8009c1a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009c1c:	697a      	ldr	r2, [r7, #20]
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c22:	f000 f909 	bl	8009e38 <tcp_output_segment>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d016      	beq.n	8009c60 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	8b5b      	ldrh	r3, [r3, #26]
 8009c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	835a      	strh	r2, [r3, #26]
      return err;
 8009c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c44:	e0d3      	b.n	8009dee <tcp_output+0x3de>
 8009c46:	bf00      	nop
 8009c48:	0800fb70 	.word	0x0800fb70
 8009c4c:	080100b4 	.word	0x080100b4
 8009c50:	0800fbc4 	.word	0x0800fbc4
 8009c54:	080100cc 	.word	0x080100cc
 8009c58:	20006984 	.word	0x20006984
 8009c5c:	080100f4 	.word	0x080100f4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7d1b      	ldrb	r3, [r3, #20]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d006      	beq.n	8009c7e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8b5b      	ldrh	r3, [r3, #26]
 8009c74:	f023 0303 	bic.w	r3, r3, #3
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7f9 ff0a 	bl	8003a9e <lwip_htonl>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	891b      	ldrh	r3, [r3, #8]
 8009c90:	461d      	mov	r5, r3
 8009c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	899b      	ldrh	r3, [r3, #12]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f9 feea 	bl	8003a74 <lwip_htons>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <tcp_output+0x2a0>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e000      	b.n	8009cb2 <tcp_output+0x2a2>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	442b      	add	r3, r5
 8009cb4:	4423      	add	r3, r4
 8009cb6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da02      	bge.n	8009cca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	891b      	ldrh	r3, [r3, #8]
 8009cce:	461c      	mov	r4, r3
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	899b      	ldrh	r3, [r3, #12]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7f9 fecb 	bl	8003a74 <lwip_htons>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <tcp_output+0x2de>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <tcp_output+0x2e0>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4423      	add	r3, r4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d049      	beq.n	8009d8a <tcp_output+0x37a>
      seg->next = NULL;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <tcp_output+0x300>
        pcb->unacked = seg;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d08:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	623b      	str	r3, [r7, #32]
 8009d0e:	e03f      	b.n	8009d90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f9 fec1 	bl	8003a9e <lwip_htonl>
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7f9 feba 	bl	8003a9e <lwip_htonl>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	1ae3      	subs	r3, r4, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da24      	bge.n	8009d7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3370      	adds	r3, #112	@ 0x70
 8009d36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d38:	e002      	b.n	8009d40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d011      	beq.n	8009d6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f9 fea4 	bl	8003a9e <lwip_htonl>
 8009d56:	4604      	mov	r4, r0
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f9 fe9d 	bl	8003a9e <lwip_htonl>
 8009d64:	4603      	mov	r3, r0
 8009d66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dbe6      	blt.n	8009d3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e009      	b.n	8009d90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	623b      	str	r3, [r7, #32]
 8009d88:	e002      	b.n	8009d90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009d8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d8c:	f7fc fc45 	bl	800661a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d94:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d012      	beq.n	8009dc2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f9 fe7b 	bl	8003a9e <lwip_htonl>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009db2:	8912      	ldrh	r2, [r2, #8]
 8009db4:	4413      	add	r3, r2
  while (seg != NULL &&
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	f4bf aed9 	bcs.w	8009b70 <tcp_output+0x160>
 8009dbe:	e000      	b.n	8009dc2 <tcp_output+0x3b2>
      break;
 8009dc0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d108      	bne.n	8009ddc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8009dd2:	e004      	b.n	8009dde <tcp_output+0x3ce>
    goto output_done;
 8009dd4:	bf00      	nop
 8009dd6:	e002      	b.n	8009dde <tcp_output+0x3ce>
    goto output_done;
 8009dd8:	bf00      	nop
 8009dda:	e000      	b.n	8009dde <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009ddc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8b5b      	ldrh	r3, [r3, #26]
 8009de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3728      	adds	r7, #40	@ 0x28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bdb0      	pop	{r4, r5, r7, pc}
 8009df6:	bf00      	nop

08009df8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <tcp_output_segment_busy+0x1c>
 8009e06:	4b09      	ldr	r3, [pc, #36]	@ (8009e2c <tcp_output_segment_busy+0x34>)
 8009e08:	f240 529a 	movw	r2, #1434	@ 0x59a
 8009e0c:	4908      	ldr	r1, [pc, #32]	@ (8009e30 <tcp_output_segment_busy+0x38>)
 8009e0e:	4809      	ldr	r0, [pc, #36]	@ (8009e34 <tcp_output_segment_busy+0x3c>)
 8009e10:	f003 fc3e 	bl	800d690 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	7b9b      	ldrb	r3, [r3, #14]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d001      	beq.n	8009e22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	0800fb70 	.word	0x0800fb70
 8009e30:	0801010c 	.word	0x0801010c
 8009e34:	0800fbc4 	.word	0x0800fbc4

08009e38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009e38:	b5b0      	push	{r4, r5, r7, lr}
 8009e3a:	b08c      	sub	sp, #48	@ 0x30
 8009e3c:	af04      	add	r7, sp, #16
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <tcp_output_segment+0x20>
 8009e4a:	4b64      	ldr	r3, [pc, #400]	@ (8009fdc <tcp_output_segment+0x1a4>)
 8009e4c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8009e50:	4963      	ldr	r1, [pc, #396]	@ (8009fe0 <tcp_output_segment+0x1a8>)
 8009e52:	4864      	ldr	r0, [pc, #400]	@ (8009fe4 <tcp_output_segment+0x1ac>)
 8009e54:	f003 fc1c 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <tcp_output_segment+0x34>
 8009e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8009fdc <tcp_output_segment+0x1a4>)
 8009e60:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8009e64:	4960      	ldr	r1, [pc, #384]	@ (8009fe8 <tcp_output_segment+0x1b0>)
 8009e66:	485f      	ldr	r0, [pc, #380]	@ (8009fe4 <tcp_output_segment+0x1ac>)
 8009e68:	f003 fc12 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <tcp_output_segment+0x48>
 8009e72:	4b5a      	ldr	r3, [pc, #360]	@ (8009fdc <tcp_output_segment+0x1a4>)
 8009e74:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8009e78:	495c      	ldr	r1, [pc, #368]	@ (8009fec <tcp_output_segment+0x1b4>)
 8009e7a:	485a      	ldr	r0, [pc, #360]	@ (8009fe4 <tcp_output_segment+0x1ac>)
 8009e7c:	f003 fc08 	bl	800d690 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff ffb9 	bl	8009df8 <tcp_output_segment_busy>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e0a1      	b.n	8009fd4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	68dc      	ldr	r4, [r3, #12]
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7f9 fe00 	bl	8003a9e <lwip_htonl>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	68dc      	ldr	r4, [r3, #12]
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7f9 fde2 	bl	8003a74 <lwip_htons>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8009ebc:	441a      	add	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	3314      	adds	r3, #20
 8009ec8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	7a9b      	ldrb	r3, [r3, #10]
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d015      	beq.n	8009f02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	461a      	mov	r2, r3
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8009ee2:	f7fc fe91 	bl	8006c08 <tcp_eff_send_mss_netif>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009eea:	8b7b      	ldrh	r3, [r7, #26]
 8009eec:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7f9 fdd4 	bl	8003a9e <lwip_htonl>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	3304      	adds	r3, #4
 8009f00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	da02      	bge.n	8009f12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10c      	bne.n	8009f34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009f1a:	4b35      	ldr	r3, [pc, #212]	@ (8009ff0 <tcp_output_segment+0x1b8>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7f9 fdb8 	bl	8003a9e <lwip_htonl>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	68da      	ldr	r2, [r3, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	8959      	ldrh	r1, [r3, #10]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	8b3a      	ldrh	r2, [r7, #24]
 8009f4e:	1a8a      	subs	r2, r1, r2
 8009f50:	b292      	uxth	r2, r2
 8009f52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	8919      	ldrh	r1, [r3, #8]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	8b3a      	ldrh	r2, [r7, #24]
 8009f60:	1a8a      	subs	r2, r1, r2
 8009f62:	b292      	uxth	r2, r2
 8009f64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	68d2      	ldr	r2, [r2, #12]
 8009f6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	741a      	strb	r2, [r3, #16]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	7a9b      	ldrb	r3, [r3, #10]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <tcp_output_segment+0x158>
 8009f8c:	2318      	movs	r3, #24
 8009f8e:	e000      	b.n	8009f92 <tcp_output_segment+0x15a>
 8009f90:	2314      	movs	r3, #20
 8009f92:	4413      	add	r3, r2
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d006      	beq.n	8009fa8 <tcp_output_segment+0x170>
 8009f9a:	4b10      	ldr	r3, [pc, #64]	@ (8009fdc <tcp_output_segment+0x1a4>)
 8009f9c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8009fa0:	4914      	ldr	r1, [pc, #80]	@ (8009ff4 <tcp_output_segment+0x1bc>)
 8009fa2:	4810      	ldr	r0, [pc, #64]	@ (8009fe4 <tcp_output_segment+0x1ac>)
 8009fa4:	f003 fb74 	bl	800d690 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6858      	ldr	r0, [r3, #4]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	1d1c      	adds	r4, r3, #4
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	7add      	ldrb	r5, [r3, #11]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	7a9b      	ldrb	r3, [r3, #10]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	9202      	str	r2, [sp, #8]
 8009fbe:	2206      	movs	r2, #6
 8009fc0:	9201      	str	r2, [sp, #4]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	f002 fa34 	bl	800c434 <ip4_output_if>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3720      	adds	r7, #32
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bdb0      	pop	{r4, r5, r7, pc}
 8009fdc:	0800fb70 	.word	0x0800fb70
 8009fe0:	08010134 	.word	0x08010134
 8009fe4:	0800fbc4 	.word	0x0800fbc4
 8009fe8:	08010154 	.word	0x08010154
 8009fec:	08010174 	.word	0x08010174
 8009ff0:	20006938 	.word	0x20006938
 8009ff4:	08010198 	.word	0x08010198

08009ff8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009ff8:	b5b0      	push	{r4, r5, r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <tcp_rexmit_rto_prepare+0x1c>
 800a006:	4b31      	ldr	r3, [pc, #196]	@ (800a0cc <tcp_rexmit_rto_prepare+0xd4>)
 800a008:	f240 6263 	movw	r2, #1635	@ 0x663
 800a00c:	4930      	ldr	r1, [pc, #192]	@ (800a0d0 <tcp_rexmit_rto_prepare+0xd8>)
 800a00e:	4831      	ldr	r0, [pc, #196]	@ (800a0d4 <tcp_rexmit_rto_prepare+0xdc>)
 800a010:	f003 fb3e 	bl	800d690 <iprintf>

  if (pcb->unacked == NULL) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a01c:	f06f 0305 	mvn.w	r3, #5
 800a020:	e050      	b.n	800a0c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	e00b      	b.n	800a042 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff fee4 	bl	8009df8 <tcp_output_segment_busy>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a036:	f06f 0305 	mvn.w	r3, #5
 800a03a:	e043      	b.n	800a0c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1ef      	bne.n	800a02a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff fed4 	bl	8009df8 <tcp_output_segment_busy>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a056:	f06f 0305 	mvn.w	r3, #5
 800a05a:	e033      	b.n	800a0c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8b5b      	ldrh	r3, [r3, #26]
 800a076:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	4618      	mov	r0, r3
 800a088:	f7f9 fd09 	bl	8003a9e <lwip_htonl>
 800a08c:	4604      	mov	r4, r0
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	891b      	ldrh	r3, [r3, #8]
 800a092:	461d      	mov	r5, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	899b      	ldrh	r3, [r3, #12]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7f9 fce9 	bl	8003a74 <lwip_htons>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <tcp_rexmit_rto_prepare+0xba>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <tcp_rexmit_rto_prepare+0xbc>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	442b      	add	r3, r5
 800a0b6:	18e2      	adds	r2, r4, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a0cc:	0800fb70 	.word	0x0800fb70
 800a0d0:	080101ac 	.word	0x080101ac
 800a0d4:	0800fbc4 	.word	0x0800fbc4

0800a0d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <tcp_rexmit_rto_commit+0x1c>
 800a0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a11c <tcp_rexmit_rto_commit+0x44>)
 800a0e8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a0ec:	490c      	ldr	r1, [pc, #48]	@ (800a120 <tcp_rexmit_rto_commit+0x48>)
 800a0ee:	480d      	ldr	r0, [pc, #52]	@ (800a124 <tcp_rexmit_rto_commit+0x4c>)
 800a0f0:	f003 face 	bl	800d690 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0fa:	2bff      	cmp	r3, #255	@ 0xff
 800a0fc:	d007      	beq.n	800a10e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a104:	3301      	adds	r3, #1
 800a106:	b2da      	uxtb	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff fc7e 	bl	8009a10 <tcp_output>
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	0800fb70 	.word	0x0800fb70
 800a120:	080101d0 	.word	0x080101d0
 800a124:	0800fbc4 	.word	0x0800fbc4

0800a128 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <tcp_rexmit_rto+0x1c>
 800a136:	4b0a      	ldr	r3, [pc, #40]	@ (800a160 <tcp_rexmit_rto+0x38>)
 800a138:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800a13c:	4909      	ldr	r1, [pc, #36]	@ (800a164 <tcp_rexmit_rto+0x3c>)
 800a13e:	480a      	ldr	r0, [pc, #40]	@ (800a168 <tcp_rexmit_rto+0x40>)
 800a140:	f003 faa6 	bl	800d690 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff ff57 	bl	8009ff8 <tcp_rexmit_rto_prepare>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff ffc1 	bl	800a0d8 <tcp_rexmit_rto_commit>
  }
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	0800fb70 	.word	0x0800fb70
 800a164:	080101f4 	.word	0x080101f4
 800a168:	0800fbc4 	.word	0x0800fbc4

0800a16c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a16c:	b590      	push	{r4, r7, lr}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <tcp_rexmit+0x1c>
 800a17a:	4b2f      	ldr	r3, [pc, #188]	@ (800a238 <tcp_rexmit+0xcc>)
 800a17c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800a180:	492e      	ldr	r1, [pc, #184]	@ (800a23c <tcp_rexmit+0xd0>)
 800a182:	482f      	ldr	r0, [pc, #188]	@ (800a240 <tcp_rexmit+0xd4>)
 800a184:	f003 fa84 	bl	800d690 <iprintf>

  if (pcb->unacked == NULL) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d102      	bne.n	800a196 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a190:	f06f 0305 	mvn.w	r3, #5
 800a194:	e04c      	b.n	800a230 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a19a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a19c:	68b8      	ldr	r0, [r7, #8]
 800a19e:	f7ff fe2b 	bl	8009df8 <tcp_output_segment_busy>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a1a8:	f06f 0305 	mvn.w	r3, #5
 800a1ac:	e040      	b.n	800a230 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	336c      	adds	r3, #108	@ 0x6c
 800a1ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a1bc:	e002      	b.n	800a1c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d011      	beq.n	800a1f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7f9 fc62 	bl	8003a9e <lwip_htonl>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f9 fc5b 	bl	8003a9e <lwip_htonl>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	dbe6      	blt.n	800a1be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a214:	2bff      	cmp	r3, #255	@ 0xff
 800a216:	d007      	beq.n	800a228 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a21e:	3301      	adds	r3, #1
 800a220:	b2da      	uxtb	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	bd90      	pop	{r4, r7, pc}
 800a238:	0800fb70 	.word	0x0800fb70
 800a23c:	08010210 	.word	0x08010210
 800a240:	0800fbc4 	.word	0x0800fbc4

0800a244 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <tcp_rexmit_fast+0x1c>
 800a252:	4b2a      	ldr	r3, [pc, #168]	@ (800a2fc <tcp_rexmit_fast+0xb8>)
 800a254:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800a258:	4929      	ldr	r1, [pc, #164]	@ (800a300 <tcp_rexmit_fast+0xbc>)
 800a25a:	482a      	ldr	r0, [pc, #168]	@ (800a304 <tcp_rexmit_fast+0xc0>)
 800a25c:	f003 fa18 	bl	800d690 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a264:	2b00      	cmp	r3, #0
 800a266:	d045      	beq.n	800a2f4 <tcp_rexmit_fast+0xb0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	8b5b      	ldrh	r3, [r3, #26]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d13f      	bne.n	800a2f4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff ff79 	bl	800a16c <tcp_rexmit>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d139      	bne.n	800a2f4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a28c:	4293      	cmp	r3, r2
 800a28e:	bf28      	it	cs
 800a290:	4613      	movcs	r3, r2
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	da00      	bge.n	800a29a <tcp_rexmit_fast+0x56>
 800a298:	3301      	adds	r3, #1
 800a29a:	105b      	asrs	r3, r3, #1
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d206      	bcs.n	800a2c4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	0049      	lsls	r1, r1, #1
 800a2d2:	440b      	add	r3, r1
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	4413      	add	r3, r2
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8b5b      	ldrh	r3, [r3, #26]
 800a2e4:	f043 0304 	orr.w	r3, r3, #4
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800a2f4:	bf00      	nop
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	0800fb70 	.word	0x0800fb70
 800a300:	08010228 	.word	0x08010228
 800a304:	0800fbc4 	.word	0x0800fbc4

0800a308 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	607b      	str	r3, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	817b      	strh	r3, [r7, #10]
 800a316:	4613      	mov	r3, r2
 800a318:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a31a:	897a      	ldrh	r2, [r7, #10]
 800a31c:	893b      	ldrh	r3, [r7, #8]
 800a31e:	4413      	add	r3, r2
 800a320:	b29b      	uxth	r3, r3
 800a322:	3314      	adds	r3, #20
 800a324:	b29b      	uxth	r3, r3
 800a326:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a32a:	4619      	mov	r1, r3
 800a32c:	2022      	movs	r0, #34	@ 0x22
 800a32e:	f7fa fc1b 	bl	8004b68 <pbuf_alloc>
 800a332:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04d      	beq.n	800a3d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a33a:	897b      	ldrh	r3, [r7, #10]
 800a33c:	3313      	adds	r3, #19
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	8952      	ldrh	r2, [r2, #10]
 800a342:	4293      	cmp	r3, r2
 800a344:	db06      	blt.n	800a354 <tcp_output_alloc_header_common+0x4c>
 800a346:	4b26      	ldr	r3, [pc, #152]	@ (800a3e0 <tcp_output_alloc_header_common+0xd8>)
 800a348:	f240 7223 	movw	r2, #1827	@ 0x723
 800a34c:	4925      	ldr	r1, [pc, #148]	@ (800a3e4 <tcp_output_alloc_header_common+0xdc>)
 800a34e:	4826      	ldr	r0, [pc, #152]	@ (800a3e8 <tcp_output_alloc_header_common+0xe0>)
 800a350:	f003 f99e 	bl	800d690 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a35a:	8c3b      	ldrh	r3, [r7, #32]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f9 fb89 	bl	8003a74 <lwip_htons>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a36a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f9 fb81 	bl	8003a74 <lwip_htons>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f7f9 fb8c 	bl	8003a9e <lwip_htonl>
 800a386:	4602      	mov	r2, r0
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a38c:	897b      	ldrh	r3, [r7, #10]
 800a38e:	089b      	lsrs	r3, r3, #2
 800a390:	b29b      	uxth	r3, r3
 800a392:	3305      	adds	r3, #5
 800a394:	b29b      	uxth	r3, r3
 800a396:	031b      	lsls	r3, r3, #12
 800a398:	b29a      	uxth	r2, r3
 800a39a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f9 fb65 	bl	8003a74 <lwip_htons>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a3b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7f9 fb5d 	bl	8003a74 <lwip_htons>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	461a      	mov	r2, r3
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	741a      	strb	r2, [r3, #16]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	749a      	strb	r2, [r3, #18]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a3d6:	697b      	ldr	r3, [r7, #20]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	0800fb70 	.word	0x0800fb70
 800a3e4:	08010248 	.word	0x08010248
 800a3e8:	0800fbc4 	.word	0x0800fbc4

0800a3ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a3ec:	b5b0      	push	{r4, r5, r7, lr}
 800a3ee:	b08a      	sub	sp, #40	@ 0x28
 800a3f0:	af04      	add	r7, sp, #16
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	607b      	str	r3, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	817b      	strh	r3, [r7, #10]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <tcp_output_alloc_header+0x26>
 800a404:	4b15      	ldr	r3, [pc, #84]	@ (800a45c <tcp_output_alloc_header+0x70>)
 800a406:	f240 7242 	movw	r2, #1858	@ 0x742
 800a40a:	4915      	ldr	r1, [pc, #84]	@ (800a460 <tcp_output_alloc_header+0x74>)
 800a40c:	4815      	ldr	r0, [pc, #84]	@ (800a464 <tcp_output_alloc_header+0x78>)
 800a40e:	f003 f93f 	bl	800d690 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8adb      	ldrh	r3, [r3, #22]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	8b12      	ldrh	r2, [r2, #24]
 800a41e:	68f9      	ldr	r1, [r7, #12]
 800a420:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800a422:	893d      	ldrh	r5, [r7, #8]
 800a424:	897c      	ldrh	r4, [r7, #10]
 800a426:	9103      	str	r1, [sp, #12]
 800a428:	2110      	movs	r1, #16
 800a42a:	9102      	str	r1, [sp, #8]
 800a42c:	9201      	str	r2, [sp, #4]
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	462a      	mov	r2, r5
 800a434:	4621      	mov	r1, r4
 800a436:	f7ff ff67 	bl	800a308 <tcp_output_alloc_header_common>
 800a43a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d006      	beq.n	800a450 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a44a:	441a      	add	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800a450:	697b      	ldr	r3, [r7, #20]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bdb0      	pop	{r4, r5, r7, pc}
 800a45a:	bf00      	nop
 800a45c:	0800fb70 	.word	0x0800fb70
 800a460:	08010278 	.word	0x08010278
 800a464:	0800fbc4 	.word	0x0800fbc4

0800a468 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	4611      	mov	r1, r2
 800a474:	461a      	mov	r2, r3
 800a476:	460b      	mov	r3, r1
 800a478:	71fb      	strb	r3, [r7, #7]
 800a47a:	4613      	mov	r3, r2
 800a47c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d106      	bne.n	800a496 <tcp_output_fill_options+0x2e>
 800a488:	4b12      	ldr	r3, [pc, #72]	@ (800a4d4 <tcp_output_fill_options+0x6c>)
 800a48a:	f240 7256 	movw	r2, #1878	@ 0x756
 800a48e:	4912      	ldr	r1, [pc, #72]	@ (800a4d8 <tcp_output_fill_options+0x70>)
 800a490:	4812      	ldr	r0, [pc, #72]	@ (800a4dc <tcp_output_fill_options+0x74>)
 800a492:	f003 f8fd 	bl	800d690 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	3314      	adds	r3, #20
 800a4a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a4a2:	8bfb      	ldrh	r3, [r7, #30]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	4413      	add	r3, r2
 800a4b2:	3314      	adds	r3, #20
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d006      	beq.n	800a4cc <tcp_output_fill_options+0x64>
 800a4be:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <tcp_output_fill_options+0x6c>)
 800a4c0:	f240 7275 	movw	r2, #1909	@ 0x775
 800a4c4:	4906      	ldr	r1, [pc, #24]	@ (800a4e0 <tcp_output_fill_options+0x78>)
 800a4c6:	4805      	ldr	r0, [pc, #20]	@ (800a4dc <tcp_output_fill_options+0x74>)
 800a4c8:	f003 f8e2 	bl	800d690 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a4cc:	bf00      	nop
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	0800fb70 	.word	0x0800fb70
 800a4d8:	080102a0 	.word	0x080102a0
 800a4dc:	0800fbc4 	.word	0x0800fbc4
 800a4e0:	08010198 	.word	0x08010198

0800a4e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	@ 0x28
 800a4e8:	af04      	add	r7, sp, #16
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d106      	bne.n	800a506 <tcp_output_control_segment+0x22>
 800a4f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a56c <tcp_output_control_segment+0x88>)
 800a4fa:	f240 7287 	movw	r2, #1927	@ 0x787
 800a4fe:	491c      	ldr	r1, [pc, #112]	@ (800a570 <tcp_output_control_segment+0x8c>)
 800a500:	481c      	ldr	r0, [pc, #112]	@ (800a574 <tcp_output_control_segment+0x90>)
 800a502:	f003 f8c5 	bl	800d690 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7fe ff42 	bl	8009394 <tcp_route>
 800a510:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d102      	bne.n	800a51e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a518:	23fc      	movs	r3, #252	@ 0xfc
 800a51a:	75fb      	strb	r3, [r7, #23]
 800a51c:	e01c      	b.n	800a558 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d006      	beq.n	800a532 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	7adb      	ldrb	r3, [r3, #11]
 800a528:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	7a9b      	ldrb	r3, [r3, #10]
 800a52e:	757b      	strb	r3, [r7, #21]
 800a530:	e003      	b.n	800a53a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a532:	23ff      	movs	r3, #255	@ 0xff
 800a534:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a53a:	7dba      	ldrb	r2, [r7, #22]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	9302      	str	r3, [sp, #8]
 800a540:	2306      	movs	r3, #6
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	7d7b      	ldrb	r3, [r7, #21]
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	68b8      	ldr	r0, [r7, #8]
 800a550:	f001 ff70 	bl	800c434 <ip4_output_if>
 800a554:	4603      	mov	r3, r0
 800a556:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a558:	68b8      	ldr	r0, [r7, #8]
 800a55a:	f7fa fde9 	bl	8005130 <pbuf_free>
  return err;
 800a55e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	0800fb70 	.word	0x0800fb70
 800a570:	080102c8 	.word	0x080102c8
 800a574:	0800fbc4 	.word	0x0800fbc4

0800a578 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b08b      	sub	sp, #44	@ 0x2c
 800a57c:	af04      	add	r7, sp, #16
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <tcp_rst+0x22>
 800a58c:	4b1f      	ldr	r3, [pc, #124]	@ (800a60c <tcp_rst+0x94>)
 800a58e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800a592:	491f      	ldr	r1, [pc, #124]	@ (800a610 <tcp_rst+0x98>)
 800a594:	481f      	ldr	r0, [pc, #124]	@ (800a614 <tcp_rst+0x9c>)
 800a596:	f003 f87b 	bl	800d690 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <tcp_rst+0x36>
 800a5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a60c <tcp_rst+0x94>)
 800a5a2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800a5a6:	491c      	ldr	r1, [pc, #112]	@ (800a618 <tcp_rst+0xa0>)
 800a5a8:	481a      	ldr	r0, [pc, #104]	@ (800a614 <tcp_rst+0x9c>)
 800a5aa:	f003 f871 	bl	800d690 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a5b2:	f246 0308 	movw	r3, #24584	@ 0x6008
 800a5b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	b29c      	uxth	r4, r3
 800a5bc:	68b8      	ldr	r0, [r7, #8]
 800a5be:	f7f9 fa6e 	bl	8003a9e <lwip_htonl>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	8abb      	ldrh	r3, [r7, #20]
 800a5c6:	9303      	str	r3, [sp, #12]
 800a5c8:	2314      	movs	r3, #20
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4621      	mov	r1, r4
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fe94 	bl	800a308 <tcp_output_alloc_header_common>
 800a5e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00c      	beq.n	800a602 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	6939      	ldr	r1, [r7, #16]
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff ff3a 	bl	800a468 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	6939      	ldr	r1, [r7, #16]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7ff ff72 	bl	800a4e4 <tcp_output_control_segment>
 800a600:	e000      	b.n	800a604 <tcp_rst+0x8c>
    return;
 800a602:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a604:	371c      	adds	r7, #28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd90      	pop	{r4, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	0800fb70 	.word	0x0800fb70
 800a610:	080102f4 	.word	0x080102f4
 800a614:	0800fbc4 	.word	0x0800fbc4
 800a618:	08010310 	.word	0x08010310

0800a61c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <tcp_send_empty_ack+0x24>
 800a632:	4b28      	ldr	r3, [pc, #160]	@ (800a6d4 <tcp_send_empty_ack+0xb8>)
 800a634:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800a638:	4927      	ldr	r1, [pc, #156]	@ (800a6d8 <tcp_send_empty_ack+0xbc>)
 800a63a:	4828      	ldr	r0, [pc, #160]	@ (800a6dc <tcp_send_empty_ack+0xc0>)
 800a63c:	f003 f828 	bl	800d690 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	b2db      	uxtb	r3, r3
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a64c:	7d7b      	ldrb	r3, [r7, #21]
 800a64e:	b29c      	uxth	r4, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a654:	4618      	mov	r0, r3
 800a656:	f7f9 fa22 	bl	8003a9e <lwip_htonl>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2200      	movs	r2, #0
 800a65e:	4621      	mov	r1, r4
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fec3 	bl	800a3ec <tcp_output_alloc_header>
 800a666:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d109      	bne.n	800a682 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	8b5b      	ldrh	r3, [r3, #26]
 800a672:	f043 0303 	orr.w	r3, r3, #3
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a67c:	f06f 0301 	mvn.w	r3, #1
 800a680:	e023      	b.n	800a6ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a682:	7dbb      	ldrb	r3, [r7, #22]
 800a684:	7dfa      	ldrb	r2, [r7, #23]
 800a686:	6939      	ldr	r1, [r7, #16]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7ff feed 	bl	800a468 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3304      	adds	r3, #4
 800a694:	6939      	ldr	r1, [r7, #16]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff ff24 	bl	800a4e4 <tcp_output_control_segment>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8b5b      	ldrh	r3, [r3, #26]
 800a6ac:	f043 0303 	orr.w	r3, r3, #3
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	835a      	strh	r2, [r3, #26]
 800a6b6:	e006      	b.n	800a6c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8b5b      	ldrh	r3, [r3, #26]
 800a6bc:	f023 0303 	bic.w	r3, r3, #3
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	371c      	adds	r7, #28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd90      	pop	{r4, r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0800fb70 	.word	0x0800fb70
 800a6d8:	0801032c 	.word	0x0801032c
 800a6dc:	0800fbc4 	.word	0x0800fbc4

0800a6e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <tcp_keepalive+0x20>
 800a6f2:	4b18      	ldr	r3, [pc, #96]	@ (800a754 <tcp_keepalive+0x74>)
 800a6f4:	f640 0224 	movw	r2, #2084	@ 0x824
 800a6f8:	4917      	ldr	r1, [pc, #92]	@ (800a758 <tcp_keepalive+0x78>)
 800a6fa:	4818      	ldr	r0, [pc, #96]	@ (800a75c <tcp_keepalive+0x7c>)
 800a6fc:	f002 ffc8 	bl	800d690 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	b29c      	uxth	r4, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a708:	3b01      	subs	r3, #1
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7f9 f9c7 	bl	8003a9e <lwip_htonl>
 800a710:	4603      	mov	r3, r0
 800a712:	2200      	movs	r2, #0
 800a714:	4621      	mov	r1, r4
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fe68 	bl	800a3ec <tcp_output_alloc_header>
 800a71c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d102      	bne.n	800a72a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a728:	e010      	b.n	800a74c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	2200      	movs	r2, #0
 800a72e:	6939      	ldr	r1, [r7, #16]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff fe99 	bl	800a468 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3304      	adds	r3, #4
 800a73c:	6939      	ldr	r1, [r7, #16]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fed0 	bl	800a4e4 <tcp_output_control_segment>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	bd90      	pop	{r4, r7, pc}
 800a754:	0800fb70 	.word	0x0800fb70
 800a758:	0801034c 	.word	0x0801034c
 800a75c:	0800fbc4 	.word	0x0800fbc4

0800a760 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b08b      	sub	sp, #44	@ 0x2c
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a768:	2300      	movs	r3, #0
 800a76a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d106      	bne.n	800a782 <tcp_zero_window_probe+0x22>
 800a774:	4b4c      	ldr	r3, [pc, #304]	@ (800a8a8 <tcp_zero_window_probe+0x148>)
 800a776:	f640 024f 	movw	r2, #2127	@ 0x84f
 800a77a:	494c      	ldr	r1, [pc, #304]	@ (800a8ac <tcp_zero_window_probe+0x14c>)
 800a77c:	484c      	ldr	r0, [pc, #304]	@ (800a8b0 <tcp_zero_window_probe+0x150>)
 800a77e:	f002 ff87 	bl	800d690 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a786:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	e086      	b.n	800a8a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a798:	2bff      	cmp	r3, #255	@ 0xff
 800a79a:	d007      	beq.n	800a7ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	899b      	ldrh	r3, [r3, #12]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7f9 f95d 	bl	8003a74 <lwip_htons>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <tcp_zero_window_probe+0x72>
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	891b      	ldrh	r3, [r3, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <tcp_zero_window_probe+0x72>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <tcp_zero_window_probe+0x74>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a7d6:	7ffb      	ldrb	r3, [r7, #31]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bf0c      	ite	eq
 800a7dc:	2301      	moveq	r3, #1
 800a7de:	2300      	movne	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7e8:	b299      	uxth	r1, r3
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	8bba      	ldrh	r2, [r7, #28]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fdfa 	bl	800a3ec <tcp_output_alloc_header>
 800a7f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a804:	e04c      	b.n	800a8a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a80c:	7ffb      	ldrb	r3, [r7, #31]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d011      	beq.n	800a836 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	899b      	ldrh	r3, [r3, #12]
 800a816:	b29b      	uxth	r3, r3
 800a818:	b21b      	sxth	r3, r3
 800a81a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a81e:	b21c      	sxth	r4, r3
 800a820:	2011      	movs	r0, #17
 800a822:	f7f9 f927 	bl	8003a74 <lwip_htons>
 800a826:	4603      	mov	r3, r0
 800a828:	b21b      	sxth	r3, r3
 800a82a:	4323      	orrs	r3, r4
 800a82c:	b21b      	sxth	r3, r3
 800a82e:	b29a      	uxth	r2, r3
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	819a      	strh	r2, [r3, #12]
 800a834:	e010      	b.n	800a858 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	3314      	adds	r3, #20
 800a83c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	6858      	ldr	r0, [r3, #4]
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	891a      	ldrh	r2, [r3, #8]
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	891b      	ldrh	r3, [r3, #8]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	b29b      	uxth	r3, r3
 800a850:	2201      	movs	r2, #1
 800a852:	6939      	ldr	r1, [r7, #16]
 800a854:	f7fa fe56 	bl	8005504 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f9 f91d 	bl	8003a9e <lwip_htonl>
 800a864:	4603      	mov	r3, r0
 800a866:	3301      	adds	r3, #1
 800a868:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	da02      	bge.n	800a87c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a87c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a880:	2200      	movs	r2, #0
 800a882:	69b9      	ldr	r1, [r7, #24]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff fdef 	bl	800a468 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3304      	adds	r3, #4
 800a890:	69b9      	ldr	r1, [r7, #24]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff fe26 	bl	800a4e4 <tcp_output_control_segment>
 800a898:	4603      	mov	r3, r0
 800a89a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a89c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	372c      	adds	r7, #44	@ 0x2c
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd90      	pop	{r4, r7, pc}
 800a8a8:	0800fb70 	.word	0x0800fb70
 800a8ac:	08010368 	.word	0x08010368
 800a8b0:	0800fbc4 	.word	0x0800fbc4

0800a8b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a8bc:	f7fa ff10 	bl	80056e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ec <tcpip_tcp_timer+0x38>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d103      	bne.n	800a8d0 <tcpip_tcp_timer+0x1c>
 800a8c8:	4b09      	ldr	r3, [pc, #36]	@ (800a8f0 <tcpip_tcp_timer+0x3c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4908      	ldr	r1, [pc, #32]	@ (800a8f4 <tcpip_tcp_timer+0x40>)
 800a8d4:	20fa      	movs	r0, #250	@ 0xfa
 800a8d6:	f000 f8f3 	bl	800aac0 <sys_timeout>
 800a8da:	e003      	b.n	800a8e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <tcpip_tcp_timer+0x44>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20006944 	.word	0x20006944
 800a8f0:	20006948 	.word	0x20006948
 800a8f4:	0800a8b5 	.word	0x0800a8b5
 800a8f8:	20006990 	.word	0x20006990

0800a8fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a900:	4b0a      	ldr	r3, [pc, #40]	@ (800a92c <tcp_timer_needed+0x30>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10f      	bne.n	800a928 <tcp_timer_needed+0x2c>
 800a908:	4b09      	ldr	r3, [pc, #36]	@ (800a930 <tcp_timer_needed+0x34>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d103      	bne.n	800a918 <tcp_timer_needed+0x1c>
 800a910:	4b08      	ldr	r3, [pc, #32]	@ (800a934 <tcp_timer_needed+0x38>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a918:	4b04      	ldr	r3, [pc, #16]	@ (800a92c <tcp_timer_needed+0x30>)
 800a91a:	2201      	movs	r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a91e:	2200      	movs	r2, #0
 800a920:	4905      	ldr	r1, [pc, #20]	@ (800a938 <tcp_timer_needed+0x3c>)
 800a922:	20fa      	movs	r0, #250	@ 0xfa
 800a924:	f000 f8cc 	bl	800aac0 <sys_timeout>
  }
}
 800a928:	bf00      	nop
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20006990 	.word	0x20006990
 800a930:	20006944 	.word	0x20006944
 800a934:	20006948 	.word	0x20006948
 800a938:	0800a8b5 	.word	0x0800a8b5

0800a93c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a948:	2006      	movs	r0, #6
 800a94a:	f7f9 fd0b 	bl	8004364 <memp_malloc>
 800a94e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d151      	bne.n	800aa00 <sys_timeout_abs+0xc4>
 800a95c:	4b2a      	ldr	r3, [pc, #168]	@ (800aa08 <sys_timeout_abs+0xcc>)
 800a95e:	22be      	movs	r2, #190	@ 0xbe
 800a960:	492a      	ldr	r1, [pc, #168]	@ (800aa0c <sys_timeout_abs+0xd0>)
 800a962:	482b      	ldr	r0, [pc, #172]	@ (800aa10 <sys_timeout_abs+0xd4>)
 800a964:	f002 fe94 	bl	800d690 <iprintf>
    return;
 800a968:	e04a      	b.n	800aa00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2200      	movs	r2, #0
 800a96e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a982:	4b24      	ldr	r3, [pc, #144]	@ (800aa14 <sys_timeout_abs+0xd8>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d103      	bne.n	800a992 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a98a:	4a22      	ldr	r2, [pc, #136]	@ (800aa14 <sys_timeout_abs+0xd8>)
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	6013      	str	r3, [r2, #0]
    return;
 800a990:	e037      	b.n	800aa02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	4b1f      	ldr	r3, [pc, #124]	@ (800aa14 <sys_timeout_abs+0xd8>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	0fdb      	lsrs	r3, r3, #31
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a9aa:	4b1a      	ldr	r3, [pc, #104]	@ (800aa14 <sys_timeout_abs+0xd8>)
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a9b2:	4a18      	ldr	r2, [pc, #96]	@ (800aa14 <sys_timeout_abs+0xd8>)
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	e023      	b.n	800aa02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a9ba:	4b16      	ldr	r3, [pc, #88]	@ (800aa14 <sys_timeout_abs+0xd8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	e01a      	b.n	800a9f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <sys_timeout_abs+0xa6>
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	0fdb      	lsrs	r3, r3, #31
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	601a      	str	r2, [r3, #0]
        break;
 800a9f0:	e007      	b.n	800aa02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e1      	bne.n	800a9c2 <sys_timeout_abs+0x86>
 800a9fe:	e000      	b.n	800aa02 <sys_timeout_abs+0xc6>
    return;
 800aa00:	bf00      	nop
      }
    }
  }
}
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	0801038c 	.word	0x0801038c
 800aa0c:	080103c0 	.word	0x080103c0
 800aa10:	08010400 	.word	0x08010400
 800aa14:	20006988 	.word	0x20006988

0800aa18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	4798      	blx	r3

  now = sys_now();
 800aa2a:	f7f8 fe37 	bl	800369c <sys_now>
 800aa2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	4b0f      	ldr	r3, [pc, #60]	@ (800aa74 <lwip_cyclic_timer+0x5c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4413      	add	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	0fdb      	lsrs	r3, r3, #31
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d009      	beq.n	800aa62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4413      	add	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	4907      	ldr	r1, [pc, #28]	@ (800aa78 <lwip_cyclic_timer+0x60>)
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff ff6e 	bl	800a93c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800aa60:	e004      	b.n	800aa6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	4904      	ldr	r1, [pc, #16]	@ (800aa78 <lwip_cyclic_timer+0x60>)
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7ff ff68 	bl	800a93c <sys_timeout_abs>
}
 800aa6c:	bf00      	nop
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	2000698c 	.word	0x2000698c
 800aa78:	0800aa19 	.word	0x0800aa19

0800aa7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aa82:	2301      	movs	r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	e00e      	b.n	800aaa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aa88:	4a0b      	ldr	r2, [pc, #44]	@ (800aab8 <sys_timeouts_init+0x3c>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	4a08      	ldr	r2, [pc, #32]	@ (800aab8 <sys_timeouts_init+0x3c>)
 800aa96:	4413      	add	r3, r2
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4908      	ldr	r1, [pc, #32]	@ (800aabc <sys_timeouts_init+0x40>)
 800aa9c:	f000 f810 	bl	800aac0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d9ed      	bls.n	800aa88 <sys_timeouts_init+0xc>
  }
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	08010f70 	.word	0x08010f70
 800aabc:	0800aa19 	.word	0x0800aa19

0800aac0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aad2:	d306      	bcc.n	800aae2 <sys_timeout+0x22>
 800aad4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab00 <sys_timeout+0x40>)
 800aad6:	f240 1229 	movw	r2, #297	@ 0x129
 800aada:	490a      	ldr	r1, [pc, #40]	@ (800ab04 <sys_timeout+0x44>)
 800aadc:	480a      	ldr	r0, [pc, #40]	@ (800ab08 <sys_timeout+0x48>)
 800aade:	f002 fdd7 	bl	800d690 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800aae2:	f7f8 fddb 	bl	800369c <sys_now>
 800aae6:	4602      	mov	r2, r0
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	68b9      	ldr	r1, [r7, #8]
 800aaf2:	6978      	ldr	r0, [r7, #20]
 800aaf4:	f7ff ff22 	bl	800a93c <sys_timeout_abs>
#endif
}
 800aaf8:	bf00      	nop
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	0801038c 	.word	0x0801038c
 800ab04:	08010428 	.word	0x08010428
 800ab08:	08010400 	.word	0x08010400

0800ab0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ab12:	f7f8 fdc3 	bl	800369c <sys_now>
 800ab16:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ab18:	4b1a      	ldr	r3, [pc, #104]	@ (800ab84 <sys_check_timeouts+0x78>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <sys_check_timeouts+0x1a>
 800ab22:	f7f9 ffcb 	bl	8004abc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ab26:	4b18      	ldr	r3, [pc, #96]	@ (800ab88 <sys_check_timeouts+0x7c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d022      	beq.n	800ab78 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	0fdb      	lsrs	r3, r3, #31
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d11a      	bne.n	800ab7c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a0f      	ldr	r2, [pc, #60]	@ (800ab88 <sys_check_timeouts+0x7c>)
 800ab4c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab8c <sys_check_timeouts+0x80>)
 800ab60:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	2006      	movs	r0, #6
 800ab66:	f7f9 fc6d 	bl	8004444 <memp_free>
    if (handler != NULL) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0d3      	beq.n	800ab18 <sys_check_timeouts+0xc>
      handler(arg);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6838      	ldr	r0, [r7, #0]
 800ab74:	4798      	blx	r3
  do {
 800ab76:	e7cf      	b.n	800ab18 <sys_check_timeouts+0xc>
      return;
 800ab78:	bf00      	nop
 800ab7a:	e000      	b.n	800ab7e <sys_check_timeouts+0x72>
      return;
 800ab7c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20006935 	.word	0x20006935
 800ab88:	20006988 	.word	0x20006988
 800ab8c:	2000698c 	.word	0x2000698c

0800ab90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ab94:	f002 fc7c 	bl	800d490 <rand>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	4b01      	ldr	r3, [pc, #4]	@ (800abb0 <udp_init+0x20>)
 800abaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800abac:	bf00      	nop
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20000028 	.word	0x20000028

0800abb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d105      	bne.n	800abd4 <udp_input_local_match+0x20>
 800abc8:	4b27      	ldr	r3, [pc, #156]	@ (800ac68 <udp_input_local_match+0xb4>)
 800abca:	2287      	movs	r2, #135	@ 0x87
 800abcc:	4927      	ldr	r1, [pc, #156]	@ (800ac6c <udp_input_local_match+0xb8>)
 800abce:	4828      	ldr	r0, [pc, #160]	@ (800ac70 <udp_input_local_match+0xbc>)
 800abd0:	f002 fd5e 	bl	800d690 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <udp_input_local_match+0x32>
 800abda:	4b23      	ldr	r3, [pc, #140]	@ (800ac68 <udp_input_local_match+0xb4>)
 800abdc:	2288      	movs	r2, #136	@ 0x88
 800abde:	4925      	ldr	r1, [pc, #148]	@ (800ac74 <udp_input_local_match+0xc0>)
 800abe0:	4823      	ldr	r0, [pc, #140]	@ (800ac70 <udp_input_local_match+0xbc>)
 800abe2:	f002 fd55 	bl	800d690 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	7a1b      	ldrb	r3, [r3, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	7a1a      	ldrb	r2, [r3, #8]
 800abf2:	4b21      	ldr	r3, [pc, #132]	@ (800ac78 <udp_input_local_match+0xc4>)
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abfa:	3301      	adds	r3, #1
 800abfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d001      	beq.n	800ac06 <udp_input_local_match+0x52>
    return 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e02b      	b.n	800ac5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d018      	beq.n	800ac3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d013      	beq.n	800ac3a <udp_input_local_match+0x86>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00f      	beq.n	800ac3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ac1a:	4b17      	ldr	r3, [pc, #92]	@ (800ac78 <udp_input_local_match+0xc4>)
 800ac1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac22:	d00a      	beq.n	800ac3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	4b13      	ldr	r3, [pc, #76]	@ (800ac78 <udp_input_local_match+0xc4>)
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	405a      	eors	r2, r3
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3308      	adds	r3, #8
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d110      	bne.n	800ac5c <udp_input_local_match+0xa8>
          return 1;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e00f      	b.n	800ac5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d009      	beq.n	800ac58 <udp_input_local_match+0xa4>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <udp_input_local_match+0xa4>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	4b09      	ldr	r3, [pc, #36]	@ (800ac78 <udp_input_local_match+0xc4>)
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d101      	bne.n	800ac5c <udp_input_local_match+0xa8>
        return 1;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e000      	b.n	800ac5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	08010474 	.word	0x08010474
 800ac6c:	080104a4 	.word	0x080104a4
 800ac70:	080104c8 	.word	0x080104c8
 800ac74:	080104f0 	.word	0x080104f0
 800ac78:	20000208 	.word	0x20000208

0800ac7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ac7c:	b590      	push	{r4, r7, lr}
 800ac7e:	b08d      	sub	sp, #52	@ 0x34
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d105      	bne.n	800ac9c <udp_input+0x20>
 800ac90:	4b7c      	ldr	r3, [pc, #496]	@ (800ae84 <udp_input+0x208>)
 800ac92:	22cf      	movs	r2, #207	@ 0xcf
 800ac94:	497c      	ldr	r1, [pc, #496]	@ (800ae88 <udp_input+0x20c>)
 800ac96:	487d      	ldr	r0, [pc, #500]	@ (800ae8c <udp_input+0x210>)
 800ac98:	f002 fcfa 	bl	800d690 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <udp_input+0x32>
 800aca2:	4b78      	ldr	r3, [pc, #480]	@ (800ae84 <udp_input+0x208>)
 800aca4:	22d0      	movs	r2, #208	@ 0xd0
 800aca6:	497a      	ldr	r1, [pc, #488]	@ (800ae90 <udp_input+0x214>)
 800aca8:	4878      	ldr	r0, [pc, #480]	@ (800ae8c <udp_input+0x210>)
 800acaa:	f002 fcf1 	bl	800d690 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	895b      	ldrh	r3, [r3, #10]
 800acb2:	2b07      	cmp	r3, #7
 800acb4:	d803      	bhi.n	800acbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7fa fa3a 	bl	8005130 <pbuf_free>
    goto end;
 800acbc:	e0de      	b.n	800ae7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800acc4:	4b73      	ldr	r3, [pc, #460]	@ (800ae94 <udp_input+0x218>)
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	4a72      	ldr	r2, [pc, #456]	@ (800ae94 <udp_input+0x218>)
 800acca:	6812      	ldr	r2, [r2, #0]
 800accc:	4611      	mov	r1, r2
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 fc88 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800acd4:	4603      	mov	r3, r0
 800acd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	b29b      	uxth	r3, r3
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f8 fec8 	bl	8003a74 <lwip_htons>
 800ace4:	4603      	mov	r3, r0
 800ace6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	885b      	ldrh	r3, [r3, #2]
 800acec:	b29b      	uxth	r3, r3
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f8 fec0 	bl	8003a74 <lwip_htons>
 800acf4:	4603      	mov	r3, r0
 800acf6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800acf8:	2300      	movs	r3, #0
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800acfc:	2300      	movs	r3, #0
 800acfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad04:	4b64      	ldr	r3, [pc, #400]	@ (800ae98 <udp_input+0x21c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad0a:	e054      	b.n	800adb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	8a5b      	ldrh	r3, [r3, #18]
 800ad10:	89fa      	ldrh	r2, [r7, #14]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d14a      	bne.n	800adac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ad16:	7cfb      	ldrb	r3, [r7, #19]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad1e:	f7ff ff49 	bl	800abb4 <udp_input_local_match>
 800ad22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d041      	beq.n	800adac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2a:	7c1b      	ldrb	r3, [r3, #16]
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11d      	bne.n	800ad70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d102      	bne.n	800ad40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3c:	61fb      	str	r3, [r7, #28]
 800ad3e:	e017      	b.n	800ad70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ad40:	7cfb      	ldrb	r3, [r7, #19]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d014      	beq.n	800ad70 <udp_input+0xf4>
 800ad46:	4b53      	ldr	r3, [pc, #332]	@ (800ae94 <udp_input+0x218>)
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad4e:	d10f      	bne.n	800ad70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	3304      	adds	r3, #4
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d008      	beq.n	800ad70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	3304      	adds	r3, #4
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d101      	bne.n	800ad70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	8a9b      	ldrh	r3, [r3, #20]
 800ad74:	8a3a      	ldrh	r2, [r7, #16]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d118      	bne.n	800adac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	4b43      	ldr	r3, [pc, #268]	@ (800ae94 <udp_input+0x218>)
 800ad88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d10e      	bne.n	800adac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d014      	beq.n	800adbe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ad9c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae98 <udp_input+0x21c>)
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ada4:	4a3c      	ldr	r2, [pc, #240]	@ (800ae98 <udp_input+0x21c>)
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800adaa:	e008      	b.n	800adbe <udp_input+0x142>
      }
    }

    prev = pcb;
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1a7      	bne.n	800ad0c <udp_input+0x90>
 800adbc:	e000      	b.n	800adc0 <udp_input+0x144>
        break;
 800adbe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <udp_input+0x14e>
    pcb = uncon_pcb;
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800adca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <udp_input+0x15a>
    for_us = 1;
 800add0:	2301      	movs	r3, #1
 800add2:	76fb      	strb	r3, [r7, #27]
 800add4:	e00a      	b.n	800adec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	3304      	adds	r3, #4
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	4b2d      	ldr	r3, [pc, #180]	@ (800ae94 <udp_input+0x218>)
 800adde:	695b      	ldr	r3, [r3, #20]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	bf0c      	ite	eq
 800ade4:	2301      	moveq	r3, #1
 800ade6:	2300      	movne	r3, #0
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800adec:	7efb      	ldrb	r3, [r7, #27]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d041      	beq.n	800ae76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800adf2:	2108      	movs	r1, #8
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7fa f915 	bl	8005024 <pbuf_remove_header>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00a      	beq.n	800ae16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ae00:	4b20      	ldr	r3, [pc, #128]	@ (800ae84 <udp_input+0x208>)
 800ae02:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ae06:	4925      	ldr	r1, [pc, #148]	@ (800ae9c <udp_input+0x220>)
 800ae08:	4820      	ldr	r0, [pc, #128]	@ (800ae8c <udp_input+0x210>)
 800ae0a:	f002 fc41 	bl	800d690 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7fa f98e 	bl	8005130 <pbuf_free>
      goto end;
 800ae14:	e032      	b.n	800ae7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d012      	beq.n	800ae42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00a      	beq.n	800ae3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae26:	699c      	ldr	r4, [r3, #24]
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	69d8      	ldr	r0, [r3, #28]
 800ae2c:	8a3b      	ldrh	r3, [r7, #16]
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	4b1b      	ldr	r3, [pc, #108]	@ (800aea0 <udp_input+0x224>)
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ae38:	e021      	b.n	800ae7e <udp_input+0x202>
        pbuf_free(p);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7fa f978 	bl	8005130 <pbuf_free>
        goto end;
 800ae40:	e01c      	b.n	800ae7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ae42:	7cfb      	ldrb	r3, [r7, #19]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d112      	bne.n	800ae6e <udp_input+0x1f2>
 800ae48:	4b12      	ldr	r3, [pc, #72]	@ (800ae94 <udp_input+0x218>)
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae50:	2be0      	cmp	r3, #224	@ 0xe0
 800ae52:	d00c      	beq.n	800ae6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ae54:	4b0f      	ldr	r3, [pc, #60]	@ (800ae94 <udp_input+0x218>)
 800ae56:	899b      	ldrh	r3, [r3, #12]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	b21b      	sxth	r3, r3
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7fa f952 	bl	800510a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ae66:	2103      	movs	r1, #3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 f89b 	bl	800bfa4 <icmp_dest_unreach>
      pbuf_free(p);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7fa f95e 	bl	8005130 <pbuf_free>
  return;
 800ae74:	e003      	b.n	800ae7e <udp_input+0x202>
    pbuf_free(p);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7fa f95a 	bl	8005130 <pbuf_free>
  return;
 800ae7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ae7e:	372c      	adds	r7, #44	@ 0x2c
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd90      	pop	{r4, r7, pc}
 800ae84:	08010474 	.word	0x08010474
 800ae88:	08010518 	.word	0x08010518
 800ae8c:	080104c8 	.word	0x080104c8
 800ae90:	08010530 	.word	0x08010530
 800ae94:	20000208 	.word	0x20000208
 800ae98:	20006994 	.word	0x20006994
 800ae9c:	0801054c 	.word	0x0801054c
 800aea0:	20000218 	.word	0x20000218

0800aea4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01e      	beq.n	800aef2 <udp_netif_ip_addr_changed+0x4e>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01a      	beq.n	800aef2 <udp_netif_ip_addr_changed+0x4e>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d017      	beq.n	800aef2 <udp_netif_ip_addr_changed+0x4e>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d013      	beq.n	800aef2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aeca:	4b0d      	ldr	r3, [pc, #52]	@ (800af00 <udp_netif_ip_addr_changed+0x5c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	60fb      	str	r3, [r7, #12]
 800aed0:	e00c      	b.n	800aeec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d103      	bne.n	800aee6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1ef      	bne.n	800aed2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800aef2:	bf00      	nop
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20006994 	.word	0x20006994

0800af04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800af0c:	4915      	ldr	r1, [pc, #84]	@ (800af64 <etharp_free_entry+0x60>)
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	005b      	lsls	r3, r3, #1
 800af14:	4413      	add	r3, r2
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	440b      	add	r3, r1
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d013      	beq.n	800af48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800af20:	4910      	ldr	r1, [pc, #64]	@ (800af64 <etharp_free_entry+0x60>)
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	4613      	mov	r3, r2
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	4413      	add	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	440b      	add	r3, r1
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f7fa f8fd 	bl	8005130 <pbuf_free>
    arp_table[i].q = NULL;
 800af36:	490b      	ldr	r1, [pc, #44]	@ (800af64 <etharp_free_entry+0x60>)
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	4613      	mov	r3, r2
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	4413      	add	r3, r2
 800af40:	00db      	lsls	r3, r3, #3
 800af42:	440b      	add	r3, r1
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800af48:	4906      	ldr	r1, [pc, #24]	@ (800af64 <etharp_free_entry+0x60>)
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	4613      	mov	r3, r2
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	4413      	add	r3, r2
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	440b      	add	r3, r1
 800af56:	3314      	adds	r3, #20
 800af58:	2200      	movs	r2, #0
 800af5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20006998 	.word	0x20006998

0800af68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af6e:	2300      	movs	r3, #0
 800af70:	607b      	str	r3, [r7, #4]
 800af72:	e096      	b.n	800b0a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800af74:	494f      	ldr	r1, [pc, #316]	@ (800b0b4 <etharp_tmr+0x14c>)
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	4613      	mov	r3, r2
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	4413      	add	r3, r2
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	440b      	add	r3, r1
 800af82:	3314      	adds	r3, #20
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8086 	beq.w	800b09c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800af90:	4948      	ldr	r1, [pc, #288]	@ (800b0b4 <etharp_tmr+0x14c>)
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	4613      	mov	r3, r2
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	4413      	add	r3, r2
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	440b      	add	r3, r1
 800af9e:	3312      	adds	r3, #18
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	3301      	adds	r3, #1
 800afa4:	b298      	uxth	r0, r3
 800afa6:	4943      	ldr	r1, [pc, #268]	@ (800b0b4 <etharp_tmr+0x14c>)
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	4413      	add	r3, r2
 800afb0:	00db      	lsls	r3, r3, #3
 800afb2:	440b      	add	r3, r1
 800afb4:	3312      	adds	r3, #18
 800afb6:	4602      	mov	r2, r0
 800afb8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800afba:	493e      	ldr	r1, [pc, #248]	@ (800b0b4 <etharp_tmr+0x14c>)
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	4613      	mov	r3, r2
 800afc0:	005b      	lsls	r3, r3, #1
 800afc2:	4413      	add	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	440b      	add	r3, r1
 800afc8:	3312      	adds	r3, #18
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800afd0:	d215      	bcs.n	800affe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800afd2:	4938      	ldr	r1, [pc, #224]	@ (800b0b4 <etharp_tmr+0x14c>)
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	4413      	add	r3, r2
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	440b      	add	r3, r1
 800afe0:	3314      	adds	r3, #20
 800afe2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d10e      	bne.n	800b006 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800afe8:	4932      	ldr	r1, [pc, #200]	@ (800b0b4 <etharp_tmr+0x14c>)
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	4613      	mov	r3, r2
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	4413      	add	r3, r2
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	440b      	add	r3, r1
 800aff6:	3312      	adds	r3, #18
 800aff8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800affa:	2b04      	cmp	r3, #4
 800affc:	d903      	bls.n	800b006 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff ff80 	bl	800af04 <etharp_free_entry>
 800b004:	e04a      	b.n	800b09c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b006:	492b      	ldr	r1, [pc, #172]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	4413      	add	r3, r2
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	440b      	add	r3, r1
 800b014:	3314      	adds	r3, #20
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d10a      	bne.n	800b032 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b01c:	4925      	ldr	r1, [pc, #148]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	4613      	mov	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	440b      	add	r3, r1
 800b02a:	3314      	adds	r3, #20
 800b02c:	2204      	movs	r2, #4
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	e034      	b.n	800b09c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b032:	4920      	ldr	r1, [pc, #128]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	4413      	add	r3, r2
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	440b      	add	r3, r1
 800b040:	3314      	adds	r3, #20
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b04      	cmp	r3, #4
 800b046:	d10a      	bne.n	800b05e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b048:	491a      	ldr	r1, [pc, #104]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	4613      	mov	r3, r2
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	4413      	add	r3, r2
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	440b      	add	r3, r1
 800b056:	3314      	adds	r3, #20
 800b058:	2202      	movs	r2, #2
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e01e      	b.n	800b09c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b05e:	4915      	ldr	r1, [pc, #84]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	4413      	add	r3, r2
 800b068:	00db      	lsls	r3, r3, #3
 800b06a:	440b      	add	r3, r1
 800b06c:	3314      	adds	r3, #20
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d113      	bne.n	800b09c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b074:	490f      	ldr	r1, [pc, #60]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	4613      	mov	r3, r2
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	4413      	add	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	440b      	add	r3, r1
 800b082:	3308      	adds	r3, #8
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	4613      	mov	r3, r2
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	4413      	add	r3, r2
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	4a08      	ldr	r2, [pc, #32]	@ (800b0b4 <etharp_tmr+0x14c>)
 800b092:	4413      	add	r3, r2
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	f000 fe6e 	bl	800bd78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	607b      	str	r3, [r7, #4]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b09      	cmp	r3, #9
 800b0a6:	f77f af65 	ble.w	800af74 <etharp_tmr+0xc>
      }
    }
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20006998 	.word	0x20006998

0800b0b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08a      	sub	sp, #40	@ 0x28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b0c6:	230a      	movs	r3, #10
 800b0c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b0ca:	230a      	movs	r3, #10
 800b0cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b0ce:	230a      	movs	r3, #10
 800b0d0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b0d6:	230a      	movs	r3, #10
 800b0d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	83bb      	strh	r3, [r7, #28]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	837b      	strh	r3, [r7, #26]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	843b      	strh	r3, [r7, #32]
 800b0ea:	e0ae      	b.n	800b24a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b0ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0f0:	49a6      	ldr	r1, [pc, #664]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	4413      	add	r3, r2
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	440b      	add	r3, r1
 800b0fc:	3314      	adds	r3, #20
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b102:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b106:	2b0a      	cmp	r3, #10
 800b108:	d105      	bne.n	800b116 <etharp_find_entry+0x5e>
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b110:	8c3b      	ldrh	r3, [r7, #32]
 800b112:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b114:	e095      	b.n	800b242 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8092 	beq.w	800b242 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d009      	beq.n	800b138 <etharp_find_entry+0x80>
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d806      	bhi.n	800b138 <etharp_find_entry+0x80>
 800b12a:	4b99      	ldr	r3, [pc, #612]	@ (800b390 <etharp_find_entry+0x2d8>)
 800b12c:	f240 1223 	movw	r2, #291	@ 0x123
 800b130:	4998      	ldr	r1, [pc, #608]	@ (800b394 <etharp_find_entry+0x2dc>)
 800b132:	4899      	ldr	r0, [pc, #612]	@ (800b398 <etharp_find_entry+0x2e0>)
 800b134:	f002 faac 	bl	800d690 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d020      	beq.n	800b180 <etharp_find_entry+0xc8>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6819      	ldr	r1, [r3, #0]
 800b142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b146:	4891      	ldr	r0, [pc, #580]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b148:	4613      	mov	r3, r2
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	4413      	add	r3, r2
 800b14e:	00db      	lsls	r3, r3, #3
 800b150:	4403      	add	r3, r0
 800b152:	3304      	adds	r3, #4
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4299      	cmp	r1, r3
 800b158:	d112      	bne.n	800b180 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00c      	beq.n	800b17a <etharp_find_entry+0xc2>
 800b160:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b164:	4989      	ldr	r1, [pc, #548]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b166:	4613      	mov	r3, r2
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	4413      	add	r3, r2
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	440b      	add	r3, r1
 800b170:	3308      	adds	r3, #8
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d102      	bne.n	800b180 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b17a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b17e:	e100      	b.n	800b382 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b180:	7dfb      	ldrb	r3, [r7, #23]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d140      	bne.n	800b208 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b18a:	4980      	ldr	r1, [pc, #512]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b18c:	4613      	mov	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	440b      	add	r3, r1
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d01a      	beq.n	800b1d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b19c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b1a0:	497a      	ldr	r1, [pc, #488]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	440b      	add	r3, r1
 800b1ac:	3312      	adds	r3, #18
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	8bba      	ldrh	r2, [r7, #28]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d845      	bhi.n	800b242 <etharp_find_entry+0x18a>
            old_queue = i;
 800b1b6:	8c3b      	ldrh	r3, [r7, #32]
 800b1b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b1ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b1be:	4973      	ldr	r1, [pc, #460]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	440b      	add	r3, r1
 800b1ca:	3312      	adds	r3, #18
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	83bb      	strh	r3, [r7, #28]
 800b1d0:	e037      	b.n	800b242 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b1d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b1d6:	496d      	ldr	r1, [pc, #436]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b1d8:	4613      	mov	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	4413      	add	r3, r2
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	440b      	add	r3, r1
 800b1e2:	3312      	adds	r3, #18
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	8b7a      	ldrh	r2, [r7, #26]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d82a      	bhi.n	800b242 <etharp_find_entry+0x18a>
            old_pending = i;
 800b1ec:	8c3b      	ldrh	r3, [r7, #32]
 800b1ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800b1f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b1f4:	4965      	ldr	r1, [pc, #404]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	440b      	add	r3, r1
 800b200:	3312      	adds	r3, #18
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	837b      	strh	r3, [r7, #26]
 800b206:	e01c      	b.n	800b242 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d919      	bls.n	800b242 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b20e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b212:	495e      	ldr	r1, [pc, #376]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b214:	4613      	mov	r3, r2
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	4413      	add	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	440b      	add	r3, r1
 800b21e:	3312      	adds	r3, #18
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	8b3a      	ldrh	r2, [r7, #24]
 800b224:	429a      	cmp	r2, r3
 800b226:	d80c      	bhi.n	800b242 <etharp_find_entry+0x18a>
            old_stable = i;
 800b228:	8c3b      	ldrh	r3, [r7, #32]
 800b22a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800b22c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b230:	4956      	ldr	r1, [pc, #344]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b232:	4613      	mov	r3, r2
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4413      	add	r3, r2
 800b238:	00db      	lsls	r3, r3, #3
 800b23a:	440b      	add	r3, r1
 800b23c:	3312      	adds	r3, #18
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b242:	8c3b      	ldrh	r3, [r7, #32]
 800b244:	3301      	adds	r3, #1
 800b246:	b29b      	uxth	r3, r3
 800b248:	843b      	strh	r3, [r7, #32]
 800b24a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b24e:	2b09      	cmp	r3, #9
 800b250:	f77f af4c 	ble.w	800b0ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d108      	bne.n	800b270 <etharp_find_entry+0x1b8>
 800b25e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b262:	2b0a      	cmp	r3, #10
 800b264:	d107      	bne.n	800b276 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b274:	e085      	b.n	800b382 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	dc02      	bgt.n	800b284 <etharp_find_entry+0x1cc>
    i = empty;
 800b27e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b280:	843b      	strh	r3, [r7, #32]
 800b282:	e039      	b.n	800b2f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b284:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800b288:	2b09      	cmp	r3, #9
 800b28a:	dc14      	bgt.n	800b2b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b28c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b28e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b290:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b294:	493d      	ldr	r1, [pc, #244]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b296:	4613      	mov	r3, r2
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	4413      	add	r3, r2
 800b29c:	00db      	lsls	r3, r3, #3
 800b29e:	440b      	add	r3, r1
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d018      	beq.n	800b2d8 <etharp_find_entry+0x220>
 800b2a6:	4b3a      	ldr	r3, [pc, #232]	@ (800b390 <etharp_find_entry+0x2d8>)
 800b2a8:	f240 126d 	movw	r2, #365	@ 0x16d
 800b2ac:	493b      	ldr	r1, [pc, #236]	@ (800b39c <etharp_find_entry+0x2e4>)
 800b2ae:	483a      	ldr	r0, [pc, #232]	@ (800b398 <etharp_find_entry+0x2e0>)
 800b2b0:	f002 f9ee 	bl	800d690 <iprintf>
 800b2b4:	e010      	b.n	800b2d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b2b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800b2ba:	2b09      	cmp	r3, #9
 800b2bc:	dc02      	bgt.n	800b2c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b2be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b2c0:	843b      	strh	r3, [r7, #32]
 800b2c2:	e009      	b.n	800b2d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b2c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b2c8:	2b09      	cmp	r3, #9
 800b2ca:	dc02      	bgt.n	800b2d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b2cc:	8bfb      	ldrh	r3, [r7, #30]
 800b2ce:	843b      	strh	r3, [r7, #32]
 800b2d0:	e002      	b.n	800b2d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b2d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2d6:	e054      	b.n	800b382 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b2d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b2dc:	2b09      	cmp	r3, #9
 800b2de:	dd06      	ble.n	800b2ee <etharp_find_entry+0x236>
 800b2e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b390 <etharp_find_entry+0x2d8>)
 800b2e2:	f240 127f 	movw	r2, #383	@ 0x17f
 800b2e6:	492e      	ldr	r1, [pc, #184]	@ (800b3a0 <etharp_find_entry+0x2e8>)
 800b2e8:	482b      	ldr	r0, [pc, #172]	@ (800b398 <etharp_find_entry+0x2e0>)
 800b2ea:	f002 f9d1 	bl	800d690 <iprintf>
    etharp_free_entry(i);
 800b2ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff fe06 	bl	800af04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b2f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b2fc:	2b09      	cmp	r3, #9
 800b2fe:	dd06      	ble.n	800b30e <etharp_find_entry+0x256>
 800b300:	4b23      	ldr	r3, [pc, #140]	@ (800b390 <etharp_find_entry+0x2d8>)
 800b302:	f240 1283 	movw	r2, #387	@ 0x183
 800b306:	4926      	ldr	r1, [pc, #152]	@ (800b3a0 <etharp_find_entry+0x2e8>)
 800b308:	4823      	ldr	r0, [pc, #140]	@ (800b398 <etharp_find_entry+0x2e0>)
 800b30a:	f002 f9c1 	bl	800d690 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b30e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b312:	491e      	ldr	r1, [pc, #120]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b314:	4613      	mov	r3, r2
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	4413      	add	r3, r2
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	440b      	add	r3, r1
 800b31e:	3314      	adds	r3, #20
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d006      	beq.n	800b334 <etharp_find_entry+0x27c>
 800b326:	4b1a      	ldr	r3, [pc, #104]	@ (800b390 <etharp_find_entry+0x2d8>)
 800b328:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800b32c:	491d      	ldr	r1, [pc, #116]	@ (800b3a4 <etharp_find_entry+0x2ec>)
 800b32e:	481a      	ldr	r0, [pc, #104]	@ (800b398 <etharp_find_entry+0x2e0>)
 800b330:	f002 f9ae 	bl	800d690 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00b      	beq.n	800b352 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b33a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6819      	ldr	r1, [r3, #0]
 800b342:	4812      	ldr	r0, [pc, #72]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b344:	4613      	mov	r3, r2
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	4413      	add	r3, r2
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	4403      	add	r3, r0
 800b34e:	3304      	adds	r3, #4
 800b350:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b356:	490d      	ldr	r1, [pc, #52]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b358:	4613      	mov	r3, r2
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	4413      	add	r3, r2
 800b35e:	00db      	lsls	r3, r3, #3
 800b360:	440b      	add	r3, r1
 800b362:	3312      	adds	r3, #18
 800b364:	2200      	movs	r2, #0
 800b366:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b36c:	4907      	ldr	r1, [pc, #28]	@ (800b38c <etharp_find_entry+0x2d4>)
 800b36e:	4613      	mov	r3, r2
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	4413      	add	r3, r2
 800b374:	00db      	lsls	r3, r3, #3
 800b376:	440b      	add	r3, r1
 800b378:	3308      	adds	r3, #8
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b37e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3728      	adds	r7, #40	@ 0x28
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20006998 	.word	0x20006998
 800b390:	080107d8 	.word	0x080107d8
 800b394:	08010810 	.word	0x08010810
 800b398:	08010850 	.word	0x08010850
 800b39c:	08010878 	.word	0x08010878
 800b3a0:	08010890 	.word	0x08010890
 800b3a4:	080108a4 	.word	0x080108a4

0800b3a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b3bc:	2b06      	cmp	r3, #6
 800b3be:	d006      	beq.n	800b3ce <etharp_update_arp_entry+0x26>
 800b3c0:	4b48      	ldr	r3, [pc, #288]	@ (800b4e4 <etharp_update_arp_entry+0x13c>)
 800b3c2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800b3c6:	4948      	ldr	r1, [pc, #288]	@ (800b4e8 <etharp_update_arp_entry+0x140>)
 800b3c8:	4848      	ldr	r0, [pc, #288]	@ (800b4ec <etharp_update_arp_entry+0x144>)
 800b3ca:	f002 f961 	bl	800d690 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d012      	beq.n	800b3fa <etharp_update_arp_entry+0x52>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00e      	beq.n	800b3fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f001 f8fe 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800b3e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b3f6:	2be0      	cmp	r3, #224	@ 0xe0
 800b3f8:	d102      	bne.n	800b400 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b3fa:	f06f 030f 	mvn.w	r3, #15
 800b3fe:	e06c      	b.n	800b4da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b400:	78fb      	ldrb	r3, [r7, #3]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	4619      	mov	r1, r3
 800b406:	68b8      	ldr	r0, [r7, #8]
 800b408:	f7ff fe56 	bl	800b0b8 <etharp_find_entry>
 800b40c:	4603      	mov	r3, r0
 800b40e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b410:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b414:	2b00      	cmp	r3, #0
 800b416:	da02      	bge.n	800b41e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b418:	8afb      	ldrh	r3, [r7, #22]
 800b41a:	b25b      	sxtb	r3, r3
 800b41c:	e05d      	b.n	800b4da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b41e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b422:	4933      	ldr	r1, [pc, #204]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b424:	4613      	mov	r3, r2
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	4413      	add	r3, r2
 800b42a:	00db      	lsls	r3, r3, #3
 800b42c:	440b      	add	r3, r1
 800b42e:	3314      	adds	r3, #20
 800b430:	2202      	movs	r2, #2
 800b432:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b434:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b438:	492d      	ldr	r1, [pc, #180]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b43a:	4613      	mov	r3, r2
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	4413      	add	r3, r2
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	440b      	add	r3, r1
 800b444:	3308      	adds	r3, #8
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b44a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b44e:	4613      	mov	r3, r2
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	4413      	add	r3, r2
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	3308      	adds	r3, #8
 800b458:	4a25      	ldr	r2, [pc, #148]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b45a:	4413      	add	r3, r2
 800b45c:	3304      	adds	r3, #4
 800b45e:	2206      	movs	r2, #6
 800b460:	6879      	ldr	r1, [r7, #4]
 800b462:	4618      	mov	r0, r3
 800b464:	f002 f9ef 	bl	800d846 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b468:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b46c:	4920      	ldr	r1, [pc, #128]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b46e:	4613      	mov	r3, r2
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	440b      	add	r3, r1
 800b478:	3312      	adds	r3, #18
 800b47a:	2200      	movs	r2, #0
 800b47c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b47e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b482:	491b      	ldr	r1, [pc, #108]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b484:	4613      	mov	r3, r2
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	4413      	add	r3, r2
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	440b      	add	r3, r1
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d021      	beq.n	800b4d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b494:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b498:	4915      	ldr	r1, [pc, #84]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b49a:	4613      	mov	r3, r2
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	440b      	add	r3, r1
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b4a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b4ac:	4910      	ldr	r1, [pc, #64]	@ (800b4f0 <etharp_update_arp_entry+0x148>)
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	4413      	add	r3, r2
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	440b      	add	r3, r1
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b4c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6939      	ldr	r1, [r7, #16]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f001 ff97 	bl	800d400 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b4d2:	6938      	ldr	r0, [r7, #16]
 800b4d4:	f7f9 fe2c 	bl	8005130 <pbuf_free>
  }
  return ERR_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	080107d8 	.word	0x080107d8
 800b4e8:	080108d0 	.word	0x080108d0
 800b4ec:	08010850 	.word	0x08010850
 800b4f0:	20006998 	.word	0x20006998

0800b4f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	e01e      	b.n	800b540 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b502:	4913      	ldr	r1, [pc, #76]	@ (800b550 <etharp_cleanup_netif+0x5c>)
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4613      	mov	r3, r2
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	4413      	add	r3, r2
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	440b      	add	r3, r1
 800b510:	3314      	adds	r3, #20
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00e      	beq.n	800b53a <etharp_cleanup_netif+0x46>
 800b51c:	490c      	ldr	r1, [pc, #48]	@ (800b550 <etharp_cleanup_netif+0x5c>)
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	4613      	mov	r3, r2
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	4413      	add	r3, r2
 800b526:	00db      	lsls	r3, r3, #3
 800b528:	440b      	add	r3, r1
 800b52a:	3308      	adds	r3, #8
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	429a      	cmp	r2, r3
 800b532:	d102      	bne.n	800b53a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff fce5 	bl	800af04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3301      	adds	r3, #1
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b09      	cmp	r3, #9
 800b544:	dddd      	ble.n	800b502 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b546:	bf00      	nop
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20006998 	.word	0x20006998

0800b554 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b554:	b5b0      	push	{r4, r5, r7, lr}
 800b556:	b08a      	sub	sp, #40	@ 0x28
 800b558:	af04      	add	r7, sp, #16
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d107      	bne.n	800b574 <etharp_input+0x20>
 800b564:	4b3d      	ldr	r3, [pc, #244]	@ (800b65c <etharp_input+0x108>)
 800b566:	f240 228a 	movw	r2, #650	@ 0x28a
 800b56a:	493d      	ldr	r1, [pc, #244]	@ (800b660 <etharp_input+0x10c>)
 800b56c:	483d      	ldr	r0, [pc, #244]	@ (800b664 <etharp_input+0x110>)
 800b56e:	f002 f88f 	bl	800d690 <iprintf>
 800b572:	e06f      	b.n	800b654 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b584:	d10c      	bne.n	800b5a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b58a:	2b06      	cmp	r3, #6
 800b58c:	d108      	bne.n	800b5a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b592:	2b04      	cmp	r3, #4
 800b594:	d104      	bne.n	800b5a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	885b      	ldrh	r3, [r3, #2]
 800b59a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b59c:	2b08      	cmp	r3, #8
 800b59e:	d003      	beq.n	800b5a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7f9 fdc5 	bl	8005130 <pbuf_free>
    return;
 800b5a6:	e055      	b.n	800b654 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	330e      	adds	r3, #14
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d102      	bne.n	800b5c8 <etharp_input+0x74>
    for_us = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	75fb      	strb	r3, [r7, #23]
 800b5c6:	e009      	b.n	800b5dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	bf0c      	ite	eq
 800b5d4:	2301      	moveq	r3, #1
 800b5d6:	2300      	movne	r3, #0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f103 0208 	add.w	r2, r3, #8
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <etharp_input+0x98>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e000      	b.n	800b5ee <etharp_input+0x9a>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	f107 010c 	add.w	r1, r7, #12
 800b5f2:	6838      	ldr	r0, [r7, #0]
 800b5f4:	f7ff fed8 	bl	800b3a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	88db      	ldrh	r3, [r3, #6]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b602:	d003      	beq.n	800b60c <etharp_input+0xb8>
 800b604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b608:	d01e      	beq.n	800b648 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b60a:	e020      	b.n	800b64e <etharp_input+0xfa>
      if (for_us) {
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d01c      	beq.n	800b64c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b62c:	2102      	movs	r1, #2
 800b62e:	9103      	str	r1, [sp, #12]
 800b630:	f107 010c 	add.w	r1, r7, #12
 800b634:	9102      	str	r1, [sp, #8]
 800b636:	9201      	str	r2, [sp, #4]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	462b      	mov	r3, r5
 800b63c:	4622      	mov	r2, r4
 800b63e:	4601      	mov	r1, r0
 800b640:	6838      	ldr	r0, [r7, #0]
 800b642:	f000 faeb 	bl	800bc1c <etharp_raw>
      break;
 800b646:	e001      	b.n	800b64c <etharp_input+0xf8>
      break;
 800b648:	bf00      	nop
 800b64a:	e000      	b.n	800b64e <etharp_input+0xfa>
      break;
 800b64c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7f9 fd6e 	bl	8005130 <pbuf_free>
}
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bdb0      	pop	{r4, r5, r7, pc}
 800b65a:	bf00      	nop
 800b65c:	080107d8 	.word	0x080107d8
 800b660:	08010928 	.word	0x08010928
 800b664:	08010850 	.word	0x08010850

0800b668 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4613      	mov	r3, r2
 800b674:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b676:	79fa      	ldrb	r2, [r7, #7]
 800b678:	4944      	ldr	r1, [pc, #272]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b67a:	4613      	mov	r3, r2
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	4413      	add	r3, r2
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	440b      	add	r3, r1
 800b684:	3314      	adds	r3, #20
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d806      	bhi.n	800b69a <etharp_output_to_arp_index+0x32>
 800b68c:	4b40      	ldr	r3, [pc, #256]	@ (800b790 <etharp_output_to_arp_index+0x128>)
 800b68e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b692:	4940      	ldr	r1, [pc, #256]	@ (800b794 <etharp_output_to_arp_index+0x12c>)
 800b694:	4840      	ldr	r0, [pc, #256]	@ (800b798 <etharp_output_to_arp_index+0x130>)
 800b696:	f001 fffb 	bl	800d690 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b69a:	79fa      	ldrb	r2, [r7, #7]
 800b69c:	493b      	ldr	r1, [pc, #236]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b69e:	4613      	mov	r3, r2
 800b6a0:	005b      	lsls	r3, r3, #1
 800b6a2:	4413      	add	r3, r2
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	440b      	add	r3, r1
 800b6a8:	3314      	adds	r3, #20
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d153      	bne.n	800b758 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b6b0:	79fa      	ldrb	r2, [r7, #7]
 800b6b2:	4936      	ldr	r1, [pc, #216]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	4413      	add	r3, r2
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	440b      	add	r3, r1
 800b6be:	3312      	adds	r3, #18
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800b6c6:	d919      	bls.n	800b6fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b6c8:	79fa      	ldrb	r2, [r7, #7]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	4413      	add	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	4a2e      	ldr	r2, [pc, #184]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b6d4:	4413      	add	r3, r2
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	4619      	mov	r1, r3
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f000 fb4c 	bl	800bd78 <etharp_request>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d138      	bne.n	800b758 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b6e6:	79fa      	ldrb	r2, [r7, #7]
 800b6e8:	4928      	ldr	r1, [pc, #160]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	005b      	lsls	r3, r3, #1
 800b6ee:	4413      	add	r3, r2
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	440b      	add	r3, r1
 800b6f4:	3314      	adds	r3, #20
 800b6f6:	2203      	movs	r2, #3
 800b6f8:	701a      	strb	r2, [r3, #0]
 800b6fa:	e02d      	b.n	800b758 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b6fc:	79fa      	ldrb	r2, [r7, #7]
 800b6fe:	4923      	ldr	r1, [pc, #140]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b700:	4613      	mov	r3, r2
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	4413      	add	r3, r2
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	440b      	add	r3, r1
 800b70a:	3312      	adds	r3, #18
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800b712:	d321      	bcc.n	800b758 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b714:	79fa      	ldrb	r2, [r7, #7]
 800b716:	4613      	mov	r3, r2
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	4413      	add	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	4a1b      	ldr	r2, [pc, #108]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b720:	4413      	add	r3, r2
 800b722:	1d19      	adds	r1, r3, #4
 800b724:	79fa      	ldrb	r2, [r7, #7]
 800b726:	4613      	mov	r3, r2
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	4413      	add	r3, r2
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	3308      	adds	r3, #8
 800b730:	4a16      	ldr	r2, [pc, #88]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b732:	4413      	add	r3, r2
 800b734:	3304      	adds	r3, #4
 800b736:	461a      	mov	r2, r3
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fafb 	bl	800bd34 <etharp_request_dst>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d109      	bne.n	800b758 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b744:	79fa      	ldrb	r2, [r7, #7]
 800b746:	4911      	ldr	r1, [pc, #68]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b748:	4613      	mov	r3, r2
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	4413      	add	r3, r2
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	440b      	add	r3, r1
 800b752:	3314      	adds	r3, #20
 800b754:	2203      	movs	r2, #3
 800b756:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800b75e:	79fa      	ldrb	r2, [r7, #7]
 800b760:	4613      	mov	r3, r2
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	4413      	add	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	3308      	adds	r3, #8
 800b76a:	4a08      	ldr	r2, [pc, #32]	@ (800b78c <etharp_output_to_arp_index+0x124>)
 800b76c:	4413      	add	r3, r2
 800b76e:	3304      	adds	r3, #4
 800b770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b774:	9200      	str	r2, [sp, #0]
 800b776:	460a      	mov	r2, r1
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f001 fe40 	bl	800d400 <ethernet_output>
 800b780:	4603      	mov	r3, r0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20006998 	.word	0x20006998
 800b790:	080107d8 	.word	0x080107d8
 800b794:	08010948 	.word	0x08010948
 800b798:	08010850 	.word	0x08010850

0800b79c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	@ 0x28
 800b7a0:	af02      	add	r7, sp, #8
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <etharp_output+0x24>
 800b7b2:	4b73      	ldr	r3, [pc, #460]	@ (800b980 <etharp_output+0x1e4>)
 800b7b4:	f240 321e 	movw	r2, #798	@ 0x31e
 800b7b8:	4972      	ldr	r1, [pc, #456]	@ (800b984 <etharp_output+0x1e8>)
 800b7ba:	4873      	ldr	r0, [pc, #460]	@ (800b988 <etharp_output+0x1ec>)
 800b7bc:	f001 ff68 	bl	800d690 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <etharp_output+0x38>
 800b7c6:	4b6e      	ldr	r3, [pc, #440]	@ (800b980 <etharp_output+0x1e4>)
 800b7c8:	f240 321f 	movw	r2, #799	@ 0x31f
 800b7cc:	496f      	ldr	r1, [pc, #444]	@ (800b98c <etharp_output+0x1f0>)
 800b7ce:	486e      	ldr	r0, [pc, #440]	@ (800b988 <etharp_output+0x1ec>)
 800b7d0:	f001 ff5e 	bl	800d690 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <etharp_output+0x4c>
 800b7da:	4b69      	ldr	r3, [pc, #420]	@ (800b980 <etharp_output+0x1e4>)
 800b7dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b7e0:	496b      	ldr	r1, [pc, #428]	@ (800b990 <etharp_output+0x1f4>)
 800b7e2:	4869      	ldr	r0, [pc, #420]	@ (800b988 <etharp_output+0x1ec>)
 800b7e4:	f001 ff54 	bl	800d690 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68f9      	ldr	r1, [r7, #12]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 fef8 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b7fa:	4b66      	ldr	r3, [pc, #408]	@ (800b994 <etharp_output+0x1f8>)
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	e0af      	b.n	800b960 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b808:	2be0      	cmp	r3, #224	@ 0xe0
 800b80a:	d118      	bne.n	800b83e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b80c:	2301      	movs	r3, #1
 800b80e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b810:	2300      	movs	r3, #0
 800b812:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b814:	235e      	movs	r3, #94	@ 0x5e
 800b816:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3301      	adds	r3, #1
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b822:	b2db      	uxtb	r3, r3
 800b824:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3302      	adds	r3, #2
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3303      	adds	r3, #3
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b836:	f107 0310 	add.w	r3, r7, #16
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	e090      	b.n	800b960 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	405a      	eors	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3308      	adds	r3, #8
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4013      	ands	r3, r2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d012      	beq.n	800b87c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b85c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800b860:	4293      	cmp	r3, r2
 800b862:	d00b      	beq.n	800b87c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	330c      	adds	r3, #12
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	330c      	adds	r3, #12
 800b872:	61bb      	str	r3, [r7, #24]
 800b874:	e002      	b.n	800b87c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b876:	f06f 0303 	mvn.w	r3, #3
 800b87a:	e07d      	b.n	800b978 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b87c:	4b46      	ldr	r3, [pc, #280]	@ (800b998 <etharp_output+0x1fc>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	4619      	mov	r1, r3
 800b882:	4a46      	ldr	r2, [pc, #280]	@ (800b99c <etharp_output+0x200>)
 800b884:	460b      	mov	r3, r1
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	440b      	add	r3, r1
 800b88a:	00db      	lsls	r3, r3, #3
 800b88c:	4413      	add	r3, r2
 800b88e:	3314      	adds	r3, #20
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d925      	bls.n	800b8e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b896:	4b40      	ldr	r3, [pc, #256]	@ (800b998 <etharp_output+0x1fc>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	4619      	mov	r1, r3
 800b89c:	4a3f      	ldr	r2, [pc, #252]	@ (800b99c <etharp_output+0x200>)
 800b89e:	460b      	mov	r3, r1
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	440b      	add	r3, r1
 800b8a4:	00db      	lsls	r3, r3, #3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	3308      	adds	r3, #8
 800b8aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d117      	bne.n	800b8e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	4b38      	ldr	r3, [pc, #224]	@ (800b998 <etharp_output+0x1fc>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	4937      	ldr	r1, [pc, #220]	@ (800b99c <etharp_output+0x200>)
 800b8be:	4603      	mov	r3, r0
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	4403      	add	r3, r0
 800b8c4:	00db      	lsls	r3, r3, #3
 800b8c6:	440b      	add	r3, r1
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d108      	bne.n	800b8e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b8d0:	4b31      	ldr	r3, [pc, #196]	@ (800b998 <etharp_output+0x1fc>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f7ff fec5 	bl	800b668 <etharp_output_to_arp_index>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	e04a      	b.n	800b978 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	75fb      	strb	r3, [r7, #23]
 800b8e6:	e031      	b.n	800b94c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b8e8:	7dfa      	ldrb	r2, [r7, #23]
 800b8ea:	492c      	ldr	r1, [pc, #176]	@ (800b99c <etharp_output+0x200>)
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4413      	add	r3, r2
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	440b      	add	r3, r1
 800b8f6:	3314      	adds	r3, #20
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d923      	bls.n	800b946 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b8fe:	7dfa      	ldrb	r2, [r7, #23]
 800b900:	4926      	ldr	r1, [pc, #152]	@ (800b99c <etharp_output+0x200>)
 800b902:	4613      	mov	r3, r2
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4413      	add	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	440b      	add	r3, r1
 800b90c:	3308      	adds	r3, #8
 800b90e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d117      	bne.n	800b946 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	6819      	ldr	r1, [r3, #0]
 800b91a:	7dfa      	ldrb	r2, [r7, #23]
 800b91c:	481f      	ldr	r0, [pc, #124]	@ (800b99c <etharp_output+0x200>)
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	4403      	add	r3, r0
 800b928:	3304      	adds	r3, #4
 800b92a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b92c:	4299      	cmp	r1, r3
 800b92e:	d10a      	bne.n	800b946 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b930:	4a19      	ldr	r2, [pc, #100]	@ (800b998 <etharp_output+0x1fc>)
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	461a      	mov	r2, r3
 800b93a:	68b9      	ldr	r1, [r7, #8]
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7ff fe93 	bl	800b668 <etharp_output_to_arp_index>
 800b942:	4603      	mov	r3, r0
 800b944:	e018      	b.n	800b978 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	3301      	adds	r3, #1
 800b94a:	75fb      	strb	r3, [r7, #23]
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b09      	cmp	r3, #9
 800b950:	d9ca      	bls.n	800b8e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	69b9      	ldr	r1, [r7, #24]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 f822 	bl	800b9a0 <etharp_query>
 800b95c:	4603      	mov	r3, r0
 800b95e:	e00b      	b.n	800b978 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b966:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	68b9      	ldr	r1, [r7, #8]
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f001 fd45 	bl	800d400 <ethernet_output>
 800b976:	4603      	mov	r3, r0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3720      	adds	r7, #32
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	080107d8 	.word	0x080107d8
 800b984:	08010928 	.word	0x08010928
 800b988:	08010850 	.word	0x08010850
 800b98c:	08010978 	.word	0x08010978
 800b990:	08010918 	.word	0x08010918
 800b994:	08010f8c 	.word	0x08010f8c
 800b998:	20006a88 	.word	0x20006a88
 800b99c:	20006998 	.word	0x20006998

0800b9a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08c      	sub	sp, #48	@ 0x30
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3326      	adds	r3, #38	@ 0x26
 800b9b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b9b2:	23ff      	movs	r3, #255	@ 0xff
 800b9b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68f9      	ldr	r1, [r7, #12]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 fe0e 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10c      	bne.n	800b9e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b9d6:	2be0      	cmp	r3, #224	@ 0xe0
 800b9d8:	d006      	beq.n	800b9e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b9e8:	f06f 030f 	mvn.w	r3, #15
 800b9ec:	e101      	b.n	800bbf2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	68b8      	ldr	r0, [r7, #8]
 800b9f4:	f7ff fb60 	bl	800b0b8 <etharp_find_entry>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b9fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da02      	bge.n	800ba0a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ba04:	8a7b      	ldrh	r3, [r7, #18]
 800ba06:	b25b      	sxtb	r3, r3
 800ba08:	e0f3      	b.n	800bbf2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ba0a:	8a7b      	ldrh	r3, [r7, #18]
 800ba0c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ba0e:	d906      	bls.n	800ba1e <etharp_query+0x7e>
 800ba10:	4b7a      	ldr	r3, [pc, #488]	@ (800bbfc <etharp_query+0x25c>)
 800ba12:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800ba16:	497a      	ldr	r1, [pc, #488]	@ (800bc00 <etharp_query+0x260>)
 800ba18:	487a      	ldr	r0, [pc, #488]	@ (800bc04 <etharp_query+0x264>)
 800ba1a:	f001 fe39 	bl	800d690 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ba1e:	8a7b      	ldrh	r3, [r7, #18]
 800ba20:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ba22:	7c7a      	ldrb	r2, [r7, #17]
 800ba24:	4978      	ldr	r1, [pc, #480]	@ (800bc08 <etharp_query+0x268>)
 800ba26:	4613      	mov	r3, r2
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	4413      	add	r3, r2
 800ba2c:	00db      	lsls	r3, r3, #3
 800ba2e:	440b      	add	r3, r1
 800ba30:	3314      	adds	r3, #20
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d115      	bne.n	800ba64 <etharp_query+0xc4>
    is_new_entry = 1;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ba3c:	7c7a      	ldrb	r2, [r7, #17]
 800ba3e:	4972      	ldr	r1, [pc, #456]	@ (800bc08 <etharp_query+0x268>)
 800ba40:	4613      	mov	r3, r2
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	4413      	add	r3, r2
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	440b      	add	r3, r1
 800ba4a:	3314      	adds	r3, #20
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ba50:	7c7a      	ldrb	r2, [r7, #17]
 800ba52:	496d      	ldr	r1, [pc, #436]	@ (800bc08 <etharp_query+0x268>)
 800ba54:	4613      	mov	r3, r2
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	4413      	add	r3, r2
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	440b      	add	r3, r1
 800ba5e:	3308      	adds	r3, #8
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ba64:	7c7a      	ldrb	r2, [r7, #17]
 800ba66:	4968      	ldr	r1, [pc, #416]	@ (800bc08 <etharp_query+0x268>)
 800ba68:	4613      	mov	r3, r2
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	4413      	add	r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	440b      	add	r3, r1
 800ba72:	3314      	adds	r3, #20
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d011      	beq.n	800ba9e <etharp_query+0xfe>
 800ba7a:	7c7a      	ldrb	r2, [r7, #17]
 800ba7c:	4962      	ldr	r1, [pc, #392]	@ (800bc08 <etharp_query+0x268>)
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	440b      	add	r3, r1
 800ba88:	3314      	adds	r3, #20
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d806      	bhi.n	800ba9e <etharp_query+0xfe>
 800ba90:	4b5a      	ldr	r3, [pc, #360]	@ (800bbfc <etharp_query+0x25c>)
 800ba92:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ba96:	495d      	ldr	r1, [pc, #372]	@ (800bc0c <etharp_query+0x26c>)
 800ba98:	485a      	ldr	r0, [pc, #360]	@ (800bc04 <etharp_query+0x264>)
 800ba9a:	f001 fdf9 	bl	800d690 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d102      	bne.n	800baaa <etharp_query+0x10a>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10c      	bne.n	800bac4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 f963 	bl	800bd78 <etharp_request>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d102      	bne.n	800bac4 <etharp_query+0x124>
      return result;
 800babe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bac2:	e096      	b.n	800bbf2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <etharp_query+0x138>
 800baca:	4b4c      	ldr	r3, [pc, #304]	@ (800bbfc <etharp_query+0x25c>)
 800bacc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800bad0:	494f      	ldr	r1, [pc, #316]	@ (800bc10 <etharp_query+0x270>)
 800bad2:	484c      	ldr	r0, [pc, #304]	@ (800bc04 <etharp_query+0x264>)
 800bad4:	f001 fddc 	bl	800d690 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bad8:	7c7a      	ldrb	r2, [r7, #17]
 800bada:	494b      	ldr	r1, [pc, #300]	@ (800bc08 <etharp_query+0x268>)
 800badc:	4613      	mov	r3, r2
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	440b      	add	r3, r1
 800bae6:	3314      	adds	r3, #20
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d917      	bls.n	800bb1e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800baee:	4a49      	ldr	r2, [pc, #292]	@ (800bc14 <etharp_query+0x274>)
 800baf0:	7c7b      	ldrb	r3, [r7, #17]
 800baf2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800baf4:	7c7a      	ldrb	r2, [r7, #17]
 800baf6:	4613      	mov	r3, r2
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4413      	add	r3, r2
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	3308      	adds	r3, #8
 800bb00:	4a41      	ldr	r2, [pc, #260]	@ (800bc08 <etharp_query+0x268>)
 800bb02:	4413      	add	r3, r2
 800bb04:	3304      	adds	r3, #4
 800bb06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb0a:	9200      	str	r2, [sp, #0]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f001 fc75 	bl	800d400 <ethernet_output>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb1c:	e067      	b.n	800bbee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bb1e:	7c7a      	ldrb	r2, [r7, #17]
 800bb20:	4939      	ldr	r1, [pc, #228]	@ (800bc08 <etharp_query+0x268>)
 800bb22:	4613      	mov	r3, r2
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	440b      	add	r3, r1
 800bb2c:	3314      	adds	r3, #20
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d15c      	bne.n	800bbee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bb3c:	e01c      	b.n	800bb78 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	895a      	ldrh	r2, [r3, #10]
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	891b      	ldrh	r3, [r3, #8]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d10a      	bne.n	800bb60 <etharp_query+0x1c0>
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d006      	beq.n	800bb60 <etharp_query+0x1c0>
 800bb52:	4b2a      	ldr	r3, [pc, #168]	@ (800bbfc <etharp_query+0x25c>)
 800bb54:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800bb58:	492f      	ldr	r1, [pc, #188]	@ (800bc18 <etharp_query+0x278>)
 800bb5a:	482a      	ldr	r0, [pc, #168]	@ (800bc04 <etharp_query+0x264>)
 800bb5c:	f001 fd98 	bl	800d690 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	7b1b      	ldrb	r3, [r3, #12]
 800bb64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <etharp_query+0x1d2>
        copy_needed = 1;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	61bb      	str	r3, [r7, #24]
        break;
 800bb70:	e005      	b.n	800bb7e <etharp_query+0x1de>
      }
      p = p->next;
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1df      	bne.n	800bb3e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d007      	beq.n	800bb94 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800bb8a:	200e      	movs	r0, #14
 800bb8c:	f7f9 fd2c 	bl	80055e8 <pbuf_clone>
 800bb90:	61f8      	str	r0, [r7, #28]
 800bb92:	e004      	b.n	800bb9e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bb98:	69f8      	ldr	r0, [r7, #28]
 800bb9a:	f7f9 fb69 	bl	8005270 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d021      	beq.n	800bbe8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bba4:	7c7a      	ldrb	r2, [r7, #17]
 800bba6:	4918      	ldr	r1, [pc, #96]	@ (800bc08 <etharp_query+0x268>)
 800bba8:	4613      	mov	r3, r2
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	4413      	add	r3, r2
 800bbae:	00db      	lsls	r3, r3, #3
 800bbb0:	440b      	add	r3, r1
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800bbb8:	7c7a      	ldrb	r2, [r7, #17]
 800bbba:	4913      	ldr	r1, [pc, #76]	@ (800bc08 <etharp_query+0x268>)
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	440b      	add	r3, r1
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7f9 fab1 	bl	8005130 <pbuf_free>
      }
      arp_table[i].q = p;
 800bbce:	7c7a      	ldrb	r2, [r7, #17]
 800bbd0:	490d      	ldr	r1, [pc, #52]	@ (800bc08 <etharp_query+0x268>)
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4413      	add	r3, r2
 800bbd8:	00db      	lsls	r3, r3, #3
 800bbda:	440b      	add	r3, r1
 800bbdc:	69fa      	ldr	r2, [r7, #28]
 800bbde:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbe6:	e002      	b.n	800bbee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bbe8:	23ff      	movs	r3, #255	@ 0xff
 800bbea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800bbee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3728      	adds	r7, #40	@ 0x28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	080107d8 	.word	0x080107d8
 800bc00:	08010984 	.word	0x08010984
 800bc04:	08010850 	.word	0x08010850
 800bc08:	20006998 	.word	0x20006998
 800bc0c:	08010994 	.word	0x08010994
 800bc10:	08010978 	.word	0x08010978
 800bc14:	20006a88 	.word	0x20006a88
 800bc18:	080109bc 	.word	0x080109bc

0800bc1c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	@ 0x28
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d106      	bne.n	800bc42 <etharp_raw+0x26>
 800bc34:	4b3a      	ldr	r3, [pc, #232]	@ (800bd20 <etharp_raw+0x104>)
 800bc36:	f240 4257 	movw	r2, #1111	@ 0x457
 800bc3a:	493a      	ldr	r1, [pc, #232]	@ (800bd24 <etharp_raw+0x108>)
 800bc3c:	483a      	ldr	r0, [pc, #232]	@ (800bd28 <etharp_raw+0x10c>)
 800bc3e:	f001 fd27 	bl	800d690 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bc42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bc46:	211c      	movs	r1, #28
 800bc48:	200e      	movs	r0, #14
 800bc4a:	f7f8 ff8d 	bl	8004b68 <pbuf_alloc>
 800bc4e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d102      	bne.n	800bc5c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bc56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc5a:	e05d      	b.n	800bd18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	895b      	ldrh	r3, [r3, #10]
 800bc60:	2b1b      	cmp	r3, #27
 800bc62:	d806      	bhi.n	800bc72 <etharp_raw+0x56>
 800bc64:	4b2e      	ldr	r3, [pc, #184]	@ (800bd20 <etharp_raw+0x104>)
 800bc66:	f240 4262 	movw	r2, #1122	@ 0x462
 800bc6a:	4930      	ldr	r1, [pc, #192]	@ (800bd2c <etharp_raw+0x110>)
 800bc6c:	482e      	ldr	r0, [pc, #184]	@ (800bd28 <etharp_raw+0x10c>)
 800bc6e:	f001 fd0f 	bl	800d690 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bc78:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f7 fefa 	bl	8003a74 <lwip_htons>
 800bc80:	4603      	mov	r3, r0
 800bc82:	461a      	mov	r2, r3
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bc8e:	2b06      	cmp	r3, #6
 800bc90:	d006      	beq.n	800bca0 <etharp_raw+0x84>
 800bc92:	4b23      	ldr	r3, [pc, #140]	@ (800bd20 <etharp_raw+0x104>)
 800bc94:	f240 4269 	movw	r2, #1129	@ 0x469
 800bc98:	4925      	ldr	r1, [pc, #148]	@ (800bd30 <etharp_raw+0x114>)
 800bc9a:	4823      	ldr	r0, [pc, #140]	@ (800bd28 <etharp_raw+0x10c>)
 800bc9c:	f001 fcf8 	bl	800d690 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	3308      	adds	r3, #8
 800bca4:	2206      	movs	r2, #6
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f001 fdcc 	bl	800d846 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	3312      	adds	r3, #18
 800bcb2:	2206      	movs	r2, #6
 800bcb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f001 fdc5 	bl	800d846 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	330e      	adds	r3, #14
 800bcc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcc2:	6812      	ldr	r2, [r2, #0]
 800bcc4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	3318      	adds	r3, #24
 800bcca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bccc:	6812      	ldr	r2, [r2, #0]
 800bcce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f042 0201 	orr.w	r2, r2, #1
 800bcdc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f042 0208 	orr.w	r2, r2, #8
 800bce6:	709a      	strb	r2, [r3, #2]
 800bce8:	2200      	movs	r2, #0
 800bcea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	2206      	movs	r2, #6
 800bcf0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2204      	movs	r2, #4
 800bcf6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bcf8:	f640 0306 	movw	r3, #2054	@ 0x806
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	69b9      	ldr	r1, [r7, #24]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f001 fb7b 	bl	800d400 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bd0a:	69b8      	ldr	r0, [r7, #24]
 800bd0c:	f7f9 fa10 	bl	8005130 <pbuf_free>
  p = NULL;
 800bd10:	2300      	movs	r3, #0
 800bd12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bd14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3720      	adds	r7, #32
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	080107d8 	.word	0x080107d8
 800bd24:	08010928 	.word	0x08010928
 800bd28:	08010850 	.word	0x08010850
 800bd2c:	080109d8 	.word	0x080109d8
 800bd30:	08010a0c 	.word	0x08010a0c

0800bd34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af04      	add	r7, sp, #16
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bd50:	2201      	movs	r2, #1
 800bd52:	9203      	str	r2, [sp, #12]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	9202      	str	r2, [sp, #8]
 800bd58:	4a06      	ldr	r2, [pc, #24]	@ (800bd74 <etharp_request_dst+0x40>)
 800bd5a:	9201      	str	r2, [sp, #4]
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4603      	mov	r3, r0
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7ff ff5a 	bl	800bc1c <etharp_raw>
 800bd68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	08010f94 	.word	0x08010f94

0800bd78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bd82:	4a05      	ldr	r2, [pc, #20]	@ (800bd98 <etharp_request+0x20>)
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff ffd4 	bl	800bd34 <etharp_request_dst>
 800bd8c:	4603      	mov	r3, r0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	08010f8c 	.word	0x08010f8c

0800bd9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b08e      	sub	sp, #56	@ 0x38
 800bda0:	af04      	add	r7, sp, #16
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bda6:	4b79      	ldr	r3, [pc, #484]	@ (800bf8c <icmp_input+0x1f0>)
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	f003 030f 	and.w	r3, r3, #15
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800bdbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bdbe:	2b13      	cmp	r3, #19
 800bdc0:	f240 80cd 	bls.w	800bf5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	895b      	ldrh	r3, [r3, #10]
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	f240 80ca 	bls.w	800bf62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bdd8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 80b7 	beq.w	800bf50 <icmp_input+0x1b4>
 800bde2:	2b08      	cmp	r3, #8
 800bde4:	f040 80b7 	bne.w	800bf56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bde8:	4b69      	ldr	r3, [pc, #420]	@ (800bf90 <icmp_input+0x1f4>)
 800bdea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bdec:	4b67      	ldr	r3, [pc, #412]	@ (800bf8c <icmp_input+0x1f0>)
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdf4:	2be0      	cmp	r3, #224	@ 0xe0
 800bdf6:	f000 80bb 	beq.w	800bf70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bdfa:	4b64      	ldr	r3, [pc, #400]	@ (800bf8c <icmp_input+0x1f0>)
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	4a63      	ldr	r2, [pc, #396]	@ (800bf8c <icmp_input+0x1f0>)
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fbed 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f040 80b1 	bne.w	800bf74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	891b      	ldrh	r3, [r3, #8]
 800be16:	2b07      	cmp	r3, #7
 800be18:	f240 80a5 	bls.w	800bf66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800be1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be1e:	330e      	adds	r3, #14
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7f9 f8ee 	bl	8005004 <pbuf_add_header>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d04b      	beq.n	800bec6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	891a      	ldrh	r2, [r3, #8]
 800be32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be34:	4413      	add	r3, r2
 800be36:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	891b      	ldrh	r3, [r3, #8]
 800be3c:	8b7a      	ldrh	r2, [r7, #26]
 800be3e:	429a      	cmp	r2, r3
 800be40:	f0c0 809a 	bcc.w	800bf78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800be44:	8b7b      	ldrh	r3, [r7, #26]
 800be46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be4a:	4619      	mov	r1, r3
 800be4c:	200e      	movs	r0, #14
 800be4e:	f7f8 fe8b 	bl	8004b68 <pbuf_alloc>
 800be52:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 8090 	beq.w	800bf7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	895b      	ldrh	r3, [r3, #10]
 800be60:	461a      	mov	r2, r3
 800be62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be64:	3308      	adds	r3, #8
 800be66:	429a      	cmp	r2, r3
 800be68:	d203      	bcs.n	800be72 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800be6a:	6978      	ldr	r0, [r7, #20]
 800be6c:	f7f9 f960 	bl	8005130 <pbuf_free>
          goto icmperr;
 800be70:	e085      	b.n	800bf7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800be78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 fce3 	bl	800d846 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800be80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800be82:	4619      	mov	r1, r3
 800be84:	6978      	ldr	r0, [r7, #20]
 800be86:	f7f9 f8cd 	bl	8005024 <pbuf_remove_header>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d009      	beq.n	800bea4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800be90:	4b40      	ldr	r3, [pc, #256]	@ (800bf94 <icmp_input+0x1f8>)
 800be92:	22b6      	movs	r2, #182	@ 0xb6
 800be94:	4940      	ldr	r1, [pc, #256]	@ (800bf98 <icmp_input+0x1fc>)
 800be96:	4841      	ldr	r0, [pc, #260]	@ (800bf9c <icmp_input+0x200>)
 800be98:	f001 fbfa 	bl	800d690 <iprintf>
          pbuf_free(r);
 800be9c:	6978      	ldr	r0, [r7, #20]
 800be9e:	f7f9 f947 	bl	8005130 <pbuf_free>
          goto icmperr;
 800bea2:	e06c      	b.n	800bf7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	6978      	ldr	r0, [r7, #20]
 800bea8:	f7f9 fa5a 	bl	8005360 <pbuf_copy>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800beb2:	6978      	ldr	r0, [r7, #20]
 800beb4:	f7f9 f93c 	bl	8005130 <pbuf_free>
          goto icmperr;
 800beb8:	e061      	b.n	800bf7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7f9 f938 	bl	8005130 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	e00f      	b.n	800bee6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bec6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bec8:	330e      	adds	r3, #14
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7f9 f8a9 	bl	8005024 <pbuf_remove_header>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d006      	beq.n	800bee6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bed8:	4b2e      	ldr	r3, [pc, #184]	@ (800bf94 <icmp_input+0x1f8>)
 800beda:	22c7      	movs	r2, #199	@ 0xc7
 800bedc:	4930      	ldr	r1, [pc, #192]	@ (800bfa0 <icmp_input+0x204>)
 800bede:	482f      	ldr	r0, [pc, #188]	@ (800bf9c <icmp_input+0x200>)
 800bee0:	f001 fbd6 	bl	800d690 <iprintf>
          goto icmperr;
 800bee4:	e04b      	b.n	800bf7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800beec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7f9 f887 	bl	8005004 <pbuf_add_header>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d12b      	bne.n	800bf54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bf0a:	4b20      	ldr	r3, [pc, #128]	@ (800bf8c <icmp_input+0x1f0>)
 800bf0c:	691a      	ldr	r2, [r3, #16]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2200      	movs	r2, #0
 800bf16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	709a      	strb	r2, [r3, #2]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	22ff      	movs	r2, #255	@ 0xff
 800bf26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	729a      	strb	r2, [r3, #10]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	9302      	str	r3, [sp, #8]
 800bf36:	2301      	movs	r3, #1
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	23ff      	movs	r3, #255	@ 0xff
 800bf40:	2200      	movs	r2, #0
 800bf42:	69f9      	ldr	r1, [r7, #28]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fa75 	bl	800c434 <ip4_output_if>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bf4e:	e001      	b.n	800bf54 <icmp_input+0x1b8>
      break;
 800bf50:	bf00      	nop
 800bf52:	e000      	b.n	800bf56 <icmp_input+0x1ba>
      break;
 800bf54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7f9 f8ea 	bl	8005130 <pbuf_free>
  return;
 800bf5c:	e013      	b.n	800bf86 <icmp_input+0x1ea>
    goto lenerr;
 800bf5e:	bf00      	nop
 800bf60:	e002      	b.n	800bf68 <icmp_input+0x1cc>
    goto lenerr;
 800bf62:	bf00      	nop
 800bf64:	e000      	b.n	800bf68 <icmp_input+0x1cc>
        goto lenerr;
 800bf66:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7f9 f8e1 	bl	8005130 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bf6e:	e00a      	b.n	800bf86 <icmp_input+0x1ea>
        goto icmperr;
 800bf70:	bf00      	nop
 800bf72:	e004      	b.n	800bf7e <icmp_input+0x1e2>
        goto icmperr;
 800bf74:	bf00      	nop
 800bf76:	e002      	b.n	800bf7e <icmp_input+0x1e2>
          goto icmperr;
 800bf78:	bf00      	nop
 800bf7a:	e000      	b.n	800bf7e <icmp_input+0x1e2>
          goto icmperr;
 800bf7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7f9 f8d6 	bl	8005130 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bf84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bf86:	3728      	adds	r7, #40	@ 0x28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20000208 	.word	0x20000208
 800bf90:	2000021c 	.word	0x2000021c
 800bf94:	08010a50 	.word	0x08010a50
 800bf98:	08010a88 	.word	0x08010a88
 800bf9c:	08010ac0 	.word	0x08010ac0
 800bfa0:	08010ae8 	.word	0x08010ae8

0800bfa4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	2103      	movs	r1, #3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f814 	bl	800bfe4 <icmp_send_response>
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	210b      	movs	r1, #11
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f804 	bl	800bfe4 <icmp_send_response>
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08c      	sub	sp, #48	@ 0x30
 800bfe8:	af04      	add	r7, sp, #16
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
 800bff0:	4613      	mov	r3, r2
 800bff2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bff4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bff8:	2124      	movs	r1, #36	@ 0x24
 800bffa:	2022      	movs	r0, #34	@ 0x22
 800bffc:	f7f8 fdb4 	bl	8004b68 <pbuf_alloc>
 800c000:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d04c      	beq.n	800c0a2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	895b      	ldrh	r3, [r3, #10]
 800c00c:	2b23      	cmp	r3, #35	@ 0x23
 800c00e:	d806      	bhi.n	800c01e <icmp_send_response+0x3a>
 800c010:	4b26      	ldr	r3, [pc, #152]	@ (800c0ac <icmp_send_response+0xc8>)
 800c012:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c016:	4926      	ldr	r1, [pc, #152]	@ (800c0b0 <icmp_send_response+0xcc>)
 800c018:	4826      	ldr	r0, [pc, #152]	@ (800c0b4 <icmp_send_response+0xd0>)
 800c01a:	f001 fb39 	bl	800d690 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	78fa      	ldrb	r2, [r7, #3]
 800c02e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	78ba      	ldrb	r2, [r7, #2]
 800c034:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2200      	movs	r2, #0
 800c03a:	711a      	strb	r2, [r3, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	2200      	movs	r2, #0
 800c044:	719a      	strb	r2, [r3, #6]
 800c046:	2200      	movs	r2, #0
 800c048:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	f103 0008 	add.w	r0, r3, #8
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	221c      	movs	r2, #28
 800c058:	4619      	mov	r1, r3
 800c05a:	f001 fbf4 	bl	800d846 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c064:	f107 030c 	add.w	r3, r7, #12
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 f825 	bl	800c0b8 <ip4_route>
 800c06e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d011      	beq.n	800c09a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2200      	movs	r2, #0
 800c07a:	709a      	strb	r2, [r3, #2]
 800c07c:	2200      	movs	r2, #0
 800c07e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c080:	f107 020c 	add.w	r2, r7, #12
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	9302      	str	r3, [sp, #8]
 800c088:	2301      	movs	r3, #1
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	2300      	movs	r3, #0
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	23ff      	movs	r3, #255	@ 0xff
 800c092:	2100      	movs	r1, #0
 800c094:	69f8      	ldr	r0, [r7, #28]
 800c096:	f000 f9cd 	bl	800c434 <ip4_output_if>
  }
  pbuf_free(q);
 800c09a:	69f8      	ldr	r0, [r7, #28]
 800c09c:	f7f9 f848 	bl	8005130 <pbuf_free>
 800c0a0:	e000      	b.n	800c0a4 <icmp_send_response+0xc0>
    return;
 800c0a2:	bf00      	nop
}
 800c0a4:	3720      	adds	r7, #32
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08010a50 	.word	0x08010a50
 800c0b0:	08010b1c 	.word	0x08010b1c
 800c0b4:	08010ac0 	.word	0x08010ac0

0800c0b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c0c0:	4b33      	ldr	r3, [pc, #204]	@ (800c190 <ip4_route+0xd8>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]
 800c0c6:	e036      	b.n	800c136 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d02b      	beq.n	800c130 <ip4_route+0x78>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0de:	089b      	lsrs	r3, r3, #2
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d022      	beq.n	800c130 <ip4_route+0x78>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01d      	beq.n	800c130 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	405a      	eors	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3308      	adds	r3, #8
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4013      	ands	r3, r2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	e038      	b.n	800c182 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d108      	bne.n	800c130 <ip4_route+0x78>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	330c      	adds	r3, #12
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d101      	bne.n	800c130 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	e028      	b.n	800c182 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1c5      	bne.n	800c0c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c13c:	4b15      	ldr	r3, [pc, #84]	@ (800c194 <ip4_route+0xdc>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d01a      	beq.n	800c17a <ip4_route+0xc2>
 800c144:	4b13      	ldr	r3, [pc, #76]	@ (800c194 <ip4_route+0xdc>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d012      	beq.n	800c17a <ip4_route+0xc2>
 800c154:	4b0f      	ldr	r3, [pc, #60]	@ (800c194 <ip4_route+0xdc>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c164:	4b0b      	ldr	r3, [pc, #44]	@ (800c194 <ip4_route+0xdc>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	3304      	adds	r3, #4
 800c16a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b7f      	cmp	r3, #127	@ 0x7f
 800c178:	d101      	bne.n	800c17e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e001      	b.n	800c182 <ip4_route+0xca>
  }

  return netif_default;
 800c17e:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <ip4_route+0xdc>)
 800c180:	681b      	ldr	r3, [r3, #0]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	2000692c 	.word	0x2000692c
 800c194:	20006930 	.word	0x20006930

0800c198 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d016      	beq.n	800c1de <ip4_input_accept+0x46>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d011      	beq.n	800c1de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c1e8 <ip4_input_accept+0x50>)
 800c1bc:	695a      	ldr	r2, [r3, #20]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d008      	beq.n	800c1da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c1c8:	4b07      	ldr	r3, [pc, #28]	@ (800c1e8 <ip4_input_accept+0x50>)
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 fa08 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800c1d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	20000208 	.word	0x20000208

0800c1ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	091b      	lsrs	r3, r3, #4
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b04      	cmp	r3, #4
 800c206:	d004      	beq.n	800c212 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7f8 ff91 	bl	8005130 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	e107      	b.n	800c422 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	f003 030f 	and.w	r3, r3, #15
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	885b      	ldrh	r3, [r3, #2]
 800c226:	b29b      	uxth	r3, r3
 800c228:	4618      	mov	r0, r3
 800c22a:	f7f7 fc23 	bl	8003a74 <lwip_htons>
 800c22e:	4603      	mov	r3, r0
 800c230:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	891b      	ldrh	r3, [r3, #8]
 800c236:	89ba      	ldrh	r2, [r7, #12]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d204      	bcs.n	800c246 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c23c:	89bb      	ldrh	r3, [r7, #12]
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7f8 fdef 	bl	8004e24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	895b      	ldrh	r3, [r3, #10]
 800c24a:	89fa      	ldrh	r2, [r7, #14]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d807      	bhi.n	800c260 <ip4_input+0x74>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	891b      	ldrh	r3, [r3, #8]
 800c254:	89ba      	ldrh	r2, [r7, #12]
 800c256:	429a      	cmp	r2, r3
 800c258:	d802      	bhi.n	800c260 <ip4_input+0x74>
 800c25a:	89fb      	ldrh	r3, [r7, #14]
 800c25c:	2b13      	cmp	r3, #19
 800c25e:	d804      	bhi.n	800c26a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7f8 ff65 	bl	8005130 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	e0db      	b.n	800c422 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	4a6f      	ldr	r2, [pc, #444]	@ (800c42c <ip4_input+0x240>)
 800c270:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4a6d      	ldr	r2, [pc, #436]	@ (800c42c <ip4_input+0x240>)
 800c278:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c27a:	4b6c      	ldr	r3, [pc, #432]	@ (800c42c <ip4_input+0x240>)
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c282:	2be0      	cmp	r3, #224	@ 0xe0
 800c284:	d112      	bne.n	800c2ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	d007      	beq.n	800c2a6 <ip4_input+0xba>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <ip4_input+0xba>
      netif = inp;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	613b      	str	r3, [r7, #16]
 800c2a4:	e02a      	b.n	800c2fc <ip4_input+0x110>
    } else {
      netif = NULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	613b      	str	r3, [r7, #16]
 800c2aa:	e027      	b.n	800c2fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c2ac:	6838      	ldr	r0, [r7, #0]
 800c2ae:	f7ff ff73 	bl	800c198 <ip4_input_accept>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <ip4_input+0xd2>
      netif = inp;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	613b      	str	r3, [r7, #16]
 800c2bc:	e01e      	b.n	800c2fc <ip4_input+0x110>
    } else {
      netif = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c2c2:	4b5a      	ldr	r3, [pc, #360]	@ (800c42c <ip4_input+0x240>)
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2ca:	d017      	beq.n	800c2fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c2cc:	4b58      	ldr	r3, [pc, #352]	@ (800c430 <ip4_input+0x244>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	613b      	str	r3, [r7, #16]
 800c2d2:	e00e      	b.n	800c2f2 <ip4_input+0x106>
          if (netif == inp) {
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d006      	beq.n	800c2ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c2dc:	6938      	ldr	r0, [r7, #16]
 800c2de:	f7ff ff5b 	bl	800c198 <ip4_input_accept>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d108      	bne.n	800c2fa <ip4_input+0x10e>
 800c2e8:	e000      	b.n	800c2ec <ip4_input+0x100>
            continue;
 800c2ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	613b      	str	r3, [r7, #16]
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1ed      	bne.n	800c2d4 <ip4_input+0xe8>
 800c2f8:	e000      	b.n	800c2fc <ip4_input+0x110>
            break;
 800c2fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c2fc:	4b4b      	ldr	r3, [pc, #300]	@ (800c42c <ip4_input+0x240>)
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f96e 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d105      	bne.n	800c31a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c30e:	4b47      	ldr	r3, [pc, #284]	@ (800c42c <ip4_input+0x240>)
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c316:	2be0      	cmp	r3, #224	@ 0xe0
 800c318:	d104      	bne.n	800c324 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7f8 ff08 	bl	8005130 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	e07e      	b.n	800c422 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d104      	bne.n	800c334 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7f8 ff00 	bl	8005130 <pbuf_free>
    return ERR_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	e076      	b.n	800c422 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	88db      	ldrh	r3, [r3, #6]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	461a      	mov	r2, r3
 800c33c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c340:	4013      	ands	r3, r2
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fc92 	bl	800cc70 <ip4_reass>
 800c34c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <ip4_input+0x16c>
      return ERR_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	e064      	b.n	800c422 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c35e:	4a33      	ldr	r2, [pc, #204]	@ (800c42c <ip4_input+0x240>)
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c364:	4a31      	ldr	r2, [pc, #196]	@ (800c42c <ip4_input+0x240>)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c36a:	4a30      	ldr	r2, [pc, #192]	@ (800c42c <ip4_input+0x240>)
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 030f 	and.w	r3, r3, #15
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	461a      	mov	r2, r3
 800c380:	4b2a      	ldr	r3, [pc, #168]	@ (800c42c <ip4_input+0x240>)
 800c382:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c384:	89fb      	ldrh	r3, [r7, #14]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7f8 fe4b 	bl	8005024 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	7a5b      	ldrb	r3, [r3, #9]
 800c392:	2b11      	cmp	r3, #17
 800c394:	d006      	beq.n	800c3a4 <ip4_input+0x1b8>
 800c396:	2b11      	cmp	r3, #17
 800c398:	dc13      	bgt.n	800c3c2 <ip4_input+0x1d6>
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d00c      	beq.n	800c3b8 <ip4_input+0x1cc>
 800c39e:	2b06      	cmp	r3, #6
 800c3a0:	d005      	beq.n	800c3ae <ip4_input+0x1c2>
 800c3a2:	e00e      	b.n	800c3c2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7fe fc68 	bl	800ac7c <udp_input>
        break;
 800c3ac:	e026      	b.n	800c3fc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7fa fce7 	bl	8006d84 <tcp_input>
        break;
 800c3b6:	e021      	b.n	800c3fc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff fcee 	bl	800bd9c <icmp_input>
        break;
 800c3c0:	e01c      	b.n	800c3fc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c3c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c42c <ip4_input+0x240>)
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	6939      	ldr	r1, [r7, #16]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f90b 	bl	800c5e4 <ip4_addr_isbroadcast_u32>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10f      	bne.n	800c3f4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c3d4:	4b15      	ldr	r3, [pc, #84]	@ (800c42c <ip4_input+0x240>)
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c3dc:	2be0      	cmp	r3, #224	@ 0xe0
 800c3de:	d009      	beq.n	800c3f4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c3e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7f8 fe8f 	bl	800510a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c3ec:	2102      	movs	r1, #2
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff fdd8 	bl	800bfa4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7f8 fe9b 	bl	8005130 <pbuf_free>
        break;
 800c3fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c3fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c42c <ip4_input+0x240>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c402:	4b0a      	ldr	r3, [pc, #40]	@ (800c42c <ip4_input+0x240>)
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c408:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <ip4_input+0x240>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c40e:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <ip4_input+0x240>)
 800c410:	2200      	movs	r2, #0
 800c412:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c414:	4b05      	ldr	r3, [pc, #20]	@ (800c42c <ip4_input+0x240>)
 800c416:	2200      	movs	r2, #0
 800c418:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c41a:	4b04      	ldr	r3, [pc, #16]	@ (800c42c <ip4_input+0x240>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20000208 	.word	0x20000208
 800c430:	2000692c 	.word	0x2000692c

0800c434 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	@ 0x28
 800c438:	af04      	add	r7, sp, #16
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d009      	beq.n	800c460 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d003      	beq.n	800c45a <ip4_output_if+0x26>
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	3304      	adds	r3, #4
 800c45e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c460:	78fa      	ldrb	r2, [r7, #3]
 800c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c464:	9302      	str	r3, [sp, #8]
 800c466:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c46a:	9301      	str	r3, [sp, #4]
 800c46c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	4613      	mov	r3, r2
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6979      	ldr	r1, [r7, #20]
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f000 f805 	bl	800c488 <ip4_output_if_src>
 800c47e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
 800c494:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	7b9b      	ldrb	r3, [r3, #14]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d006      	beq.n	800c4ac <ip4_output_if_src+0x24>
 800c49e:	4b4b      	ldr	r3, [pc, #300]	@ (800c5cc <ip4_output_if_src+0x144>)
 800c4a0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800c4a4:	494a      	ldr	r1, [pc, #296]	@ (800c5d0 <ip4_output_if_src+0x148>)
 800c4a6:	484b      	ldr	r0, [pc, #300]	@ (800c5d4 <ip4_output_if_src+0x14c>)
 800c4a8:	f001 f8f2 	bl	800d690 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d060      	beq.n	800c574 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c4b2:	2314      	movs	r3, #20
 800c4b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c4b6:	2114      	movs	r1, #20
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7f8 fda3 	bl	8005004 <pbuf_add_header>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c4c4:	f06f 0301 	mvn.w	r3, #1
 800c4c8:	e07c      	b.n	800c5c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	895b      	ldrh	r3, [r3, #10]
 800c4d4:	2b13      	cmp	r3, #19
 800c4d6:	d806      	bhi.n	800c4e6 <ip4_output_if_src+0x5e>
 800c4d8:	4b3c      	ldr	r3, [pc, #240]	@ (800c5cc <ip4_output_if_src+0x144>)
 800c4da:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800c4de:	493e      	ldr	r1, [pc, #248]	@ (800c5d8 <ip4_output_if_src+0x150>)
 800c4e0:	483c      	ldr	r0, [pc, #240]	@ (800c5d4 <ip4_output_if_src+0x14c>)
 800c4e2:	f001 f8d5 	bl	800d690 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	78fa      	ldrb	r2, [r7, #3]
 800c4ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800c4f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c4fc:	8b7b      	ldrh	r3, [r7, #26]
 800c4fe:	089b      	lsrs	r3, r3, #2
 800c500:	b29b      	uxth	r3, r3
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c514:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	891b      	ldrh	r3, [r3, #8]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7f7 faaa 	bl	8003a74 <lwip_htons>
 800c520:	4603      	mov	r3, r0
 800c522:	461a      	mov	r2, r3
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	2200      	movs	r2, #0
 800c52c:	719a      	strb	r2, [r3, #6]
 800c52e:	2200      	movs	r2, #0
 800c530:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c532:	4b2a      	ldr	r3, [pc, #168]	@ (800c5dc <ip4_output_if_src+0x154>)
 800c534:	881b      	ldrh	r3, [r3, #0]
 800c536:	4618      	mov	r0, r3
 800c538:	f7f7 fa9c 	bl	8003a74 <lwip_htons>
 800c53c:	4603      	mov	r3, r0
 800c53e:	461a      	mov	r2, r3
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c544:	4b25      	ldr	r3, [pc, #148]	@ (800c5dc <ip4_output_if_src+0x154>)
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	3301      	adds	r3, #1
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	4b23      	ldr	r3, [pc, #140]	@ (800c5dc <ip4_output_if_src+0x154>)
 800c54e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d104      	bne.n	800c560 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c556:	4b22      	ldr	r3, [pc, #136]	@ (800c5e0 <ip4_output_if_src+0x158>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	60da      	str	r2, [r3, #12]
 800c55e:	e003      	b.n	800c568 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	2200      	movs	r2, #0
 800c56c:	729a      	strb	r2, [r3, #10]
 800c56e:	2200      	movs	r2, #0
 800c570:	72da      	strb	r2, [r3, #11]
 800c572:	e00f      	b.n	800c594 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	895b      	ldrh	r3, [r3, #10]
 800c578:	2b13      	cmp	r3, #19
 800c57a:	d802      	bhi.n	800c582 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c57c:	f06f 0301 	mvn.w	r3, #1
 800c580:	e020      	b.n	800c5c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c58e:	f107 0314 	add.w	r3, r7, #20
 800c592:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c596:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00c      	beq.n	800c5b6 <ip4_output_if_src+0x12e>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	891a      	ldrh	r2, [r3, #8]
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d906      	bls.n	800c5b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 fd53 	bl	800d058 <ip4_frag>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	e006      	b.n	800c5c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	68f9      	ldr	r1, [r7, #12]
 800c5be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5c0:	4798      	blx	r3
 800c5c2:	4603      	mov	r3, r0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3720      	adds	r7, #32
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	08010b48 	.word	0x08010b48
 800c5d0:	08010b7c 	.word	0x08010b7c
 800c5d4:	08010b88 	.word	0x08010b88
 800c5d8:	08010bb0 	.word	0x08010bb0
 800c5dc:	20006a8a 	.word	0x20006a8a
 800c5e0:	08010f88 	.word	0x08010f88

0800c5e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5f8:	d002      	beq.n	800c600 <ip4_addr_isbroadcast_u32+0x1c>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c600:	2301      	movs	r3, #1
 800c602:	e02a      	b.n	800c65a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c60a:	f003 0302 	and.w	r3, r3, #2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c612:	2300      	movs	r3, #0
 800c614:	e021      	b.n	800c65a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	3304      	adds	r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d101      	bne.n	800c626 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c622:	2300      	movs	r3, #0
 800c624:	e019      	b.n	800c65a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	3304      	adds	r3, #4
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	405a      	eors	r2, r3
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4013      	ands	r3, r2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10d      	bne.n	800c658 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	3308      	adds	r3, #8
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	43da      	mvns	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	3308      	adds	r3, #8
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c650:	429a      	cmp	r2, r3
 800c652:	d101      	bne.n	800c658 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c654:	2301      	movs	r3, #1
 800c656:	e000      	b.n	800c65a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c658:	2300      	movs	r3, #0
  }
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c66e:	2300      	movs	r3, #0
 800c670:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c672:	4b12      	ldr	r3, [pc, #72]	@ (800c6bc <ip_reass_tmr+0x54>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c678:	e018      	b.n	800c6ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	7fdb      	ldrb	r3, [r3, #31]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00b      	beq.n	800c69a <ip_reass_tmr+0x32>
      r->timer--;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	7fdb      	ldrb	r3, [r3, #31]
 800c686:	3b01      	subs	r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	e008      	b.n	800c6ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c6a4:	68b9      	ldr	r1, [r7, #8]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f80a 	bl	800c6c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1e3      	bne.n	800c67a <ip_reass_tmr+0x12>
    }
  }
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20006a8c 	.word	0x20006a8c

0800c6c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d105      	bne.n	800c6e2 <ip_reass_free_complete_datagram+0x22>
 800c6d6:	4b45      	ldr	r3, [pc, #276]	@ (800c7ec <ip_reass_free_complete_datagram+0x12c>)
 800c6d8:	22ab      	movs	r2, #171	@ 0xab
 800c6da:	4945      	ldr	r1, [pc, #276]	@ (800c7f0 <ip_reass_free_complete_datagram+0x130>)
 800c6dc:	4845      	ldr	r0, [pc, #276]	@ (800c7f4 <ip_reass_free_complete_datagram+0x134>)
 800c6de:	f000 ffd7 	bl	800d690 <iprintf>
  if (prev != NULL) {
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00a      	beq.n	800c6fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d005      	beq.n	800c6fe <ip_reass_free_complete_datagram+0x3e>
 800c6f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c7ec <ip_reass_free_complete_datagram+0x12c>)
 800c6f4:	22ad      	movs	r2, #173	@ 0xad
 800c6f6:	4940      	ldr	r1, [pc, #256]	@ (800c7f8 <ip_reass_free_complete_datagram+0x138>)
 800c6f8:	483e      	ldr	r0, [pc, #248]	@ (800c7f4 <ip_reass_free_complete_datagram+0x134>)
 800c6fa:	f000 ffc9 	bl	800d690 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	889b      	ldrh	r3, [r3, #4]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d12a      	bne.n	800c766 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	6858      	ldr	r0, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3308      	adds	r3, #8
 800c726:	2214      	movs	r2, #20
 800c728:	4619      	mov	r1, r3
 800c72a:	f001 f88c 	bl	800d846 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c72e:	2101      	movs	r1, #1
 800c730:	69b8      	ldr	r0, [r7, #24]
 800c732:	f7ff fc47 	bl	800bfc4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c736:	69b8      	ldr	r0, [r7, #24]
 800c738:	f7f8 fd82 	bl	8005240 <pbuf_clen>
 800c73c:	4603      	mov	r3, r0
 800c73e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c740:	8bfa      	ldrh	r2, [r7, #30]
 800c742:	8a7b      	ldrh	r3, [r7, #18]
 800c744:	4413      	add	r3, r2
 800c746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c74a:	db05      	blt.n	800c758 <ip_reass_free_complete_datagram+0x98>
 800c74c:	4b27      	ldr	r3, [pc, #156]	@ (800c7ec <ip_reass_free_complete_datagram+0x12c>)
 800c74e:	22bc      	movs	r2, #188	@ 0xbc
 800c750:	492a      	ldr	r1, [pc, #168]	@ (800c7fc <ip_reass_free_complete_datagram+0x13c>)
 800c752:	4828      	ldr	r0, [pc, #160]	@ (800c7f4 <ip_reass_free_complete_datagram+0x134>)
 800c754:	f000 ff9c 	bl	800d690 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c758:	8bfa      	ldrh	r2, [r7, #30]
 800c75a:	8a7b      	ldrh	r3, [r7, #18]
 800c75c:	4413      	add	r3, r2
 800c75e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c760:	69b8      	ldr	r0, [r7, #24]
 800c762:	f7f8 fce5 	bl	8005130 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c76c:	e01f      	b.n	800c7ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7f8 fd5e 	bl	8005240 <pbuf_clen>
 800c784:	4603      	mov	r3, r0
 800c786:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c788:	8bfa      	ldrh	r2, [r7, #30]
 800c78a:	8a7b      	ldrh	r3, [r7, #18]
 800c78c:	4413      	add	r3, r2
 800c78e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c792:	db05      	blt.n	800c7a0 <ip_reass_free_complete_datagram+0xe0>
 800c794:	4b15      	ldr	r3, [pc, #84]	@ (800c7ec <ip_reass_free_complete_datagram+0x12c>)
 800c796:	22cc      	movs	r2, #204	@ 0xcc
 800c798:	4918      	ldr	r1, [pc, #96]	@ (800c7fc <ip_reass_free_complete_datagram+0x13c>)
 800c79a:	4816      	ldr	r0, [pc, #88]	@ (800c7f4 <ip_reass_free_complete_datagram+0x134>)
 800c79c:	f000 ff78 	bl	800d690 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c7a0:	8bfa      	ldrh	r2, [r7, #30]
 800c7a2:	8a7b      	ldrh	r3, [r7, #18]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f7f8 fcc1 	bl	8005130 <pbuf_free>
  while (p != NULL) {
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1dc      	bne.n	800c76e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f8c2 	bl	800c940 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c7bc:	4b10      	ldr	r3, [pc, #64]	@ (800c800 <ip_reass_free_complete_datagram+0x140>)
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	8bfa      	ldrh	r2, [r7, #30]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d905      	bls.n	800c7d2 <ip_reass_free_complete_datagram+0x112>
 800c7c6:	4b09      	ldr	r3, [pc, #36]	@ (800c7ec <ip_reass_free_complete_datagram+0x12c>)
 800c7c8:	22d2      	movs	r2, #210	@ 0xd2
 800c7ca:	490e      	ldr	r1, [pc, #56]	@ (800c804 <ip_reass_free_complete_datagram+0x144>)
 800c7cc:	4809      	ldr	r0, [pc, #36]	@ (800c7f4 <ip_reass_free_complete_datagram+0x134>)
 800c7ce:	f000 ff5f 	bl	800d690 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c800 <ip_reass_free_complete_datagram+0x140>)
 800c7d4:	881a      	ldrh	r2, [r3, #0]
 800c7d6:	8bfb      	ldrh	r3, [r7, #30]
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	4b08      	ldr	r3, [pc, #32]	@ (800c800 <ip_reass_free_complete_datagram+0x140>)
 800c7de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c7e0:	8bfb      	ldrh	r3, [r7, #30]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3720      	adds	r7, #32
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	08010be0 	.word	0x08010be0
 800c7f0:	08010c1c 	.word	0x08010c1c
 800c7f4:	08010c28 	.word	0x08010c28
 800c7f8:	08010c50 	.word	0x08010c50
 800c7fc:	08010c64 	.word	0x08010c64
 800c800:	20006a90 	.word	0x20006a90
 800c804:	08010c84 	.word	0x08010c84

0800c808 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	@ 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c812:	2300      	movs	r3, #0
 800c814:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c826:	4b28      	ldr	r3, [pc, #160]	@ (800c8c8 <ip_reass_remove_oldest_datagram+0xc0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c82c:	e030      	b.n	800c890 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c830:	695a      	ldr	r2, [r3, #20]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	429a      	cmp	r2, r3
 800c838:	d10c      	bne.n	800c854 <ip_reass_remove_oldest_datagram+0x4c>
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	429a      	cmp	r2, r3
 800c844:	d106      	bne.n	800c854 <ip_reass_remove_oldest_datagram+0x4c>
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	899a      	ldrh	r2, [r3, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	889b      	ldrh	r3, [r3, #4]
 800c84e:	b29b      	uxth	r3, r3
 800c850:	429a      	cmp	r2, r3
 800c852:	d014      	beq.n	800c87e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	3301      	adds	r3, #1
 800c858:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d104      	bne.n	800c86a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c862:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	61bb      	str	r3, [r7, #24]
 800c868:	e009      	b.n	800c87e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	7fda      	ldrb	r2, [r3, #31]
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	7fdb      	ldrb	r3, [r3, #31]
 800c872:	429a      	cmp	r2, r3
 800c874:	d803      	bhi.n	800c87e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1cb      	bne.n	800c82e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d008      	beq.n	800c8ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c89c:	69b9      	ldr	r1, [r7, #24]
 800c89e:	6a38      	ldr	r0, [r7, #32]
 800c8a0:	f7ff ff0e 	bl	800c6c0 <ip_reass_free_complete_datagram>
 800c8a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	da02      	bge.n	800c8bc <ip_reass_remove_oldest_datagram+0xb4>
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	dcac      	bgt.n	800c816 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c8bc:	697b      	ldr	r3, [r7, #20]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3728      	adds	r7, #40	@ 0x28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20006a8c 	.word	0x20006a8c

0800c8cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c8d6:	2004      	movs	r0, #4
 800c8d8:	f7f7 fd44 	bl	8004364 <memp_malloc>
 800c8dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d110      	bne.n	800c906 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff ff8e 	bl	800c808 <ip_reass_remove_oldest_datagram>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	dc03      	bgt.n	800c8fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c8f4:	2004      	movs	r0, #4
 800c8f6:	f7f7 fd35 	bl	8004364 <memp_malloc>
 800c8fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	e016      	b.n	800c934 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c906:	2220      	movs	r2, #32
 800c908:	2100      	movs	r1, #0
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f000 ff25 	bl	800d75a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	220f      	movs	r2, #15
 800c914:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c916:	4b09      	ldr	r3, [pc, #36]	@ (800c93c <ip_reass_enqueue_new_datagram+0x70>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c91e:	4a07      	ldr	r2, [pc, #28]	@ (800c93c <ip_reass_enqueue_new_datagram+0x70>)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3308      	adds	r3, #8
 800c928:	2214      	movs	r2, #20
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 ff8a 	bl	800d846 <memcpy>
  return ipr;
 800c932:	68fb      	ldr	r3, [r7, #12]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20006a8c 	.word	0x20006a8c

0800c940 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c94a:	4b10      	ldr	r3, [pc, #64]	@ (800c98c <ip_reass_dequeue_datagram+0x4c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d104      	bne.n	800c95e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a0c      	ldr	r2, [pc, #48]	@ (800c98c <ip_reass_dequeue_datagram+0x4c>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e00d      	b.n	800c97a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <ip_reass_dequeue_datagram+0x32>
 800c964:	4b0a      	ldr	r3, [pc, #40]	@ (800c990 <ip_reass_dequeue_datagram+0x50>)
 800c966:	f240 1245 	movw	r2, #325	@ 0x145
 800c96a:	490a      	ldr	r1, [pc, #40]	@ (800c994 <ip_reass_dequeue_datagram+0x54>)
 800c96c:	480a      	ldr	r0, [pc, #40]	@ (800c998 <ip_reass_dequeue_datagram+0x58>)
 800c96e:	f000 fe8f 	bl	800d690 <iprintf>
    prev->next = ipr->next;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	2004      	movs	r0, #4
 800c97e:	f7f7 fd61 	bl	8004444 <memp_free>
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	20006a8c 	.word	0x20006a8c
 800c990:	08010be0 	.word	0x08010be0
 800c994:	08010ca8 	.word	0x08010ca8
 800c998:	08010c28 	.word	0x08010c28

0800c99c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08c      	sub	sp, #48	@ 0x30
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	885b      	ldrh	r3, [r3, #2]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f7 f859 	bl	8003a74 <lwip_htons>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	f003 030f 	and.w	r3, r3, #15
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c9d4:	7e7b      	ldrb	r3, [r7, #25]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	8b7a      	ldrh	r2, [r7, #26]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d202      	bcs.n	800c9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c9de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9e2:	e135      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c9e4:	7e7b      	ldrb	r3, [r7, #25]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	8b7a      	ldrh	r2, [r7, #26]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	88db      	ldrh	r3, [r3, #6]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f7 f83d 	bl	8003a74 <lwip_htons>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800ca0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	2200      	movs	r2, #0
 800ca14:	705a      	strb	r2, [r3, #1]
 800ca16:	2200      	movs	r2, #0
 800ca18:	709a      	strb	r2, [r3, #2]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ca1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca20:	8afa      	ldrh	r2, [r7, #22]
 800ca22:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ca24:	8afa      	ldrh	r2, [r7, #22]
 800ca26:	8b7b      	ldrh	r3, [r7, #26]
 800ca28:	4413      	add	r3, r2
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ca30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca32:	88db      	ldrh	r3, [r3, #6]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	8afa      	ldrh	r2, [r7, #22]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d902      	bls.n	800ca42 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ca3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca40:	e106      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca48:	e068      	b.n	800cb1c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ca50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca52:	889b      	ldrh	r3, [r3, #4]
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	889b      	ldrh	r3, [r3, #4]
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d235      	bcs.n	800cacc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca64:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d020      	beq.n	800caae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ca6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6e:	889b      	ldrh	r3, [r3, #4]
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca74:	88db      	ldrh	r3, [r3, #6]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d307      	bcc.n	800ca8c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7e:	88db      	ldrh	r3, [r3, #6]
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	889b      	ldrh	r3, [r3, #4]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d902      	bls.n	800ca92 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ca8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca90:	e0de      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ca98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9a:	88db      	ldrh	r3, [r3, #6]
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa0:	889b      	ldrh	r3, [r3, #4]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d03d      	beq.n	800cb24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800caac:	e03a      	b.n	800cb24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800caae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab0:	88db      	ldrh	r3, [r3, #6]
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	889b      	ldrh	r3, [r3, #4]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	429a      	cmp	r2, r3
 800cabc:	d902      	bls.n	800cac4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cabe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cac2:	e0c5      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	605a      	str	r2, [r3, #4]
      break;
 800caca:	e02b      	b.n	800cb24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800cacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cace:	889b      	ldrh	r3, [r3, #4]
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	889b      	ldrh	r3, [r3, #4]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	429a      	cmp	r2, r3
 800cada:	d102      	bne.n	800cae2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cadc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cae0:	e0b6      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae4:	889b      	ldrh	r3, [r3, #4]
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	88db      	ldrh	r3, [r3, #6]
 800caec:	b29b      	uxth	r3, r3
 800caee:	429a      	cmp	r2, r3
 800caf0:	d202      	bcs.n	800caf8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800caf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800caf6:	e0ab      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800caf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d009      	beq.n	800cb12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800cafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb00:	88db      	ldrh	r3, [r3, #6]
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	889b      	ldrh	r3, [r3, #4]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d001      	beq.n	800cb12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d193      	bne.n	800ca4a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800cb22:	e000      	b.n	800cb26 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800cb24:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d12d      	bne.n	800cb88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800cb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d01c      	beq.n	800cb6c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb34:	88db      	ldrh	r3, [r3, #6]
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3a:	889b      	ldrh	r3, [r3, #4]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d906      	bls.n	800cb50 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800cb42:	4b45      	ldr	r3, [pc, #276]	@ (800cc58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cb44:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800cb48:	4944      	ldr	r1, [pc, #272]	@ (800cc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cb4a:	4845      	ldr	r0, [pc, #276]	@ (800cc60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cb4c:	f000 fda0 	bl	800d690 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb58:	88db      	ldrh	r3, [r3, #6]
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5e:	889b      	ldrh	r3, [r3, #4]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d010      	beq.n	800cb88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	623b      	str	r3, [r7, #32]
 800cb6a:	e00d      	b.n	800cb88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d006      	beq.n	800cb82 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800cb74:	4b38      	ldr	r3, [pc, #224]	@ (800cc58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cb76:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800cb7a:	493a      	ldr	r1, [pc, #232]	@ (800cc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cb7c:	4838      	ldr	r0, [pc, #224]	@ (800cc60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cb7e:	f000 fd87 	bl	800d690 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d105      	bne.n	800cb9a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	7f9b      	ldrb	r3, [r3, #30]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d059      	beq.n	800cc4e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d04f      	beq.n	800cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d006      	beq.n	800cbb6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	889b      	ldrh	r3, [r3, #4]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	623b      	str	r3, [r7, #32]
 800cbba:	e041      	b.n	800cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800cbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbe:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800cbc6:	e012      	b.n	800cbee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	88db      	ldrh	r3, [r3, #6]
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd6:	889b      	ldrh	r3, [r3, #4]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d002      	beq.n	800cbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	623b      	str	r3, [r7, #32]
            break;
 800cbe2:	e007      	b.n	800cbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800cbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e9      	bne.n	800cbc8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800cbf4:	6a3b      	ldr	r3, [r7, #32]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d022      	beq.n	800cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800cc02:	4b15      	ldr	r3, [pc, #84]	@ (800cc58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cc04:	f240 12df 	movw	r2, #479	@ 0x1df
 800cc08:	4917      	ldr	r1, [pc, #92]	@ (800cc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800cc0a:	4815      	ldr	r0, [pc, #84]	@ (800cc60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cc0c:	f000 fd40 	bl	800d690 <iprintf>
          LWIP_ASSERT("sanity check",
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d106      	bne.n	800cc2a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800cc1c:	4b0e      	ldr	r3, [pc, #56]	@ (800cc58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cc1e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800cc22:	4911      	ldr	r1, [pc, #68]	@ (800cc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800cc24:	480e      	ldr	r0, [pc, #56]	@ (800cc60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cc26:	f000 fd33 	bl	800d690 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800cc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d006      	beq.n	800cc40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800cc32:	4b09      	ldr	r3, [pc, #36]	@ (800cc58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cc34:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800cc38:	490c      	ldr	r1, [pc, #48]	@ (800cc6c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800cc3a:	4809      	ldr	r0, [pc, #36]	@ (800cc60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cc3c:	f000 fd28 	bl	800d690 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bf14      	ite	ne
 800cc46:	2301      	movne	r3, #1
 800cc48:	2300      	moveq	r3, #0
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	e000      	b.n	800cc50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3730      	adds	r7, #48	@ 0x30
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	08010be0 	.word	0x08010be0
 800cc5c:	08010cc4 	.word	0x08010cc4
 800cc60:	08010c28 	.word	0x08010c28
 800cc64:	08010ce4 	.word	0x08010ce4
 800cc68:	08010d1c 	.word	0x08010d1c
 800cc6c:	08010d2c 	.word	0x08010d2c

0800cc70 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08e      	sub	sp, #56	@ 0x38
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800cc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	f003 030f 	and.w	r3, r3, #15
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b14      	cmp	r3, #20
 800cc8e:	f040 8171 	bne.w	800cf74 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800cc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc94:	88db      	ldrh	r3, [r3, #6]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f6 feeb 	bl	8003a74 <lwip_htons>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ccaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccac:	885b      	ldrh	r3, [r3, #2]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7f6 fedf 	bl	8003a74 <lwip_htons>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ccba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	f003 030f 	and.w	r3, r3, #15
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800ccca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	f0c0 8150 	bcc.w	800cf78 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ccd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7f8 faab 	bl	8005240 <pbuf_clen>
 800ccea:	4603      	mov	r3, r0
 800ccec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ccee:	4b8c      	ldr	r3, [pc, #560]	@ (800cf20 <ip4_reass+0x2b0>)
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	8c3b      	ldrh	r3, [r7, #32]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	2b0a      	cmp	r3, #10
 800ccfa:	dd10      	ble.n	800cd1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ccfc:	8c3b      	ldrh	r3, [r7, #32]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd02:	f7ff fd81 	bl	800c808 <ip_reass_remove_oldest_datagram>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 8137 	beq.w	800cf7c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cd0e:	4b84      	ldr	r3, [pc, #528]	@ (800cf20 <ip4_reass+0x2b0>)
 800cd10:	881b      	ldrh	r3, [r3, #0]
 800cd12:	461a      	mov	r2, r3
 800cd14:	8c3b      	ldrh	r3, [r7, #32]
 800cd16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cd18:	2b0a      	cmp	r3, #10
 800cd1a:	f300 812f 	bgt.w	800cf7c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cd1e:	4b81      	ldr	r3, [pc, #516]	@ (800cf24 <ip4_reass+0x2b4>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd24:	e015      	b.n	800cd52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd28:	695a      	ldr	r2, [r3, #20]
 800cd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d10c      	bne.n	800cd4c <ip4_reass+0xdc>
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	699a      	ldr	r2, [r3, #24]
 800cd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d106      	bne.n	800cd4c <ip4_reass+0xdc>
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd40:	899a      	ldrh	r2, [r3, #12]
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	889b      	ldrh	r3, [r3, #4]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d006      	beq.n	800cd5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1e6      	bne.n	800cd26 <ip4_reass+0xb6>
 800cd58:	e000      	b.n	800cd5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cd5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d109      	bne.n	800cd76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cd62:	8c3b      	ldrh	r3, [r7, #32]
 800cd64:	4619      	mov	r1, r3
 800cd66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd68:	f7ff fdb0 	bl	800c8cc <ip_reass_enqueue_new_datagram>
 800cd6c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d11c      	bne.n	800cdae <ip4_reass+0x13e>
      goto nullreturn;
 800cd74:	e105      	b.n	800cf82 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd78:	88db      	ldrh	r3, [r3, #6]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7f6 fe79 	bl	8003a74 <lwip_htons>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d110      	bne.n	800cdae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8e:	89db      	ldrh	r3, [r3, #14]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7f6 fe6f 	bl	8003a74 <lwip_htons>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda2:	3308      	adds	r3, #8
 800cda4:	2214      	movs	r2, #20
 800cda6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fd4c 	bl	800d846 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb0:	88db      	ldrh	r3, [r3, #6]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	f003 0320 	and.w	r3, r3, #32
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bf0c      	ite	eq
 800cdbc:	2301      	moveq	r3, #1
 800cdbe:	2300      	movne	r3, #0
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00e      	beq.n	800cde8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800cdca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800cdcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdce:	4413      	add	r3, r2
 800cdd0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cdd2:	8b7a      	ldrh	r2, [r7, #26]
 800cdd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	f0c0 80a0 	bcc.w	800cf1c <ip4_reass+0x2ac>
 800cddc:	8b7b      	ldrh	r3, [r7, #26]
 800cdde:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800cde2:	4293      	cmp	r3, r2
 800cde4:	f200 809a 	bhi.w	800cf1c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cde8:	69fa      	ldr	r2, [r7, #28]
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdee:	f7ff fdd5 	bl	800c99c <ip_reass_chain_frag_into_datagram_and_validate>
 800cdf2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdfa:	f000 809b 	beq.w	800cf34 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cdfe:	4b48      	ldr	r3, [pc, #288]	@ (800cf20 <ip4_reass+0x2b0>)
 800ce00:	881a      	ldrh	r2, [r3, #0]
 800ce02:	8c3b      	ldrh	r3, [r7, #32]
 800ce04:	4413      	add	r3, r2
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	4b45      	ldr	r3, [pc, #276]	@ (800cf20 <ip4_reass+0x2b0>)
 800ce0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00d      	beq.n	800ce2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ce12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ce14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce16:	4413      	add	r3, r2
 800ce18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	8a7a      	ldrh	r2, [r7, #18]
 800ce1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	7f9b      	ldrb	r3, [r3, #30]
 800ce24:	f043 0301 	orr.w	r3, r3, #1
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d171      	bne.n	800cf18 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ce34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce36:	8b9b      	ldrh	r3, [r3, #28]
 800ce38:	3314      	adds	r3, #20
 800ce3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce50:	3308      	adds	r3, #8
 800ce52:	2214      	movs	r2, #20
 800ce54:	4619      	mov	r1, r3
 800ce56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce58:	f000 fcf5 	bl	800d846 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ce5c:	8a3b      	ldrh	r3, [r7, #16]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f6 fe08 	bl	8003a74 <lwip_htons>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ce6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6e:	2200      	movs	r2, #0
 800ce70:	719a      	strb	r2, [r3, #6]
 800ce72:	2200      	movs	r2, #0
 800ce74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ce76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce78:	2200      	movs	r2, #0
 800ce7a:	729a      	strb	r2, [r3, #10]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ce80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ce86:	e00d      	b.n	800cea4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ce88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ce8e:	2114      	movs	r1, #20
 800ce90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ce92:	f7f8 f8c7 	bl	8005024 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ce96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7f8 fa0b 	bl	80052b4 <pbuf_cat>
      r = iprh->next_pbuf;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800cea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1ee      	bne.n	800ce88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ceaa:	4b1e      	ldr	r3, [pc, #120]	@ (800cf24 <ip4_reass+0x2b4>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d102      	bne.n	800ceba <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceb8:	e010      	b.n	800cedc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ceba:	4b1a      	ldr	r3, [pc, #104]	@ (800cf24 <ip4_reass+0x2b4>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cec0:	e007      	b.n	800ced2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d006      	beq.n	800ceda <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ced2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1f4      	bne.n	800cec2 <ip4_reass+0x252>
 800ced8:	e000      	b.n	800cedc <ip4_reass+0x26c>
          break;
 800ceda:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cedc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cee0:	f7ff fd2e 	bl	800c940 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7f8 f9ab 	bl	8005240 <pbuf_clen>
 800ceea:	4603      	mov	r3, r0
 800ceec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ceee:	4b0c      	ldr	r3, [pc, #48]	@ (800cf20 <ip4_reass+0x2b0>)
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	8c3a      	ldrh	r2, [r7, #32]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d906      	bls.n	800cf06 <ip4_reass+0x296>
 800cef8:	4b0b      	ldr	r3, [pc, #44]	@ (800cf28 <ip4_reass+0x2b8>)
 800cefa:	f240 229b 	movw	r2, #667	@ 0x29b
 800cefe:	490b      	ldr	r1, [pc, #44]	@ (800cf2c <ip4_reass+0x2bc>)
 800cf00:	480b      	ldr	r0, [pc, #44]	@ (800cf30 <ip4_reass+0x2c0>)
 800cf02:	f000 fbc5 	bl	800d690 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cf06:	4b06      	ldr	r3, [pc, #24]	@ (800cf20 <ip4_reass+0x2b0>)
 800cf08:	881a      	ldrh	r2, [r3, #0]
 800cf0a:	8c3b      	ldrh	r3, [r7, #32]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	4b03      	ldr	r3, [pc, #12]	@ (800cf20 <ip4_reass+0x2b0>)
 800cf12:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	e038      	b.n	800cf8a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e036      	b.n	800cf8a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800cf1c:	bf00      	nop
 800cf1e:	e00a      	b.n	800cf36 <ip4_reass+0x2c6>
 800cf20:	20006a90 	.word	0x20006a90
 800cf24:	20006a8c 	.word	0x20006a8c
 800cf28:	08010be0 	.word	0x08010be0
 800cf2c:	08010d50 	.word	0x08010d50
 800cf30:	08010c28 	.word	0x08010c28
    goto nullreturn_ipr;
 800cf34:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <ip4_reass+0x2da>
 800cf3c:	4b15      	ldr	r3, [pc, #84]	@ (800cf94 <ip4_reass+0x324>)
 800cf3e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800cf42:	4915      	ldr	r1, [pc, #84]	@ (800cf98 <ip4_reass+0x328>)
 800cf44:	4815      	ldr	r0, [pc, #84]	@ (800cf9c <ip4_reass+0x32c>)
 800cf46:	f000 fba3 	bl	800d690 <iprintf>
  if (ipr->p == NULL) {
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d116      	bne.n	800cf80 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cf52:	4b13      	ldr	r3, [pc, #76]	@ (800cfa0 <ip4_reass+0x330>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d006      	beq.n	800cf6a <ip4_reass+0x2fa>
 800cf5c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf94 <ip4_reass+0x324>)
 800cf5e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800cf62:	4910      	ldr	r1, [pc, #64]	@ (800cfa4 <ip4_reass+0x334>)
 800cf64:	480d      	ldr	r0, [pc, #52]	@ (800cf9c <ip4_reass+0x32c>)
 800cf66:	f000 fb93 	bl	800d690 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf6e:	f7ff fce7 	bl	800c940 <ip_reass_dequeue_datagram>
 800cf72:	e006      	b.n	800cf82 <ip4_reass+0x312>
    goto nullreturn;
 800cf74:	bf00      	nop
 800cf76:	e004      	b.n	800cf82 <ip4_reass+0x312>
    goto nullreturn;
 800cf78:	bf00      	nop
 800cf7a:	e002      	b.n	800cf82 <ip4_reass+0x312>
      goto nullreturn;
 800cf7c:	bf00      	nop
 800cf7e:	e000      	b.n	800cf82 <ip4_reass+0x312>
  }

nullreturn:
 800cf80:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7f8 f8d4 	bl	8005130 <pbuf_free>
  return NULL;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3738      	adds	r7, #56	@ 0x38
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	08010be0 	.word	0x08010be0
 800cf98:	08010d6c 	.word	0x08010d6c
 800cf9c:	08010c28 	.word	0x08010c28
 800cfa0:	20006a8c 	.word	0x20006a8c
 800cfa4:	08010d78 	.word	0x08010d78

0800cfa8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cfac:	2005      	movs	r0, #5
 800cfae:	f7f7 f9d9 	bl	8004364 <memp_malloc>
 800cfb2:	4603      	mov	r3, r0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d106      	bne.n	800cfd4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cfc6:	4b07      	ldr	r3, [pc, #28]	@ (800cfe4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cfc8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800cfcc:	4906      	ldr	r1, [pc, #24]	@ (800cfe8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800cfce:	4807      	ldr	r0, [pc, #28]	@ (800cfec <ip_frag_free_pbuf_custom_ref+0x34>)
 800cfd0:	f000 fb5e 	bl	800d690 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cfd4:	6879      	ldr	r1, [r7, #4]
 800cfd6:	2005      	movs	r0, #5
 800cfd8:	f7f7 fa34 	bl	8004444 <memp_free>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	08010be0 	.word	0x08010be0
 800cfe8:	08010d98 	.word	0x08010d98
 800cfec:	08010c28 	.word	0x08010c28

0800cff0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <ipfrag_free_pbuf_custom+0x20>
 800d002:	4b11      	ldr	r3, [pc, #68]	@ (800d048 <ipfrag_free_pbuf_custom+0x58>)
 800d004:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d008:	4910      	ldr	r1, [pc, #64]	@ (800d04c <ipfrag_free_pbuf_custom+0x5c>)
 800d00a:	4811      	ldr	r0, [pc, #68]	@ (800d050 <ipfrag_free_pbuf_custom+0x60>)
 800d00c:	f000 fb40 	bl	800d690 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	429a      	cmp	r2, r3
 800d016:	d006      	beq.n	800d026 <ipfrag_free_pbuf_custom+0x36>
 800d018:	4b0b      	ldr	r3, [pc, #44]	@ (800d048 <ipfrag_free_pbuf_custom+0x58>)
 800d01a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d01e:	490d      	ldr	r1, [pc, #52]	@ (800d054 <ipfrag_free_pbuf_custom+0x64>)
 800d020:	480b      	ldr	r0, [pc, #44]	@ (800d050 <ipfrag_free_pbuf_custom+0x60>)
 800d022:	f000 fb35 	bl	800d690 <iprintf>
  if (pcr->original != NULL) {
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	695b      	ldr	r3, [r3, #20]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d004      	beq.n	800d038 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	4618      	mov	r0, r3
 800d034:	f7f8 f87c 	bl	8005130 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f7ff ffbd 	bl	800cfb8 <ip_frag_free_pbuf_custom_ref>
}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	08010be0 	.word	0x08010be0
 800d04c:	08010da4 	.word	0x08010da4
 800d050:	08010c28 	.word	0x08010c28
 800d054:	08010db0 	.word	0x08010db0

0800d058 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b094      	sub	sp, #80	@ 0x50
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d06e:	3b14      	subs	r3, #20
 800d070:	2b00      	cmp	r3, #0
 800d072:	da00      	bge.n	800d076 <ip4_frag+0x1e>
 800d074:	3307      	adds	r3, #7
 800d076:	10db      	asrs	r3, r3, #3
 800d078:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d07a:	2314      	movs	r3, #20
 800d07c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800d084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d086:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	f003 030f 	and.w	r3, r3, #15
 800d090:	b2db      	uxtb	r3, r3
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b14      	cmp	r3, #20
 800d098:	d002      	beq.n	800d0a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d09a:	f06f 0305 	mvn.w	r3, #5
 800d09e:	e110      	b.n	800d2c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	2b13      	cmp	r3, #19
 800d0a6:	d809      	bhi.n	800d0bc <ip4_frag+0x64>
 800d0a8:	4b88      	ldr	r3, [pc, #544]	@ (800d2cc <ip4_frag+0x274>)
 800d0aa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d0ae:	4988      	ldr	r1, [pc, #544]	@ (800d2d0 <ip4_frag+0x278>)
 800d0b0:	4888      	ldr	r0, [pc, #544]	@ (800d2d4 <ip4_frag+0x27c>)
 800d0b2:	f000 faed 	bl	800d690 <iprintf>
 800d0b6:	f06f 0305 	mvn.w	r3, #5
 800d0ba:	e102      	b.n	800d2c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0be:	88db      	ldrh	r3, [r3, #6]
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7f6 fcd6 	bl	8003a74 <lwip_htons>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800d0cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d0ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d0d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d0d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	891b      	ldrh	r3, [r3, #8]
 800d0e2:	3b14      	subs	r3, #20
 800d0e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800d0e8:	e0e1      	b.n	800d2ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d0ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	bf28      	it	cs
 800d0f8:	4613      	movcs	r3, r2
 800d0fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d0fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d100:	2114      	movs	r1, #20
 800d102:	200e      	movs	r0, #14
 800d104:	f7f7 fd30 	bl	8004b68 <pbuf_alloc>
 800d108:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 80d5 	beq.w	800d2bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	895b      	ldrh	r3, [r3, #10]
 800d116:	2b13      	cmp	r3, #19
 800d118:	d806      	bhi.n	800d128 <ip4_frag+0xd0>
 800d11a:	4b6c      	ldr	r3, [pc, #432]	@ (800d2cc <ip4_frag+0x274>)
 800d11c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d120:	496d      	ldr	r1, [pc, #436]	@ (800d2d8 <ip4_frag+0x280>)
 800d122:	486c      	ldr	r0, [pc, #432]	@ (800d2d4 <ip4_frag+0x27c>)
 800d124:	f000 fab4 	bl	800d690 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	2214      	movs	r2, #20
 800d12e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fb88 	bl	800d846 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800d13c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d13e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800d142:	e064      	b.n	800d20e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	895a      	ldrh	r2, [r3, #10]
 800d148:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	895b      	ldrh	r3, [r3, #10]
 800d152:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d154:	429a      	cmp	r2, r3
 800d156:	d906      	bls.n	800d166 <ip4_frag+0x10e>
 800d158:	4b5c      	ldr	r3, [pc, #368]	@ (800d2cc <ip4_frag+0x274>)
 800d15a:	f240 322d 	movw	r2, #813	@ 0x32d
 800d15e:	495f      	ldr	r1, [pc, #380]	@ (800d2dc <ip4_frag+0x284>)
 800d160:	485c      	ldr	r0, [pc, #368]	@ (800d2d4 <ip4_frag+0x27c>)
 800d162:	f000 fa95 	bl	800d690 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d166:	8bfa      	ldrh	r2, [r7, #30]
 800d168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bf28      	it	cs
 800d170:	4613      	movcs	r3, r2
 800d172:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d176:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d105      	bne.n	800d18a <ip4_frag+0x132>
        poff = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	60fb      	str	r3, [r7, #12]
        continue;
 800d188:	e041      	b.n	800d20e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d18a:	f7ff ff0d 	bl	800cfa8 <ip_frag_alloc_pbuf_custom_ref>
 800d18e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d103      	bne.n	800d19e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d198:	f7f7 ffca 	bl	8005130 <pbuf_free>
        goto memerr;
 800d19c:	e08f      	b.n	800d2be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d19e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d1a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800d1ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d1b0:	9201      	str	r2, [sp, #4]
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2241      	movs	r2, #65	@ 0x41
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f7f7 fdff 	bl	8004dbc <pbuf_alloced_custom>
 800d1be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d106      	bne.n	800d1d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d1c6:	69b8      	ldr	r0, [r7, #24]
 800d1c8:	f7ff fef6 	bl	800cfb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d1cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1ce:	f7f7 ffaf 	bl	8005130 <pbuf_free>
        goto memerr;
 800d1d2:	e074      	b.n	800d2be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7f8 f84b 	bl	8005270 <pbuf_ref>
      pcr->original = p;
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	4a3f      	ldr	r2, [pc, #252]	@ (800d2e0 <ip4_frag+0x288>)
 800d1e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d1e6:	6979      	ldr	r1, [r7, #20]
 800d1e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1ea:	f7f8 f863 	bl	80052b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d1ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800d1f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800d1fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d200:	2b00      	cmp	r3, #0
 800d202:	d004      	beq.n	800d20e <ip4_frag+0x1b6>
        poff = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d20e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d212:	2b00      	cmp	r3, #0
 800d214:	d196      	bne.n	800d144 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d216:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d218:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d21c:	4413      	add	r3, r2
 800d21e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d224:	f1a3 0213 	sub.w	r2, r3, #19
 800d228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d22c:	429a      	cmp	r2, r3
 800d22e:	bfcc      	ite	gt
 800d230:	2301      	movgt	r3, #1
 800d232:	2300      	movle	r3, #0
 800d234:	b2db      	uxtb	r3, r3
 800d236:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d238:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d23c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d240:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <ip4_frag+0x1f6>
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d24e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d254:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d256:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f6 fc0b 	bl	8003a74 <lwip_htons>
 800d25e:	4603      	mov	r3, r0
 800d260:	461a      	mov	r2, r3
 800d262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d264:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d266:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d268:	3314      	adds	r3, #20
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f6 fc01 	bl	8003a74 <lwip_htons>
 800d272:	4603      	mov	r3, r0
 800d274:	461a      	mov	r2, r3
 800d276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d278:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	2200      	movs	r2, #0
 800d27e:	729a      	strb	r2, [r3, #10]
 800d280:	2200      	movs	r2, #0
 800d282:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d28c:	68b8      	ldr	r0, [r7, #8]
 800d28e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d290:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d292:	f7f7 ff4d 	bl	8005130 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d296:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d29a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800d2a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d2a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800d2ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f47f af19 	bne.w	800d0ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e002      	b.n	800d2c2 <ip4_frag+0x26a>
      goto memerr;
 800d2bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d2be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3748      	adds	r7, #72	@ 0x48
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	08010be0 	.word	0x08010be0
 800d2d0:	08010dbc 	.word	0x08010dbc
 800d2d4:	08010c28 	.word	0x08010c28
 800d2d8:	08010dd8 	.word	0x08010dd8
 800d2dc:	08010df8 	.word	0x08010df8
 800d2e0:	0800cff1 	.word	0x0800cff1

0800d2e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d2ee:	230e      	movs	r3, #14
 800d2f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	895b      	ldrh	r3, [r3, #10]
 800d2f6:	2b0e      	cmp	r3, #14
 800d2f8:	d96e      	bls.n	800d3d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7bdb      	ldrb	r3, [r3, #15]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d106      	bne.n	800d310 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d308:	3301      	adds	r3, #1
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	7b1a      	ldrb	r2, [r3, #12]
 800d31a:	7b5b      	ldrb	r3, [r3, #13]
 800d31c:	021b      	lsls	r3, r3, #8
 800d31e:	4313      	orrs	r3, r2
 800d320:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d023      	beq.n	800d376 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d10f      	bne.n	800d356 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	785b      	ldrb	r3, [r3, #1]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d11b      	bne.n	800d376 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d342:	2b5e      	cmp	r3, #94	@ 0x5e
 800d344:	d117      	bne.n	800d376 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	7b5b      	ldrb	r3, [r3, #13]
 800d34a:	f043 0310 	orr.w	r3, r3, #16
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	735a      	strb	r2, [r3, #13]
 800d354:	e00f      	b.n	800d376 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2206      	movs	r2, #6
 800d35a:	4928      	ldr	r1, [pc, #160]	@ (800d3fc <ethernet_input+0x118>)
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 f9ec 	bl	800d73a <memcmp>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7b5b      	ldrb	r3, [r3, #13]
 800d36c:	f043 0308 	orr.w	r3, r3, #8
 800d370:	b2da      	uxtb	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d376:	89fb      	ldrh	r3, [r7, #14]
 800d378:	2b08      	cmp	r3, #8
 800d37a:	d003      	beq.n	800d384 <ethernet_input+0xa0>
 800d37c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d380:	d014      	beq.n	800d3ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d382:	e032      	b.n	800d3ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d38a:	f003 0308 	and.w	r3, r3, #8
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d024      	beq.n	800d3dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d392:	8afb      	ldrh	r3, [r7, #22]
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7f7 fe44 	bl	8005024 <pbuf_remove_header>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d11e      	bne.n	800d3e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d3a2:	6839      	ldr	r1, [r7, #0]
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7fe ff21 	bl	800c1ec <ip4_input>
      break;
 800d3aa:	e013      	b.n	800d3d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d3b2:	f003 0308 	and.w	r3, r3, #8
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d014      	beq.n	800d3e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d3ba:	8afb      	ldrh	r3, [r7, #22]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7f7 fe30 	bl	8005024 <pbuf_remove_header>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10e      	bne.n	800d3e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7fe f8c1 	bl	800b554 <etharp_input>
      break;
 800d3d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	e00c      	b.n	800d3f2 <ethernet_input+0x10e>
    goto free_and_return;
 800d3d8:	bf00      	nop
 800d3da:	e006      	b.n	800d3ea <ethernet_input+0x106>
        goto free_and_return;
 800d3dc:	bf00      	nop
 800d3de:	e004      	b.n	800d3ea <ethernet_input+0x106>
        goto free_and_return;
 800d3e0:	bf00      	nop
 800d3e2:	e002      	b.n	800d3ea <ethernet_input+0x106>
        goto free_and_return;
 800d3e4:	bf00      	nop
 800d3e6:	e000      	b.n	800d3ea <ethernet_input+0x106>
        goto free_and_return;
 800d3e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7f7 fea0 	bl	8005130 <pbuf_free>
  return ERR_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	08010f8c 	.word	0x08010f8c

0800d400 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
 800d40c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d40e:	8c3b      	ldrh	r3, [r7, #32]
 800d410:	4618      	mov	r0, r3
 800d412:	f7f6 fb2f 	bl	8003a74 <lwip_htons>
 800d416:	4603      	mov	r3, r0
 800d418:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d41a:	210e      	movs	r1, #14
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f7f7 fdf1 	bl	8005004 <pbuf_add_header>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d125      	bne.n	800d474 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	8afa      	ldrh	r2, [r7, #22]
 800d432:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2206      	movs	r2, #6
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 fa03 	bl	800d846 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	3306      	adds	r3, #6
 800d444:	2206      	movs	r2, #6
 800d446:	6879      	ldr	r1, [r7, #4]
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 f9fc 	bl	800d846 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d454:	2b06      	cmp	r3, #6
 800d456:	d006      	beq.n	800d466 <ethernet_output+0x66>
 800d458:	4b0a      	ldr	r3, [pc, #40]	@ (800d484 <ethernet_output+0x84>)
 800d45a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800d45e:	490a      	ldr	r1, [pc, #40]	@ (800d488 <ethernet_output+0x88>)
 800d460:	480a      	ldr	r0, [pc, #40]	@ (800d48c <ethernet_output+0x8c>)
 800d462:	f000 f915 	bl	800d690 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	4798      	blx	r3
 800d470:	4603      	mov	r3, r0
 800d472:	e002      	b.n	800d47a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d474:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d476:	f06f 0301 	mvn.w	r3, #1
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	08010e08 	.word	0x08010e08
 800d488:	08010e40 	.word	0x08010e40
 800d48c:	08010e74 	.word	0x08010e74

0800d490 <rand>:
 800d490:	4b16      	ldr	r3, [pc, #88]	@ (800d4ec <rand+0x5c>)
 800d492:	b510      	push	{r4, lr}
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d498:	b9b3      	cbnz	r3, 800d4c8 <rand+0x38>
 800d49a:	2018      	movs	r0, #24
 800d49c:	f000 fa4a 	bl	800d934 <malloc>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	6320      	str	r0, [r4, #48]	@ 0x30
 800d4a4:	b920      	cbnz	r0, 800d4b0 <rand+0x20>
 800d4a6:	4b12      	ldr	r3, [pc, #72]	@ (800d4f0 <rand+0x60>)
 800d4a8:	4812      	ldr	r0, [pc, #72]	@ (800d4f4 <rand+0x64>)
 800d4aa:	2152      	movs	r1, #82	@ 0x52
 800d4ac:	f000 f9da 	bl	800d864 <__assert_func>
 800d4b0:	4911      	ldr	r1, [pc, #68]	@ (800d4f8 <rand+0x68>)
 800d4b2:	4b12      	ldr	r3, [pc, #72]	@ (800d4fc <rand+0x6c>)
 800d4b4:	e9c0 1300 	strd	r1, r3, [r0]
 800d4b8:	4b11      	ldr	r3, [pc, #68]	@ (800d500 <rand+0x70>)
 800d4ba:	6083      	str	r3, [r0, #8]
 800d4bc:	230b      	movs	r3, #11
 800d4be:	8183      	strh	r3, [r0, #12]
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d4c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d4ca:	480e      	ldr	r0, [pc, #56]	@ (800d504 <rand+0x74>)
 800d4cc:	690b      	ldr	r3, [r1, #16]
 800d4ce:	694c      	ldr	r4, [r1, #20]
 800d4d0:	4a0d      	ldr	r2, [pc, #52]	@ (800d508 <rand+0x78>)
 800d4d2:	4358      	muls	r0, r3
 800d4d4:	fb02 0004 	mla	r0, r2, r4, r0
 800d4d8:	fba3 3202 	umull	r3, r2, r3, r2
 800d4dc:	3301      	adds	r3, #1
 800d4de:	eb40 0002 	adc.w	r0, r0, r2
 800d4e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d4e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d4ea:	bd10      	pop	{r4, pc}
 800d4ec:	20000038 	.word	0x20000038
 800d4f0:	08010f9a 	.word	0x08010f9a
 800d4f4:	08010fb1 	.word	0x08010fb1
 800d4f8:	abcd330e 	.word	0xabcd330e
 800d4fc:	e66d1234 	.word	0xe66d1234
 800d500:	0005deec 	.word	0x0005deec
 800d504:	5851f42d 	.word	0x5851f42d
 800d508:	4c957f2d 	.word	0x4c957f2d

0800d50c <std>:
 800d50c:	2300      	movs	r3, #0
 800d50e:	b510      	push	{r4, lr}
 800d510:	4604      	mov	r4, r0
 800d512:	e9c0 3300 	strd	r3, r3, [r0]
 800d516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d51a:	6083      	str	r3, [r0, #8]
 800d51c:	8181      	strh	r1, [r0, #12]
 800d51e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d520:	81c2      	strh	r2, [r0, #14]
 800d522:	6183      	str	r3, [r0, #24]
 800d524:	4619      	mov	r1, r3
 800d526:	2208      	movs	r2, #8
 800d528:	305c      	adds	r0, #92	@ 0x5c
 800d52a:	f000 f916 	bl	800d75a <memset>
 800d52e:	4b0d      	ldr	r3, [pc, #52]	@ (800d564 <std+0x58>)
 800d530:	6263      	str	r3, [r4, #36]	@ 0x24
 800d532:	4b0d      	ldr	r3, [pc, #52]	@ (800d568 <std+0x5c>)
 800d534:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d536:	4b0d      	ldr	r3, [pc, #52]	@ (800d56c <std+0x60>)
 800d538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d53a:	4b0d      	ldr	r3, [pc, #52]	@ (800d570 <std+0x64>)
 800d53c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d53e:	4b0d      	ldr	r3, [pc, #52]	@ (800d574 <std+0x68>)
 800d540:	6224      	str	r4, [r4, #32]
 800d542:	429c      	cmp	r4, r3
 800d544:	d006      	beq.n	800d554 <std+0x48>
 800d546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d54a:	4294      	cmp	r4, r2
 800d54c:	d002      	beq.n	800d554 <std+0x48>
 800d54e:	33d0      	adds	r3, #208	@ 0xd0
 800d550:	429c      	cmp	r4, r3
 800d552:	d105      	bne.n	800d560 <std+0x54>
 800d554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d55c:	f000 b970 	b.w	800d840 <__retarget_lock_init_recursive>
 800d560:	bd10      	pop	{r4, pc}
 800d562:	bf00      	nop
 800d564:	0800d6b5 	.word	0x0800d6b5
 800d568:	0800d6d7 	.word	0x0800d6d7
 800d56c:	0800d70f 	.word	0x0800d70f
 800d570:	0800d733 	.word	0x0800d733
 800d574:	20006a94 	.word	0x20006a94

0800d578 <stdio_exit_handler>:
 800d578:	4a02      	ldr	r2, [pc, #8]	@ (800d584 <stdio_exit_handler+0xc>)
 800d57a:	4903      	ldr	r1, [pc, #12]	@ (800d588 <stdio_exit_handler+0x10>)
 800d57c:	4803      	ldr	r0, [pc, #12]	@ (800d58c <stdio_exit_handler+0x14>)
 800d57e:	f000 b869 	b.w	800d654 <_fwalk_sglue>
 800d582:	bf00      	nop
 800d584:	2000002c 	.word	0x2000002c
 800d588:	0800e149 	.word	0x0800e149
 800d58c:	2000003c 	.word	0x2000003c

0800d590 <cleanup_stdio>:
 800d590:	6841      	ldr	r1, [r0, #4]
 800d592:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <cleanup_stdio+0x34>)
 800d594:	4299      	cmp	r1, r3
 800d596:	b510      	push	{r4, lr}
 800d598:	4604      	mov	r4, r0
 800d59a:	d001      	beq.n	800d5a0 <cleanup_stdio+0x10>
 800d59c:	f000 fdd4 	bl	800e148 <_fflush_r>
 800d5a0:	68a1      	ldr	r1, [r4, #8]
 800d5a2:	4b09      	ldr	r3, [pc, #36]	@ (800d5c8 <cleanup_stdio+0x38>)
 800d5a4:	4299      	cmp	r1, r3
 800d5a6:	d002      	beq.n	800d5ae <cleanup_stdio+0x1e>
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f000 fdcd 	bl	800e148 <_fflush_r>
 800d5ae:	68e1      	ldr	r1, [r4, #12]
 800d5b0:	4b06      	ldr	r3, [pc, #24]	@ (800d5cc <cleanup_stdio+0x3c>)
 800d5b2:	4299      	cmp	r1, r3
 800d5b4:	d004      	beq.n	800d5c0 <cleanup_stdio+0x30>
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5bc:	f000 bdc4 	b.w	800e148 <_fflush_r>
 800d5c0:	bd10      	pop	{r4, pc}
 800d5c2:	bf00      	nop
 800d5c4:	20006a94 	.word	0x20006a94
 800d5c8:	20006afc 	.word	0x20006afc
 800d5cc:	20006b64 	.word	0x20006b64

0800d5d0 <global_stdio_init.part.0>:
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d600 <global_stdio_init.part.0+0x30>)
 800d5d4:	4c0b      	ldr	r4, [pc, #44]	@ (800d604 <global_stdio_init.part.0+0x34>)
 800d5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800d608 <global_stdio_init.part.0+0x38>)
 800d5d8:	601a      	str	r2, [r3, #0]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2104      	movs	r1, #4
 800d5e0:	f7ff ff94 	bl	800d50c <std>
 800d5e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	2109      	movs	r1, #9
 800d5ec:	f7ff ff8e 	bl	800d50c <std>
 800d5f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fa:	2112      	movs	r1, #18
 800d5fc:	f7ff bf86 	b.w	800d50c <std>
 800d600:	20006bcc 	.word	0x20006bcc
 800d604:	20006a94 	.word	0x20006a94
 800d608:	0800d579 	.word	0x0800d579

0800d60c <__sfp_lock_acquire>:
 800d60c:	4801      	ldr	r0, [pc, #4]	@ (800d614 <__sfp_lock_acquire+0x8>)
 800d60e:	f000 b918 	b.w	800d842 <__retarget_lock_acquire_recursive>
 800d612:	bf00      	nop
 800d614:	20006bd5 	.word	0x20006bd5

0800d618 <__sfp_lock_release>:
 800d618:	4801      	ldr	r0, [pc, #4]	@ (800d620 <__sfp_lock_release+0x8>)
 800d61a:	f000 b913 	b.w	800d844 <__retarget_lock_release_recursive>
 800d61e:	bf00      	nop
 800d620:	20006bd5 	.word	0x20006bd5

0800d624 <__sinit>:
 800d624:	b510      	push	{r4, lr}
 800d626:	4604      	mov	r4, r0
 800d628:	f7ff fff0 	bl	800d60c <__sfp_lock_acquire>
 800d62c:	6a23      	ldr	r3, [r4, #32]
 800d62e:	b11b      	cbz	r3, 800d638 <__sinit+0x14>
 800d630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d634:	f7ff bff0 	b.w	800d618 <__sfp_lock_release>
 800d638:	4b04      	ldr	r3, [pc, #16]	@ (800d64c <__sinit+0x28>)
 800d63a:	6223      	str	r3, [r4, #32]
 800d63c:	4b04      	ldr	r3, [pc, #16]	@ (800d650 <__sinit+0x2c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1f5      	bne.n	800d630 <__sinit+0xc>
 800d644:	f7ff ffc4 	bl	800d5d0 <global_stdio_init.part.0>
 800d648:	e7f2      	b.n	800d630 <__sinit+0xc>
 800d64a:	bf00      	nop
 800d64c:	0800d591 	.word	0x0800d591
 800d650:	20006bcc 	.word	0x20006bcc

0800d654 <_fwalk_sglue>:
 800d654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d658:	4607      	mov	r7, r0
 800d65a:	4688      	mov	r8, r1
 800d65c:	4614      	mov	r4, r2
 800d65e:	2600      	movs	r6, #0
 800d660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d664:	f1b9 0901 	subs.w	r9, r9, #1
 800d668:	d505      	bpl.n	800d676 <_fwalk_sglue+0x22>
 800d66a:	6824      	ldr	r4, [r4, #0]
 800d66c:	2c00      	cmp	r4, #0
 800d66e:	d1f7      	bne.n	800d660 <_fwalk_sglue+0xc>
 800d670:	4630      	mov	r0, r6
 800d672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d676:	89ab      	ldrh	r3, [r5, #12]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d907      	bls.n	800d68c <_fwalk_sglue+0x38>
 800d67c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d680:	3301      	adds	r3, #1
 800d682:	d003      	beq.n	800d68c <_fwalk_sglue+0x38>
 800d684:	4629      	mov	r1, r5
 800d686:	4638      	mov	r0, r7
 800d688:	47c0      	blx	r8
 800d68a:	4306      	orrs	r6, r0
 800d68c:	3568      	adds	r5, #104	@ 0x68
 800d68e:	e7e9      	b.n	800d664 <_fwalk_sglue+0x10>

0800d690 <iprintf>:
 800d690:	b40f      	push	{r0, r1, r2, r3}
 800d692:	b507      	push	{r0, r1, r2, lr}
 800d694:	4906      	ldr	r1, [pc, #24]	@ (800d6b0 <iprintf+0x20>)
 800d696:	ab04      	add	r3, sp, #16
 800d698:	6808      	ldr	r0, [r1, #0]
 800d69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69e:	6881      	ldr	r1, [r0, #8]
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	f000 fa27 	bl	800daf4 <_vfiprintf_r>
 800d6a6:	b003      	add	sp, #12
 800d6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6ac:	b004      	add	sp, #16
 800d6ae:	4770      	bx	lr
 800d6b0:	20000038 	.word	0x20000038

0800d6b4 <__sread>:
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6bc:	f000 f878 	bl	800d7b0 <_read_r>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	bfab      	itete	ge
 800d6c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d6c8:	181b      	addge	r3, r3, r0
 800d6ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6ce:	bfac      	ite	ge
 800d6d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6d2:	81a3      	strhlt	r3, [r4, #12]
 800d6d4:	bd10      	pop	{r4, pc}

0800d6d6 <__swrite>:
 800d6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6da:	461f      	mov	r7, r3
 800d6dc:	898b      	ldrh	r3, [r1, #12]
 800d6de:	05db      	lsls	r3, r3, #23
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	4616      	mov	r6, r2
 800d6e6:	d505      	bpl.n	800d6f4 <__swrite+0x1e>
 800d6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f000 f84c 	bl	800d78c <_lseek_r>
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	4632      	mov	r2, r6
 800d702:	463b      	mov	r3, r7
 800d704:	4628      	mov	r0, r5
 800d706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d70a:	f000 b863 	b.w	800d7d4 <_write_r>

0800d70e <__sseek>:
 800d70e:	b510      	push	{r4, lr}
 800d710:	460c      	mov	r4, r1
 800d712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d716:	f000 f839 	bl	800d78c <_lseek_r>
 800d71a:	1c43      	adds	r3, r0, #1
 800d71c:	89a3      	ldrh	r3, [r4, #12]
 800d71e:	bf15      	itete	ne
 800d720:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d722:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d726:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d72a:	81a3      	strheq	r3, [r4, #12]
 800d72c:	bf18      	it	ne
 800d72e:	81a3      	strhne	r3, [r4, #12]
 800d730:	bd10      	pop	{r4, pc}

0800d732 <__sclose>:
 800d732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d736:	f000 b819 	b.w	800d76c <_close_r>

0800d73a <memcmp>:
 800d73a:	b510      	push	{r4, lr}
 800d73c:	3901      	subs	r1, #1
 800d73e:	4402      	add	r2, r0
 800d740:	4290      	cmp	r0, r2
 800d742:	d101      	bne.n	800d748 <memcmp+0xe>
 800d744:	2000      	movs	r0, #0
 800d746:	e005      	b.n	800d754 <memcmp+0x1a>
 800d748:	7803      	ldrb	r3, [r0, #0]
 800d74a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d74e:	42a3      	cmp	r3, r4
 800d750:	d001      	beq.n	800d756 <memcmp+0x1c>
 800d752:	1b18      	subs	r0, r3, r4
 800d754:	bd10      	pop	{r4, pc}
 800d756:	3001      	adds	r0, #1
 800d758:	e7f2      	b.n	800d740 <memcmp+0x6>

0800d75a <memset>:
 800d75a:	4402      	add	r2, r0
 800d75c:	4603      	mov	r3, r0
 800d75e:	4293      	cmp	r3, r2
 800d760:	d100      	bne.n	800d764 <memset+0xa>
 800d762:	4770      	bx	lr
 800d764:	f803 1b01 	strb.w	r1, [r3], #1
 800d768:	e7f9      	b.n	800d75e <memset+0x4>
	...

0800d76c <_close_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d06      	ldr	r5, [pc, #24]	@ (800d788 <_close_r+0x1c>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	602b      	str	r3, [r5, #0]
 800d778:	f7f3 f950 	bl	8000a1c <_close>
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d102      	bne.n	800d786 <_close_r+0x1a>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b103      	cbz	r3, 800d786 <_close_r+0x1a>
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	20006bd0 	.word	0x20006bd0

0800d78c <_lseek_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d07      	ldr	r5, [pc, #28]	@ (800d7ac <_lseek_r+0x20>)
 800d790:	4604      	mov	r4, r0
 800d792:	4608      	mov	r0, r1
 800d794:	4611      	mov	r1, r2
 800d796:	2200      	movs	r2, #0
 800d798:	602a      	str	r2, [r5, #0]
 800d79a:	461a      	mov	r2, r3
 800d79c:	f7f3 f965 	bl	8000a6a <_lseek>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_lseek_r+0x1e>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_lseek_r+0x1e>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	20006bd0 	.word	0x20006bd0

0800d7b0 <_read_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d07      	ldr	r5, [pc, #28]	@ (800d7d0 <_read_r+0x20>)
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	4608      	mov	r0, r1
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	602a      	str	r2, [r5, #0]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f7f3 f8f3 	bl	80009aa <_read>
 800d7c4:	1c43      	adds	r3, r0, #1
 800d7c6:	d102      	bne.n	800d7ce <_read_r+0x1e>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	b103      	cbz	r3, 800d7ce <_read_r+0x1e>
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	bd38      	pop	{r3, r4, r5, pc}
 800d7d0:	20006bd0 	.word	0x20006bd0

0800d7d4 <_write_r>:
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	4d07      	ldr	r5, [pc, #28]	@ (800d7f4 <_write_r+0x20>)
 800d7d8:	4604      	mov	r4, r0
 800d7da:	4608      	mov	r0, r1
 800d7dc:	4611      	mov	r1, r2
 800d7de:	2200      	movs	r2, #0
 800d7e0:	602a      	str	r2, [r5, #0]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	f7f3 f8fe 	bl	80009e4 <_write>
 800d7e8:	1c43      	adds	r3, r0, #1
 800d7ea:	d102      	bne.n	800d7f2 <_write_r+0x1e>
 800d7ec:	682b      	ldr	r3, [r5, #0]
 800d7ee:	b103      	cbz	r3, 800d7f2 <_write_r+0x1e>
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	20006bd0 	.word	0x20006bd0

0800d7f8 <__libc_init_array>:
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	4d0d      	ldr	r5, [pc, #52]	@ (800d830 <__libc_init_array+0x38>)
 800d7fc:	4c0d      	ldr	r4, [pc, #52]	@ (800d834 <__libc_init_array+0x3c>)
 800d7fe:	1b64      	subs	r4, r4, r5
 800d800:	10a4      	asrs	r4, r4, #2
 800d802:	2600      	movs	r6, #0
 800d804:	42a6      	cmp	r6, r4
 800d806:	d109      	bne.n	800d81c <__libc_init_array+0x24>
 800d808:	4d0b      	ldr	r5, [pc, #44]	@ (800d838 <__libc_init_array+0x40>)
 800d80a:	4c0c      	ldr	r4, [pc, #48]	@ (800d83c <__libc_init_array+0x44>)
 800d80c:	f000 fe4a 	bl	800e4a4 <_init>
 800d810:	1b64      	subs	r4, r4, r5
 800d812:	10a4      	asrs	r4, r4, #2
 800d814:	2600      	movs	r6, #0
 800d816:	42a6      	cmp	r6, r4
 800d818:	d105      	bne.n	800d826 <__libc_init_array+0x2e>
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d820:	4798      	blx	r3
 800d822:	3601      	adds	r6, #1
 800d824:	e7ee      	b.n	800d804 <__libc_init_array+0xc>
 800d826:	f855 3b04 	ldr.w	r3, [r5], #4
 800d82a:	4798      	blx	r3
 800d82c:	3601      	adds	r6, #1
 800d82e:	e7f2      	b.n	800d816 <__libc_init_array+0x1e>
 800d830:	08011080 	.word	0x08011080
 800d834:	08011080 	.word	0x08011080
 800d838:	08011080 	.word	0x08011080
 800d83c:	08011084 	.word	0x08011084

0800d840 <__retarget_lock_init_recursive>:
 800d840:	4770      	bx	lr

0800d842 <__retarget_lock_acquire_recursive>:
 800d842:	4770      	bx	lr

0800d844 <__retarget_lock_release_recursive>:
 800d844:	4770      	bx	lr

0800d846 <memcpy>:
 800d846:	440a      	add	r2, r1
 800d848:	4291      	cmp	r1, r2
 800d84a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d84e:	d100      	bne.n	800d852 <memcpy+0xc>
 800d850:	4770      	bx	lr
 800d852:	b510      	push	{r4, lr}
 800d854:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d85c:	4291      	cmp	r1, r2
 800d85e:	d1f9      	bne.n	800d854 <memcpy+0xe>
 800d860:	bd10      	pop	{r4, pc}
	...

0800d864 <__assert_func>:
 800d864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d866:	4614      	mov	r4, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	4b09      	ldr	r3, [pc, #36]	@ (800d890 <__assert_func+0x2c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4605      	mov	r5, r0
 800d870:	68d8      	ldr	r0, [r3, #12]
 800d872:	b954      	cbnz	r4, 800d88a <__assert_func+0x26>
 800d874:	4b07      	ldr	r3, [pc, #28]	@ (800d894 <__assert_func+0x30>)
 800d876:	461c      	mov	r4, r3
 800d878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d87c:	9100      	str	r1, [sp, #0]
 800d87e:	462b      	mov	r3, r5
 800d880:	4905      	ldr	r1, [pc, #20]	@ (800d898 <__assert_func+0x34>)
 800d882:	f000 fc89 	bl	800e198 <fiprintf>
 800d886:	f000 fd3d 	bl	800e304 <abort>
 800d88a:	4b04      	ldr	r3, [pc, #16]	@ (800d89c <__assert_func+0x38>)
 800d88c:	e7f4      	b.n	800d878 <__assert_func+0x14>
 800d88e:	bf00      	nop
 800d890:	20000038 	.word	0x20000038
 800d894:	08011044 	.word	0x08011044
 800d898:	08011016 	.word	0x08011016
 800d89c:	08011009 	.word	0x08011009

0800d8a0 <_free_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4605      	mov	r5, r0
 800d8a4:	2900      	cmp	r1, #0
 800d8a6:	d041      	beq.n	800d92c <_free_r+0x8c>
 800d8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8ac:	1f0c      	subs	r4, r1, #4
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	bfb8      	it	lt
 800d8b2:	18e4      	addlt	r4, r4, r3
 800d8b4:	f000 f8e8 	bl	800da88 <__malloc_lock>
 800d8b8:	4a1d      	ldr	r2, [pc, #116]	@ (800d930 <_free_r+0x90>)
 800d8ba:	6813      	ldr	r3, [r2, #0]
 800d8bc:	b933      	cbnz	r3, 800d8cc <_free_r+0x2c>
 800d8be:	6063      	str	r3, [r4, #4]
 800d8c0:	6014      	str	r4, [r2, #0]
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8c8:	f000 b8e4 	b.w	800da94 <__malloc_unlock>
 800d8cc:	42a3      	cmp	r3, r4
 800d8ce:	d908      	bls.n	800d8e2 <_free_r+0x42>
 800d8d0:	6820      	ldr	r0, [r4, #0]
 800d8d2:	1821      	adds	r1, r4, r0
 800d8d4:	428b      	cmp	r3, r1
 800d8d6:	bf01      	itttt	eq
 800d8d8:	6819      	ldreq	r1, [r3, #0]
 800d8da:	685b      	ldreq	r3, [r3, #4]
 800d8dc:	1809      	addeq	r1, r1, r0
 800d8de:	6021      	streq	r1, [r4, #0]
 800d8e0:	e7ed      	b.n	800d8be <_free_r+0x1e>
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	b10b      	cbz	r3, 800d8ec <_free_r+0x4c>
 800d8e8:	42a3      	cmp	r3, r4
 800d8ea:	d9fa      	bls.n	800d8e2 <_free_r+0x42>
 800d8ec:	6811      	ldr	r1, [r2, #0]
 800d8ee:	1850      	adds	r0, r2, r1
 800d8f0:	42a0      	cmp	r0, r4
 800d8f2:	d10b      	bne.n	800d90c <_free_r+0x6c>
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	4401      	add	r1, r0
 800d8f8:	1850      	adds	r0, r2, r1
 800d8fa:	4283      	cmp	r3, r0
 800d8fc:	6011      	str	r1, [r2, #0]
 800d8fe:	d1e0      	bne.n	800d8c2 <_free_r+0x22>
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	6053      	str	r3, [r2, #4]
 800d906:	4408      	add	r0, r1
 800d908:	6010      	str	r0, [r2, #0]
 800d90a:	e7da      	b.n	800d8c2 <_free_r+0x22>
 800d90c:	d902      	bls.n	800d914 <_free_r+0x74>
 800d90e:	230c      	movs	r3, #12
 800d910:	602b      	str	r3, [r5, #0]
 800d912:	e7d6      	b.n	800d8c2 <_free_r+0x22>
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	1821      	adds	r1, r4, r0
 800d918:	428b      	cmp	r3, r1
 800d91a:	bf04      	itt	eq
 800d91c:	6819      	ldreq	r1, [r3, #0]
 800d91e:	685b      	ldreq	r3, [r3, #4]
 800d920:	6063      	str	r3, [r4, #4]
 800d922:	bf04      	itt	eq
 800d924:	1809      	addeq	r1, r1, r0
 800d926:	6021      	streq	r1, [r4, #0]
 800d928:	6054      	str	r4, [r2, #4]
 800d92a:	e7ca      	b.n	800d8c2 <_free_r+0x22>
 800d92c:	bd38      	pop	{r3, r4, r5, pc}
 800d92e:	bf00      	nop
 800d930:	20006bdc 	.word	0x20006bdc

0800d934 <malloc>:
 800d934:	4b02      	ldr	r3, [pc, #8]	@ (800d940 <malloc+0xc>)
 800d936:	4601      	mov	r1, r0
 800d938:	6818      	ldr	r0, [r3, #0]
 800d93a:	f000 b825 	b.w	800d988 <_malloc_r>
 800d93e:	bf00      	nop
 800d940:	20000038 	.word	0x20000038

0800d944 <sbrk_aligned>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	4e0f      	ldr	r6, [pc, #60]	@ (800d984 <sbrk_aligned+0x40>)
 800d948:	460c      	mov	r4, r1
 800d94a:	6831      	ldr	r1, [r6, #0]
 800d94c:	4605      	mov	r5, r0
 800d94e:	b911      	cbnz	r1, 800d956 <sbrk_aligned+0x12>
 800d950:	f000 fcc8 	bl	800e2e4 <_sbrk_r>
 800d954:	6030      	str	r0, [r6, #0]
 800d956:	4621      	mov	r1, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	f000 fcc3 	bl	800e2e4 <_sbrk_r>
 800d95e:	1c43      	adds	r3, r0, #1
 800d960:	d103      	bne.n	800d96a <sbrk_aligned+0x26>
 800d962:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d966:	4620      	mov	r0, r4
 800d968:	bd70      	pop	{r4, r5, r6, pc}
 800d96a:	1cc4      	adds	r4, r0, #3
 800d96c:	f024 0403 	bic.w	r4, r4, #3
 800d970:	42a0      	cmp	r0, r4
 800d972:	d0f8      	beq.n	800d966 <sbrk_aligned+0x22>
 800d974:	1a21      	subs	r1, r4, r0
 800d976:	4628      	mov	r0, r5
 800d978:	f000 fcb4 	bl	800e2e4 <_sbrk_r>
 800d97c:	3001      	adds	r0, #1
 800d97e:	d1f2      	bne.n	800d966 <sbrk_aligned+0x22>
 800d980:	e7ef      	b.n	800d962 <sbrk_aligned+0x1e>
 800d982:	bf00      	nop
 800d984:	20006bd8 	.word	0x20006bd8

0800d988 <_malloc_r>:
 800d988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d98c:	1ccd      	adds	r5, r1, #3
 800d98e:	f025 0503 	bic.w	r5, r5, #3
 800d992:	3508      	adds	r5, #8
 800d994:	2d0c      	cmp	r5, #12
 800d996:	bf38      	it	cc
 800d998:	250c      	movcc	r5, #12
 800d99a:	2d00      	cmp	r5, #0
 800d99c:	4606      	mov	r6, r0
 800d99e:	db01      	blt.n	800d9a4 <_malloc_r+0x1c>
 800d9a0:	42a9      	cmp	r1, r5
 800d9a2:	d904      	bls.n	800d9ae <_malloc_r+0x26>
 800d9a4:	230c      	movs	r3, #12
 800d9a6:	6033      	str	r3, [r6, #0]
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da84 <_malloc_r+0xfc>
 800d9b2:	f000 f869 	bl	800da88 <__malloc_lock>
 800d9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ba:	461c      	mov	r4, r3
 800d9bc:	bb44      	cbnz	r4, 800da10 <_malloc_r+0x88>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f7ff ffbf 	bl	800d944 <sbrk_aligned>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	d158      	bne.n	800da7e <_malloc_r+0xf6>
 800d9cc:	f8d8 4000 	ldr.w	r4, [r8]
 800d9d0:	4627      	mov	r7, r4
 800d9d2:	2f00      	cmp	r7, #0
 800d9d4:	d143      	bne.n	800da5e <_malloc_r+0xd6>
 800d9d6:	2c00      	cmp	r4, #0
 800d9d8:	d04b      	beq.n	800da72 <_malloc_r+0xea>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	4639      	mov	r1, r7
 800d9de:	4630      	mov	r0, r6
 800d9e0:	eb04 0903 	add.w	r9, r4, r3
 800d9e4:	f000 fc7e 	bl	800e2e4 <_sbrk_r>
 800d9e8:	4581      	cmp	r9, r0
 800d9ea:	d142      	bne.n	800da72 <_malloc_r+0xea>
 800d9ec:	6821      	ldr	r1, [r4, #0]
 800d9ee:	1a6d      	subs	r5, r5, r1
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7ff ffa6 	bl	800d944 <sbrk_aligned>
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	d03a      	beq.n	800da72 <_malloc_r+0xea>
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	442b      	add	r3, r5
 800da00:	6023      	str	r3, [r4, #0]
 800da02:	f8d8 3000 	ldr.w	r3, [r8]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	bb62      	cbnz	r2, 800da64 <_malloc_r+0xdc>
 800da0a:	f8c8 7000 	str.w	r7, [r8]
 800da0e:	e00f      	b.n	800da30 <_malloc_r+0xa8>
 800da10:	6822      	ldr	r2, [r4, #0]
 800da12:	1b52      	subs	r2, r2, r5
 800da14:	d420      	bmi.n	800da58 <_malloc_r+0xd0>
 800da16:	2a0b      	cmp	r2, #11
 800da18:	d917      	bls.n	800da4a <_malloc_r+0xc2>
 800da1a:	1961      	adds	r1, r4, r5
 800da1c:	42a3      	cmp	r3, r4
 800da1e:	6025      	str	r5, [r4, #0]
 800da20:	bf18      	it	ne
 800da22:	6059      	strne	r1, [r3, #4]
 800da24:	6863      	ldr	r3, [r4, #4]
 800da26:	bf08      	it	eq
 800da28:	f8c8 1000 	streq.w	r1, [r8]
 800da2c:	5162      	str	r2, [r4, r5]
 800da2e:	604b      	str	r3, [r1, #4]
 800da30:	4630      	mov	r0, r6
 800da32:	f000 f82f 	bl	800da94 <__malloc_unlock>
 800da36:	f104 000b 	add.w	r0, r4, #11
 800da3a:	1d23      	adds	r3, r4, #4
 800da3c:	f020 0007 	bic.w	r0, r0, #7
 800da40:	1ac2      	subs	r2, r0, r3
 800da42:	bf1c      	itt	ne
 800da44:	1a1b      	subne	r3, r3, r0
 800da46:	50a3      	strne	r3, [r4, r2]
 800da48:	e7af      	b.n	800d9aa <_malloc_r+0x22>
 800da4a:	6862      	ldr	r2, [r4, #4]
 800da4c:	42a3      	cmp	r3, r4
 800da4e:	bf0c      	ite	eq
 800da50:	f8c8 2000 	streq.w	r2, [r8]
 800da54:	605a      	strne	r2, [r3, #4]
 800da56:	e7eb      	b.n	800da30 <_malloc_r+0xa8>
 800da58:	4623      	mov	r3, r4
 800da5a:	6864      	ldr	r4, [r4, #4]
 800da5c:	e7ae      	b.n	800d9bc <_malloc_r+0x34>
 800da5e:	463c      	mov	r4, r7
 800da60:	687f      	ldr	r7, [r7, #4]
 800da62:	e7b6      	b.n	800d9d2 <_malloc_r+0x4a>
 800da64:	461a      	mov	r2, r3
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	42a3      	cmp	r3, r4
 800da6a:	d1fb      	bne.n	800da64 <_malloc_r+0xdc>
 800da6c:	2300      	movs	r3, #0
 800da6e:	6053      	str	r3, [r2, #4]
 800da70:	e7de      	b.n	800da30 <_malloc_r+0xa8>
 800da72:	230c      	movs	r3, #12
 800da74:	6033      	str	r3, [r6, #0]
 800da76:	4630      	mov	r0, r6
 800da78:	f000 f80c 	bl	800da94 <__malloc_unlock>
 800da7c:	e794      	b.n	800d9a8 <_malloc_r+0x20>
 800da7e:	6005      	str	r5, [r0, #0]
 800da80:	e7d6      	b.n	800da30 <_malloc_r+0xa8>
 800da82:	bf00      	nop
 800da84:	20006bdc 	.word	0x20006bdc

0800da88 <__malloc_lock>:
 800da88:	4801      	ldr	r0, [pc, #4]	@ (800da90 <__malloc_lock+0x8>)
 800da8a:	f7ff beda 	b.w	800d842 <__retarget_lock_acquire_recursive>
 800da8e:	bf00      	nop
 800da90:	20006bd4 	.word	0x20006bd4

0800da94 <__malloc_unlock>:
 800da94:	4801      	ldr	r0, [pc, #4]	@ (800da9c <__malloc_unlock+0x8>)
 800da96:	f7ff bed5 	b.w	800d844 <__retarget_lock_release_recursive>
 800da9a:	bf00      	nop
 800da9c:	20006bd4 	.word	0x20006bd4

0800daa0 <__sfputc_r>:
 800daa0:	6893      	ldr	r3, [r2, #8]
 800daa2:	3b01      	subs	r3, #1
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	b410      	push	{r4}
 800daa8:	6093      	str	r3, [r2, #8]
 800daaa:	da08      	bge.n	800dabe <__sfputc_r+0x1e>
 800daac:	6994      	ldr	r4, [r2, #24]
 800daae:	42a3      	cmp	r3, r4
 800dab0:	db01      	blt.n	800dab6 <__sfputc_r+0x16>
 800dab2:	290a      	cmp	r1, #10
 800dab4:	d103      	bne.n	800dabe <__sfputc_r+0x1e>
 800dab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daba:	f000 bb7f 	b.w	800e1bc <__swbuf_r>
 800dabe:	6813      	ldr	r3, [r2, #0]
 800dac0:	1c58      	adds	r0, r3, #1
 800dac2:	6010      	str	r0, [r2, #0]
 800dac4:	7019      	strb	r1, [r3, #0]
 800dac6:	4608      	mov	r0, r1
 800dac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <__sfputs_r>:
 800dace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad0:	4606      	mov	r6, r0
 800dad2:	460f      	mov	r7, r1
 800dad4:	4614      	mov	r4, r2
 800dad6:	18d5      	adds	r5, r2, r3
 800dad8:	42ac      	cmp	r4, r5
 800dada:	d101      	bne.n	800dae0 <__sfputs_r+0x12>
 800dadc:	2000      	movs	r0, #0
 800dade:	e007      	b.n	800daf0 <__sfputs_r+0x22>
 800dae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae4:	463a      	mov	r2, r7
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ffda 	bl	800daa0 <__sfputc_r>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d1f3      	bne.n	800dad8 <__sfputs_r+0xa>
 800daf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800daf4 <_vfiprintf_r>:
 800daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf8:	460d      	mov	r5, r1
 800dafa:	b09d      	sub	sp, #116	@ 0x74
 800dafc:	4614      	mov	r4, r2
 800dafe:	4698      	mov	r8, r3
 800db00:	4606      	mov	r6, r0
 800db02:	b118      	cbz	r0, 800db0c <_vfiprintf_r+0x18>
 800db04:	6a03      	ldr	r3, [r0, #32]
 800db06:	b90b      	cbnz	r3, 800db0c <_vfiprintf_r+0x18>
 800db08:	f7ff fd8c 	bl	800d624 <__sinit>
 800db0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db0e:	07d9      	lsls	r1, r3, #31
 800db10:	d405      	bmi.n	800db1e <_vfiprintf_r+0x2a>
 800db12:	89ab      	ldrh	r3, [r5, #12]
 800db14:	059a      	lsls	r2, r3, #22
 800db16:	d402      	bmi.n	800db1e <_vfiprintf_r+0x2a>
 800db18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db1a:	f7ff fe92 	bl	800d842 <__retarget_lock_acquire_recursive>
 800db1e:	89ab      	ldrh	r3, [r5, #12]
 800db20:	071b      	lsls	r3, r3, #28
 800db22:	d501      	bpl.n	800db28 <_vfiprintf_r+0x34>
 800db24:	692b      	ldr	r3, [r5, #16]
 800db26:	b99b      	cbnz	r3, 800db50 <_vfiprintf_r+0x5c>
 800db28:	4629      	mov	r1, r5
 800db2a:	4630      	mov	r0, r6
 800db2c:	f000 fb84 	bl	800e238 <__swsetup_r>
 800db30:	b170      	cbz	r0, 800db50 <_vfiprintf_r+0x5c>
 800db32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db34:	07dc      	lsls	r4, r3, #31
 800db36:	d504      	bpl.n	800db42 <_vfiprintf_r+0x4e>
 800db38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db3c:	b01d      	add	sp, #116	@ 0x74
 800db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db42:	89ab      	ldrh	r3, [r5, #12]
 800db44:	0598      	lsls	r0, r3, #22
 800db46:	d4f7      	bmi.n	800db38 <_vfiprintf_r+0x44>
 800db48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db4a:	f7ff fe7b 	bl	800d844 <__retarget_lock_release_recursive>
 800db4e:	e7f3      	b.n	800db38 <_vfiprintf_r+0x44>
 800db50:	2300      	movs	r3, #0
 800db52:	9309      	str	r3, [sp, #36]	@ 0x24
 800db54:	2320      	movs	r3, #32
 800db56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800db5e:	2330      	movs	r3, #48	@ 0x30
 800db60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd10 <_vfiprintf_r+0x21c>
 800db64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db68:	f04f 0901 	mov.w	r9, #1
 800db6c:	4623      	mov	r3, r4
 800db6e:	469a      	mov	sl, r3
 800db70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db74:	b10a      	cbz	r2, 800db7a <_vfiprintf_r+0x86>
 800db76:	2a25      	cmp	r2, #37	@ 0x25
 800db78:	d1f9      	bne.n	800db6e <_vfiprintf_r+0x7a>
 800db7a:	ebba 0b04 	subs.w	fp, sl, r4
 800db7e:	d00b      	beq.n	800db98 <_vfiprintf_r+0xa4>
 800db80:	465b      	mov	r3, fp
 800db82:	4622      	mov	r2, r4
 800db84:	4629      	mov	r1, r5
 800db86:	4630      	mov	r0, r6
 800db88:	f7ff ffa1 	bl	800dace <__sfputs_r>
 800db8c:	3001      	adds	r0, #1
 800db8e:	f000 80a7 	beq.w	800dce0 <_vfiprintf_r+0x1ec>
 800db92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db94:	445a      	add	r2, fp
 800db96:	9209      	str	r2, [sp, #36]	@ 0x24
 800db98:	f89a 3000 	ldrb.w	r3, [sl]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 809f 	beq.w	800dce0 <_vfiprintf_r+0x1ec>
 800dba2:	2300      	movs	r3, #0
 800dba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbac:	f10a 0a01 	add.w	sl, sl, #1
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	9307      	str	r3, [sp, #28]
 800dbb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbba:	4654      	mov	r4, sl
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc2:	4853      	ldr	r0, [pc, #332]	@ (800dd10 <_vfiprintf_r+0x21c>)
 800dbc4:	f7f2 fb24 	bl	8000210 <memchr>
 800dbc8:	9a04      	ldr	r2, [sp, #16]
 800dbca:	b9d8      	cbnz	r0, 800dc04 <_vfiprintf_r+0x110>
 800dbcc:	06d1      	lsls	r1, r2, #27
 800dbce:	bf44      	itt	mi
 800dbd0:	2320      	movmi	r3, #32
 800dbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbd6:	0713      	lsls	r3, r2, #28
 800dbd8:	bf44      	itt	mi
 800dbda:	232b      	movmi	r3, #43	@ 0x2b
 800dbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbe0:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbe6:	d015      	beq.n	800dc14 <_vfiprintf_r+0x120>
 800dbe8:	9a07      	ldr	r2, [sp, #28]
 800dbea:	4654      	mov	r4, sl
 800dbec:	2000      	movs	r0, #0
 800dbee:	f04f 0c0a 	mov.w	ip, #10
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbf8:	3b30      	subs	r3, #48	@ 0x30
 800dbfa:	2b09      	cmp	r3, #9
 800dbfc:	d94b      	bls.n	800dc96 <_vfiprintf_r+0x1a2>
 800dbfe:	b1b0      	cbz	r0, 800dc2e <_vfiprintf_r+0x13a>
 800dc00:	9207      	str	r2, [sp, #28]
 800dc02:	e014      	b.n	800dc2e <_vfiprintf_r+0x13a>
 800dc04:	eba0 0308 	sub.w	r3, r0, r8
 800dc08:	fa09 f303 	lsl.w	r3, r9, r3
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	9304      	str	r3, [sp, #16]
 800dc10:	46a2      	mov	sl, r4
 800dc12:	e7d2      	b.n	800dbba <_vfiprintf_r+0xc6>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	1d19      	adds	r1, r3, #4
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	9103      	str	r1, [sp, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	bfbb      	ittet	lt
 800dc20:	425b      	neglt	r3, r3
 800dc22:	f042 0202 	orrlt.w	r2, r2, #2
 800dc26:	9307      	strge	r3, [sp, #28]
 800dc28:	9307      	strlt	r3, [sp, #28]
 800dc2a:	bfb8      	it	lt
 800dc2c:	9204      	strlt	r2, [sp, #16]
 800dc2e:	7823      	ldrb	r3, [r4, #0]
 800dc30:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc32:	d10a      	bne.n	800dc4a <_vfiprintf_r+0x156>
 800dc34:	7863      	ldrb	r3, [r4, #1]
 800dc36:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc38:	d132      	bne.n	800dca0 <_vfiprintf_r+0x1ac>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	1d1a      	adds	r2, r3, #4
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	9203      	str	r2, [sp, #12]
 800dc42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc46:	3402      	adds	r4, #2
 800dc48:	9305      	str	r3, [sp, #20]
 800dc4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd20 <_vfiprintf_r+0x22c>
 800dc4e:	7821      	ldrb	r1, [r4, #0]
 800dc50:	2203      	movs	r2, #3
 800dc52:	4650      	mov	r0, sl
 800dc54:	f7f2 fadc 	bl	8000210 <memchr>
 800dc58:	b138      	cbz	r0, 800dc6a <_vfiprintf_r+0x176>
 800dc5a:	9b04      	ldr	r3, [sp, #16]
 800dc5c:	eba0 000a 	sub.w	r0, r0, sl
 800dc60:	2240      	movs	r2, #64	@ 0x40
 800dc62:	4082      	lsls	r2, r0
 800dc64:	4313      	orrs	r3, r2
 800dc66:	3401      	adds	r4, #1
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc6e:	4829      	ldr	r0, [pc, #164]	@ (800dd14 <_vfiprintf_r+0x220>)
 800dc70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc74:	2206      	movs	r2, #6
 800dc76:	f7f2 facb 	bl	8000210 <memchr>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d03f      	beq.n	800dcfe <_vfiprintf_r+0x20a>
 800dc7e:	4b26      	ldr	r3, [pc, #152]	@ (800dd18 <_vfiprintf_r+0x224>)
 800dc80:	bb1b      	cbnz	r3, 800dcca <_vfiprintf_r+0x1d6>
 800dc82:	9b03      	ldr	r3, [sp, #12]
 800dc84:	3307      	adds	r3, #7
 800dc86:	f023 0307 	bic.w	r3, r3, #7
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	9303      	str	r3, [sp, #12]
 800dc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc90:	443b      	add	r3, r7
 800dc92:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc94:	e76a      	b.n	800db6c <_vfiprintf_r+0x78>
 800dc96:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	2001      	movs	r0, #1
 800dc9e:	e7a8      	b.n	800dbf2 <_vfiprintf_r+0xfe>
 800dca0:	2300      	movs	r3, #0
 800dca2:	3401      	adds	r4, #1
 800dca4:	9305      	str	r3, [sp, #20]
 800dca6:	4619      	mov	r1, r3
 800dca8:	f04f 0c0a 	mov.w	ip, #10
 800dcac:	4620      	mov	r0, r4
 800dcae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcb2:	3a30      	subs	r2, #48	@ 0x30
 800dcb4:	2a09      	cmp	r2, #9
 800dcb6:	d903      	bls.n	800dcc0 <_vfiprintf_r+0x1cc>
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0c6      	beq.n	800dc4a <_vfiprintf_r+0x156>
 800dcbc:	9105      	str	r1, [sp, #20]
 800dcbe:	e7c4      	b.n	800dc4a <_vfiprintf_r+0x156>
 800dcc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e7f0      	b.n	800dcac <_vfiprintf_r+0x1b8>
 800dcca:	ab03      	add	r3, sp, #12
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	462a      	mov	r2, r5
 800dcd0:	4b12      	ldr	r3, [pc, #72]	@ (800dd1c <_vfiprintf_r+0x228>)
 800dcd2:	a904      	add	r1, sp, #16
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f3af 8000 	nop.w
 800dcda:	4607      	mov	r7, r0
 800dcdc:	1c78      	adds	r0, r7, #1
 800dcde:	d1d6      	bne.n	800dc8e <_vfiprintf_r+0x19a>
 800dce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dce2:	07d9      	lsls	r1, r3, #31
 800dce4:	d405      	bmi.n	800dcf2 <_vfiprintf_r+0x1fe>
 800dce6:	89ab      	ldrh	r3, [r5, #12]
 800dce8:	059a      	lsls	r2, r3, #22
 800dcea:	d402      	bmi.n	800dcf2 <_vfiprintf_r+0x1fe>
 800dcec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcee:	f7ff fda9 	bl	800d844 <__retarget_lock_release_recursive>
 800dcf2:	89ab      	ldrh	r3, [r5, #12]
 800dcf4:	065b      	lsls	r3, r3, #25
 800dcf6:	f53f af1f 	bmi.w	800db38 <_vfiprintf_r+0x44>
 800dcfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcfc:	e71e      	b.n	800db3c <_vfiprintf_r+0x48>
 800dcfe:	ab03      	add	r3, sp, #12
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	462a      	mov	r2, r5
 800dd04:	4b05      	ldr	r3, [pc, #20]	@ (800dd1c <_vfiprintf_r+0x228>)
 800dd06:	a904      	add	r1, sp, #16
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 f879 	bl	800de00 <_printf_i>
 800dd0e:	e7e4      	b.n	800dcda <_vfiprintf_r+0x1e6>
 800dd10:	08011045 	.word	0x08011045
 800dd14:	0801104f 	.word	0x0801104f
 800dd18:	00000000 	.word	0x00000000
 800dd1c:	0800dacf 	.word	0x0800dacf
 800dd20:	0801104b 	.word	0x0801104b

0800dd24 <_printf_common>:
 800dd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd28:	4616      	mov	r6, r2
 800dd2a:	4698      	mov	r8, r3
 800dd2c:	688a      	ldr	r2, [r1, #8]
 800dd2e:	690b      	ldr	r3, [r1, #16]
 800dd30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	bfb8      	it	lt
 800dd38:	4613      	movlt	r3, r2
 800dd3a:	6033      	str	r3, [r6, #0]
 800dd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd40:	4607      	mov	r7, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	b10a      	cbz	r2, 800dd4a <_printf_common+0x26>
 800dd46:	3301      	adds	r3, #1
 800dd48:	6033      	str	r3, [r6, #0]
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	0699      	lsls	r1, r3, #26
 800dd4e:	bf42      	ittt	mi
 800dd50:	6833      	ldrmi	r3, [r6, #0]
 800dd52:	3302      	addmi	r3, #2
 800dd54:	6033      	strmi	r3, [r6, #0]
 800dd56:	6825      	ldr	r5, [r4, #0]
 800dd58:	f015 0506 	ands.w	r5, r5, #6
 800dd5c:	d106      	bne.n	800dd6c <_printf_common+0x48>
 800dd5e:	f104 0a19 	add.w	sl, r4, #25
 800dd62:	68e3      	ldr	r3, [r4, #12]
 800dd64:	6832      	ldr	r2, [r6, #0]
 800dd66:	1a9b      	subs	r3, r3, r2
 800dd68:	42ab      	cmp	r3, r5
 800dd6a:	dc26      	bgt.n	800ddba <_printf_common+0x96>
 800dd6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd70:	6822      	ldr	r2, [r4, #0]
 800dd72:	3b00      	subs	r3, #0
 800dd74:	bf18      	it	ne
 800dd76:	2301      	movne	r3, #1
 800dd78:	0692      	lsls	r2, r2, #26
 800dd7a:	d42b      	bmi.n	800ddd4 <_printf_common+0xb0>
 800dd7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd80:	4641      	mov	r1, r8
 800dd82:	4638      	mov	r0, r7
 800dd84:	47c8      	blx	r9
 800dd86:	3001      	adds	r0, #1
 800dd88:	d01e      	beq.n	800ddc8 <_printf_common+0xa4>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	6922      	ldr	r2, [r4, #16]
 800dd8e:	f003 0306 	and.w	r3, r3, #6
 800dd92:	2b04      	cmp	r3, #4
 800dd94:	bf02      	ittt	eq
 800dd96:	68e5      	ldreq	r5, [r4, #12]
 800dd98:	6833      	ldreq	r3, [r6, #0]
 800dd9a:	1aed      	subeq	r5, r5, r3
 800dd9c:	68a3      	ldr	r3, [r4, #8]
 800dd9e:	bf0c      	ite	eq
 800dda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dda4:	2500      	movne	r5, #0
 800dda6:	4293      	cmp	r3, r2
 800dda8:	bfc4      	itt	gt
 800ddaa:	1a9b      	subgt	r3, r3, r2
 800ddac:	18ed      	addgt	r5, r5, r3
 800ddae:	2600      	movs	r6, #0
 800ddb0:	341a      	adds	r4, #26
 800ddb2:	42b5      	cmp	r5, r6
 800ddb4:	d11a      	bne.n	800ddec <_printf_common+0xc8>
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	e008      	b.n	800ddcc <_printf_common+0xa8>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	4652      	mov	r2, sl
 800ddbe:	4641      	mov	r1, r8
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	47c8      	blx	r9
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d103      	bne.n	800ddd0 <_printf_common+0xac>
 800ddc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd0:	3501      	adds	r5, #1
 800ddd2:	e7c6      	b.n	800dd62 <_printf_common+0x3e>
 800ddd4:	18e1      	adds	r1, r4, r3
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	2030      	movs	r0, #48	@ 0x30
 800ddda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ddde:	4422      	add	r2, r4
 800dde0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dde4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dde8:	3302      	adds	r3, #2
 800ddea:	e7c7      	b.n	800dd7c <_printf_common+0x58>
 800ddec:	2301      	movs	r3, #1
 800ddee:	4622      	mov	r2, r4
 800ddf0:	4641      	mov	r1, r8
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	47c8      	blx	r9
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	d0e6      	beq.n	800ddc8 <_printf_common+0xa4>
 800ddfa:	3601      	adds	r6, #1
 800ddfc:	e7d9      	b.n	800ddb2 <_printf_common+0x8e>
	...

0800de00 <_printf_i>:
 800de00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	7e0f      	ldrb	r7, [r1, #24]
 800de06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de08:	2f78      	cmp	r7, #120	@ 0x78
 800de0a:	4691      	mov	r9, r2
 800de0c:	4680      	mov	r8, r0
 800de0e:	460c      	mov	r4, r1
 800de10:	469a      	mov	sl, r3
 800de12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de16:	d807      	bhi.n	800de28 <_printf_i+0x28>
 800de18:	2f62      	cmp	r7, #98	@ 0x62
 800de1a:	d80a      	bhi.n	800de32 <_printf_i+0x32>
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	f000 80d2 	beq.w	800dfc6 <_printf_i+0x1c6>
 800de22:	2f58      	cmp	r7, #88	@ 0x58
 800de24:	f000 80b9 	beq.w	800df9a <_printf_i+0x19a>
 800de28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800de30:	e03a      	b.n	800dea8 <_printf_i+0xa8>
 800de32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800de36:	2b15      	cmp	r3, #21
 800de38:	d8f6      	bhi.n	800de28 <_printf_i+0x28>
 800de3a:	a101      	add	r1, pc, #4	@ (adr r1, 800de40 <_printf_i+0x40>)
 800de3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de40:	0800de99 	.word	0x0800de99
 800de44:	0800dead 	.word	0x0800dead
 800de48:	0800de29 	.word	0x0800de29
 800de4c:	0800de29 	.word	0x0800de29
 800de50:	0800de29 	.word	0x0800de29
 800de54:	0800de29 	.word	0x0800de29
 800de58:	0800dead 	.word	0x0800dead
 800de5c:	0800de29 	.word	0x0800de29
 800de60:	0800de29 	.word	0x0800de29
 800de64:	0800de29 	.word	0x0800de29
 800de68:	0800de29 	.word	0x0800de29
 800de6c:	0800dfad 	.word	0x0800dfad
 800de70:	0800ded7 	.word	0x0800ded7
 800de74:	0800df67 	.word	0x0800df67
 800de78:	0800de29 	.word	0x0800de29
 800de7c:	0800de29 	.word	0x0800de29
 800de80:	0800dfcf 	.word	0x0800dfcf
 800de84:	0800de29 	.word	0x0800de29
 800de88:	0800ded7 	.word	0x0800ded7
 800de8c:	0800de29 	.word	0x0800de29
 800de90:	0800de29 	.word	0x0800de29
 800de94:	0800df6f 	.word	0x0800df6f
 800de98:	6833      	ldr	r3, [r6, #0]
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6032      	str	r2, [r6, #0]
 800dea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dea8:	2301      	movs	r3, #1
 800deaa:	e09d      	b.n	800dfe8 <_printf_i+0x1e8>
 800deac:	6833      	ldr	r3, [r6, #0]
 800deae:	6820      	ldr	r0, [r4, #0]
 800deb0:	1d19      	adds	r1, r3, #4
 800deb2:	6031      	str	r1, [r6, #0]
 800deb4:	0606      	lsls	r6, r0, #24
 800deb6:	d501      	bpl.n	800debc <_printf_i+0xbc>
 800deb8:	681d      	ldr	r5, [r3, #0]
 800deba:	e003      	b.n	800dec4 <_printf_i+0xc4>
 800debc:	0645      	lsls	r5, r0, #25
 800debe:	d5fb      	bpl.n	800deb8 <_printf_i+0xb8>
 800dec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dec4:	2d00      	cmp	r5, #0
 800dec6:	da03      	bge.n	800ded0 <_printf_i+0xd0>
 800dec8:	232d      	movs	r3, #45	@ 0x2d
 800deca:	426d      	negs	r5, r5
 800decc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ded0:	4859      	ldr	r0, [pc, #356]	@ (800e038 <_printf_i+0x238>)
 800ded2:	230a      	movs	r3, #10
 800ded4:	e011      	b.n	800defa <_printf_i+0xfa>
 800ded6:	6821      	ldr	r1, [r4, #0]
 800ded8:	6833      	ldr	r3, [r6, #0]
 800deda:	0608      	lsls	r0, r1, #24
 800dedc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dee0:	d402      	bmi.n	800dee8 <_printf_i+0xe8>
 800dee2:	0649      	lsls	r1, r1, #25
 800dee4:	bf48      	it	mi
 800dee6:	b2ad      	uxthmi	r5, r5
 800dee8:	2f6f      	cmp	r7, #111	@ 0x6f
 800deea:	4853      	ldr	r0, [pc, #332]	@ (800e038 <_printf_i+0x238>)
 800deec:	6033      	str	r3, [r6, #0]
 800deee:	bf14      	ite	ne
 800def0:	230a      	movne	r3, #10
 800def2:	2308      	moveq	r3, #8
 800def4:	2100      	movs	r1, #0
 800def6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800defa:	6866      	ldr	r6, [r4, #4]
 800defc:	60a6      	str	r6, [r4, #8]
 800defe:	2e00      	cmp	r6, #0
 800df00:	bfa2      	ittt	ge
 800df02:	6821      	ldrge	r1, [r4, #0]
 800df04:	f021 0104 	bicge.w	r1, r1, #4
 800df08:	6021      	strge	r1, [r4, #0]
 800df0a:	b90d      	cbnz	r5, 800df10 <_printf_i+0x110>
 800df0c:	2e00      	cmp	r6, #0
 800df0e:	d04b      	beq.n	800dfa8 <_printf_i+0x1a8>
 800df10:	4616      	mov	r6, r2
 800df12:	fbb5 f1f3 	udiv	r1, r5, r3
 800df16:	fb03 5711 	mls	r7, r3, r1, r5
 800df1a:	5dc7      	ldrb	r7, [r0, r7]
 800df1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df20:	462f      	mov	r7, r5
 800df22:	42bb      	cmp	r3, r7
 800df24:	460d      	mov	r5, r1
 800df26:	d9f4      	bls.n	800df12 <_printf_i+0x112>
 800df28:	2b08      	cmp	r3, #8
 800df2a:	d10b      	bne.n	800df44 <_printf_i+0x144>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	07df      	lsls	r7, r3, #31
 800df30:	d508      	bpl.n	800df44 <_printf_i+0x144>
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	6861      	ldr	r1, [r4, #4]
 800df36:	4299      	cmp	r1, r3
 800df38:	bfde      	ittt	le
 800df3a:	2330      	movle	r3, #48	@ 0x30
 800df3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df40:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800df44:	1b92      	subs	r2, r2, r6
 800df46:	6122      	str	r2, [r4, #16]
 800df48:	f8cd a000 	str.w	sl, [sp]
 800df4c:	464b      	mov	r3, r9
 800df4e:	aa03      	add	r2, sp, #12
 800df50:	4621      	mov	r1, r4
 800df52:	4640      	mov	r0, r8
 800df54:	f7ff fee6 	bl	800dd24 <_printf_common>
 800df58:	3001      	adds	r0, #1
 800df5a:	d14a      	bne.n	800dff2 <_printf_i+0x1f2>
 800df5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df60:	b004      	add	sp, #16
 800df62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	f043 0320 	orr.w	r3, r3, #32
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	4833      	ldr	r0, [pc, #204]	@ (800e03c <_printf_i+0x23c>)
 800df70:	2778      	movs	r7, #120	@ 0x78
 800df72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	6831      	ldr	r1, [r6, #0]
 800df7a:	061f      	lsls	r7, r3, #24
 800df7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800df80:	d402      	bmi.n	800df88 <_printf_i+0x188>
 800df82:	065f      	lsls	r7, r3, #25
 800df84:	bf48      	it	mi
 800df86:	b2ad      	uxthmi	r5, r5
 800df88:	6031      	str	r1, [r6, #0]
 800df8a:	07d9      	lsls	r1, r3, #31
 800df8c:	bf44      	itt	mi
 800df8e:	f043 0320 	orrmi.w	r3, r3, #32
 800df92:	6023      	strmi	r3, [r4, #0]
 800df94:	b11d      	cbz	r5, 800df9e <_printf_i+0x19e>
 800df96:	2310      	movs	r3, #16
 800df98:	e7ac      	b.n	800def4 <_printf_i+0xf4>
 800df9a:	4827      	ldr	r0, [pc, #156]	@ (800e038 <_printf_i+0x238>)
 800df9c:	e7e9      	b.n	800df72 <_printf_i+0x172>
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	f023 0320 	bic.w	r3, r3, #32
 800dfa4:	6023      	str	r3, [r4, #0]
 800dfa6:	e7f6      	b.n	800df96 <_printf_i+0x196>
 800dfa8:	4616      	mov	r6, r2
 800dfaa:	e7bd      	b.n	800df28 <_printf_i+0x128>
 800dfac:	6833      	ldr	r3, [r6, #0]
 800dfae:	6825      	ldr	r5, [r4, #0]
 800dfb0:	6961      	ldr	r1, [r4, #20]
 800dfb2:	1d18      	adds	r0, r3, #4
 800dfb4:	6030      	str	r0, [r6, #0]
 800dfb6:	062e      	lsls	r6, r5, #24
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	d501      	bpl.n	800dfc0 <_printf_i+0x1c0>
 800dfbc:	6019      	str	r1, [r3, #0]
 800dfbe:	e002      	b.n	800dfc6 <_printf_i+0x1c6>
 800dfc0:	0668      	lsls	r0, r5, #25
 800dfc2:	d5fb      	bpl.n	800dfbc <_printf_i+0x1bc>
 800dfc4:	8019      	strh	r1, [r3, #0]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	6123      	str	r3, [r4, #16]
 800dfca:	4616      	mov	r6, r2
 800dfcc:	e7bc      	b.n	800df48 <_printf_i+0x148>
 800dfce:	6833      	ldr	r3, [r6, #0]
 800dfd0:	1d1a      	adds	r2, r3, #4
 800dfd2:	6032      	str	r2, [r6, #0]
 800dfd4:	681e      	ldr	r6, [r3, #0]
 800dfd6:	6862      	ldr	r2, [r4, #4]
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7f2 f918 	bl	8000210 <memchr>
 800dfe0:	b108      	cbz	r0, 800dfe6 <_printf_i+0x1e6>
 800dfe2:	1b80      	subs	r0, r0, r6
 800dfe4:	6060      	str	r0, [r4, #4]
 800dfe6:	6863      	ldr	r3, [r4, #4]
 800dfe8:	6123      	str	r3, [r4, #16]
 800dfea:	2300      	movs	r3, #0
 800dfec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dff0:	e7aa      	b.n	800df48 <_printf_i+0x148>
 800dff2:	6923      	ldr	r3, [r4, #16]
 800dff4:	4632      	mov	r2, r6
 800dff6:	4649      	mov	r1, r9
 800dff8:	4640      	mov	r0, r8
 800dffa:	47d0      	blx	sl
 800dffc:	3001      	adds	r0, #1
 800dffe:	d0ad      	beq.n	800df5c <_printf_i+0x15c>
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	079b      	lsls	r3, r3, #30
 800e004:	d413      	bmi.n	800e02e <_printf_i+0x22e>
 800e006:	68e0      	ldr	r0, [r4, #12]
 800e008:	9b03      	ldr	r3, [sp, #12]
 800e00a:	4298      	cmp	r0, r3
 800e00c:	bfb8      	it	lt
 800e00e:	4618      	movlt	r0, r3
 800e010:	e7a6      	b.n	800df60 <_printf_i+0x160>
 800e012:	2301      	movs	r3, #1
 800e014:	4632      	mov	r2, r6
 800e016:	4649      	mov	r1, r9
 800e018:	4640      	mov	r0, r8
 800e01a:	47d0      	blx	sl
 800e01c:	3001      	adds	r0, #1
 800e01e:	d09d      	beq.n	800df5c <_printf_i+0x15c>
 800e020:	3501      	adds	r5, #1
 800e022:	68e3      	ldr	r3, [r4, #12]
 800e024:	9903      	ldr	r1, [sp, #12]
 800e026:	1a5b      	subs	r3, r3, r1
 800e028:	42ab      	cmp	r3, r5
 800e02a:	dcf2      	bgt.n	800e012 <_printf_i+0x212>
 800e02c:	e7eb      	b.n	800e006 <_printf_i+0x206>
 800e02e:	2500      	movs	r5, #0
 800e030:	f104 0619 	add.w	r6, r4, #25
 800e034:	e7f5      	b.n	800e022 <_printf_i+0x222>
 800e036:	bf00      	nop
 800e038:	08011056 	.word	0x08011056
 800e03c:	08011067 	.word	0x08011067

0800e040 <__sflush_r>:
 800e040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	0716      	lsls	r6, r2, #28
 800e04a:	4605      	mov	r5, r0
 800e04c:	460c      	mov	r4, r1
 800e04e:	d454      	bmi.n	800e0fa <__sflush_r+0xba>
 800e050:	684b      	ldr	r3, [r1, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	dc02      	bgt.n	800e05c <__sflush_r+0x1c>
 800e056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e058:	2b00      	cmp	r3, #0
 800e05a:	dd48      	ble.n	800e0ee <__sflush_r+0xae>
 800e05c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e05e:	2e00      	cmp	r6, #0
 800e060:	d045      	beq.n	800e0ee <__sflush_r+0xae>
 800e062:	2300      	movs	r3, #0
 800e064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e068:	682f      	ldr	r7, [r5, #0]
 800e06a:	6a21      	ldr	r1, [r4, #32]
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	d030      	beq.n	800e0d2 <__sflush_r+0x92>
 800e070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	0759      	lsls	r1, r3, #29
 800e076:	d505      	bpl.n	800e084 <__sflush_r+0x44>
 800e078:	6863      	ldr	r3, [r4, #4]
 800e07a:	1ad2      	subs	r2, r2, r3
 800e07c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e07e:	b10b      	cbz	r3, 800e084 <__sflush_r+0x44>
 800e080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e082:	1ad2      	subs	r2, r2, r3
 800e084:	2300      	movs	r3, #0
 800e086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e088:	6a21      	ldr	r1, [r4, #32]
 800e08a:	4628      	mov	r0, r5
 800e08c:	47b0      	blx	r6
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	d106      	bne.n	800e0a2 <__sflush_r+0x62>
 800e094:	6829      	ldr	r1, [r5, #0]
 800e096:	291d      	cmp	r1, #29
 800e098:	d82b      	bhi.n	800e0f2 <__sflush_r+0xb2>
 800e09a:	4a2a      	ldr	r2, [pc, #168]	@ (800e144 <__sflush_r+0x104>)
 800e09c:	410a      	asrs	r2, r1
 800e09e:	07d6      	lsls	r6, r2, #31
 800e0a0:	d427      	bmi.n	800e0f2 <__sflush_r+0xb2>
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	6062      	str	r2, [r4, #4]
 800e0a6:	04d9      	lsls	r1, r3, #19
 800e0a8:	6922      	ldr	r2, [r4, #16]
 800e0aa:	6022      	str	r2, [r4, #0]
 800e0ac:	d504      	bpl.n	800e0b8 <__sflush_r+0x78>
 800e0ae:	1c42      	adds	r2, r0, #1
 800e0b0:	d101      	bne.n	800e0b6 <__sflush_r+0x76>
 800e0b2:	682b      	ldr	r3, [r5, #0]
 800e0b4:	b903      	cbnz	r3, 800e0b8 <__sflush_r+0x78>
 800e0b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0ba:	602f      	str	r7, [r5, #0]
 800e0bc:	b1b9      	cbz	r1, 800e0ee <__sflush_r+0xae>
 800e0be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	d002      	beq.n	800e0cc <__sflush_r+0x8c>
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7ff fbea 	bl	800d8a0 <_free_r>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0d0:	e00d      	b.n	800e0ee <__sflush_r+0xae>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	47b0      	blx	r6
 800e0d8:	4602      	mov	r2, r0
 800e0da:	1c50      	adds	r0, r2, #1
 800e0dc:	d1c9      	bne.n	800e072 <__sflush_r+0x32>
 800e0de:	682b      	ldr	r3, [r5, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d0c6      	beq.n	800e072 <__sflush_r+0x32>
 800e0e4:	2b1d      	cmp	r3, #29
 800e0e6:	d001      	beq.n	800e0ec <__sflush_r+0xac>
 800e0e8:	2b16      	cmp	r3, #22
 800e0ea:	d11e      	bne.n	800e12a <__sflush_r+0xea>
 800e0ec:	602f      	str	r7, [r5, #0]
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	e022      	b.n	800e138 <__sflush_r+0xf8>
 800e0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0f6:	b21b      	sxth	r3, r3
 800e0f8:	e01b      	b.n	800e132 <__sflush_r+0xf2>
 800e0fa:	690f      	ldr	r7, [r1, #16]
 800e0fc:	2f00      	cmp	r7, #0
 800e0fe:	d0f6      	beq.n	800e0ee <__sflush_r+0xae>
 800e100:	0793      	lsls	r3, r2, #30
 800e102:	680e      	ldr	r6, [r1, #0]
 800e104:	bf08      	it	eq
 800e106:	694b      	ldreq	r3, [r1, #20]
 800e108:	600f      	str	r7, [r1, #0]
 800e10a:	bf18      	it	ne
 800e10c:	2300      	movne	r3, #0
 800e10e:	eba6 0807 	sub.w	r8, r6, r7
 800e112:	608b      	str	r3, [r1, #8]
 800e114:	f1b8 0f00 	cmp.w	r8, #0
 800e118:	dde9      	ble.n	800e0ee <__sflush_r+0xae>
 800e11a:	6a21      	ldr	r1, [r4, #32]
 800e11c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e11e:	4643      	mov	r3, r8
 800e120:	463a      	mov	r2, r7
 800e122:	4628      	mov	r0, r5
 800e124:	47b0      	blx	r6
 800e126:	2800      	cmp	r0, #0
 800e128:	dc08      	bgt.n	800e13c <__sflush_r+0xfc>
 800e12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e132:	81a3      	strh	r3, [r4, #12]
 800e134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13c:	4407      	add	r7, r0
 800e13e:	eba8 0800 	sub.w	r8, r8, r0
 800e142:	e7e7      	b.n	800e114 <__sflush_r+0xd4>
 800e144:	dfbffffe 	.word	0xdfbffffe

0800e148 <_fflush_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	690b      	ldr	r3, [r1, #16]
 800e14c:	4605      	mov	r5, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	b913      	cbnz	r3, 800e158 <_fflush_r+0x10>
 800e152:	2500      	movs	r5, #0
 800e154:	4628      	mov	r0, r5
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	b118      	cbz	r0, 800e162 <_fflush_r+0x1a>
 800e15a:	6a03      	ldr	r3, [r0, #32]
 800e15c:	b90b      	cbnz	r3, 800e162 <_fflush_r+0x1a>
 800e15e:	f7ff fa61 	bl	800d624 <__sinit>
 800e162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d0f3      	beq.n	800e152 <_fflush_r+0xa>
 800e16a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e16c:	07d0      	lsls	r0, r2, #31
 800e16e:	d404      	bmi.n	800e17a <_fflush_r+0x32>
 800e170:	0599      	lsls	r1, r3, #22
 800e172:	d402      	bmi.n	800e17a <_fflush_r+0x32>
 800e174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e176:	f7ff fb64 	bl	800d842 <__retarget_lock_acquire_recursive>
 800e17a:	4628      	mov	r0, r5
 800e17c:	4621      	mov	r1, r4
 800e17e:	f7ff ff5f 	bl	800e040 <__sflush_r>
 800e182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e184:	07da      	lsls	r2, r3, #31
 800e186:	4605      	mov	r5, r0
 800e188:	d4e4      	bmi.n	800e154 <_fflush_r+0xc>
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	059b      	lsls	r3, r3, #22
 800e18e:	d4e1      	bmi.n	800e154 <_fflush_r+0xc>
 800e190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e192:	f7ff fb57 	bl	800d844 <__retarget_lock_release_recursive>
 800e196:	e7dd      	b.n	800e154 <_fflush_r+0xc>

0800e198 <fiprintf>:
 800e198:	b40e      	push	{r1, r2, r3}
 800e19a:	b503      	push	{r0, r1, lr}
 800e19c:	4601      	mov	r1, r0
 800e19e:	ab03      	add	r3, sp, #12
 800e1a0:	4805      	ldr	r0, [pc, #20]	@ (800e1b8 <fiprintf+0x20>)
 800e1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a6:	6800      	ldr	r0, [r0, #0]
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	f7ff fca3 	bl	800daf4 <_vfiprintf_r>
 800e1ae:	b002      	add	sp, #8
 800e1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1b4:	b003      	add	sp, #12
 800e1b6:	4770      	bx	lr
 800e1b8:	20000038 	.word	0x20000038

0800e1bc <__swbuf_r>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	460e      	mov	r6, r1
 800e1c0:	4614      	mov	r4, r2
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	b118      	cbz	r0, 800e1ce <__swbuf_r+0x12>
 800e1c6:	6a03      	ldr	r3, [r0, #32]
 800e1c8:	b90b      	cbnz	r3, 800e1ce <__swbuf_r+0x12>
 800e1ca:	f7ff fa2b 	bl	800d624 <__sinit>
 800e1ce:	69a3      	ldr	r3, [r4, #24]
 800e1d0:	60a3      	str	r3, [r4, #8]
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	071a      	lsls	r2, r3, #28
 800e1d6:	d501      	bpl.n	800e1dc <__swbuf_r+0x20>
 800e1d8:	6923      	ldr	r3, [r4, #16]
 800e1da:	b943      	cbnz	r3, 800e1ee <__swbuf_r+0x32>
 800e1dc:	4621      	mov	r1, r4
 800e1de:	4628      	mov	r0, r5
 800e1e0:	f000 f82a 	bl	800e238 <__swsetup_r>
 800e1e4:	b118      	cbz	r0, 800e1ee <__swbuf_r+0x32>
 800e1e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	6922      	ldr	r2, [r4, #16]
 800e1f2:	1a98      	subs	r0, r3, r2
 800e1f4:	6963      	ldr	r3, [r4, #20]
 800e1f6:	b2f6      	uxtb	r6, r6
 800e1f8:	4283      	cmp	r3, r0
 800e1fa:	4637      	mov	r7, r6
 800e1fc:	dc05      	bgt.n	800e20a <__swbuf_r+0x4e>
 800e1fe:	4621      	mov	r1, r4
 800e200:	4628      	mov	r0, r5
 800e202:	f7ff ffa1 	bl	800e148 <_fflush_r>
 800e206:	2800      	cmp	r0, #0
 800e208:	d1ed      	bne.n	800e1e6 <__swbuf_r+0x2a>
 800e20a:	68a3      	ldr	r3, [r4, #8]
 800e20c:	3b01      	subs	r3, #1
 800e20e:	60a3      	str	r3, [r4, #8]
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	1c5a      	adds	r2, r3, #1
 800e214:	6022      	str	r2, [r4, #0]
 800e216:	701e      	strb	r6, [r3, #0]
 800e218:	6962      	ldr	r2, [r4, #20]
 800e21a:	1c43      	adds	r3, r0, #1
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d004      	beq.n	800e22a <__swbuf_r+0x6e>
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	07db      	lsls	r3, r3, #31
 800e224:	d5e1      	bpl.n	800e1ea <__swbuf_r+0x2e>
 800e226:	2e0a      	cmp	r6, #10
 800e228:	d1df      	bne.n	800e1ea <__swbuf_r+0x2e>
 800e22a:	4621      	mov	r1, r4
 800e22c:	4628      	mov	r0, r5
 800e22e:	f7ff ff8b 	bl	800e148 <_fflush_r>
 800e232:	2800      	cmp	r0, #0
 800e234:	d0d9      	beq.n	800e1ea <__swbuf_r+0x2e>
 800e236:	e7d6      	b.n	800e1e6 <__swbuf_r+0x2a>

0800e238 <__swsetup_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4b29      	ldr	r3, [pc, #164]	@ (800e2e0 <__swsetup_r+0xa8>)
 800e23c:	4605      	mov	r5, r0
 800e23e:	6818      	ldr	r0, [r3, #0]
 800e240:	460c      	mov	r4, r1
 800e242:	b118      	cbz	r0, 800e24c <__swsetup_r+0x14>
 800e244:	6a03      	ldr	r3, [r0, #32]
 800e246:	b90b      	cbnz	r3, 800e24c <__swsetup_r+0x14>
 800e248:	f7ff f9ec 	bl	800d624 <__sinit>
 800e24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e250:	0719      	lsls	r1, r3, #28
 800e252:	d422      	bmi.n	800e29a <__swsetup_r+0x62>
 800e254:	06da      	lsls	r2, r3, #27
 800e256:	d407      	bmi.n	800e268 <__swsetup_r+0x30>
 800e258:	2209      	movs	r2, #9
 800e25a:	602a      	str	r2, [r5, #0]
 800e25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e260:	81a3      	strh	r3, [r4, #12]
 800e262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e266:	e033      	b.n	800e2d0 <__swsetup_r+0x98>
 800e268:	0758      	lsls	r0, r3, #29
 800e26a:	d512      	bpl.n	800e292 <__swsetup_r+0x5a>
 800e26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e26e:	b141      	cbz	r1, 800e282 <__swsetup_r+0x4a>
 800e270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e274:	4299      	cmp	r1, r3
 800e276:	d002      	beq.n	800e27e <__swsetup_r+0x46>
 800e278:	4628      	mov	r0, r5
 800e27a:	f7ff fb11 	bl	800d8a0 <_free_r>
 800e27e:	2300      	movs	r3, #0
 800e280:	6363      	str	r3, [r4, #52]	@ 0x34
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e288:	81a3      	strh	r3, [r4, #12]
 800e28a:	2300      	movs	r3, #0
 800e28c:	6063      	str	r3, [r4, #4]
 800e28e:	6923      	ldr	r3, [r4, #16]
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	f043 0308 	orr.w	r3, r3, #8
 800e298:	81a3      	strh	r3, [r4, #12]
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	b94b      	cbnz	r3, 800e2b2 <__swsetup_r+0x7a>
 800e29e:	89a3      	ldrh	r3, [r4, #12]
 800e2a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2a8:	d003      	beq.n	800e2b2 <__swsetup_r+0x7a>
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f000 f856 	bl	800e35e <__smakebuf_r>
 800e2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2b6:	f013 0201 	ands.w	r2, r3, #1
 800e2ba:	d00a      	beq.n	800e2d2 <__swsetup_r+0x9a>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	60a2      	str	r2, [r4, #8]
 800e2c0:	6962      	ldr	r2, [r4, #20]
 800e2c2:	4252      	negs	r2, r2
 800e2c4:	61a2      	str	r2, [r4, #24]
 800e2c6:	6922      	ldr	r2, [r4, #16]
 800e2c8:	b942      	cbnz	r2, 800e2dc <__swsetup_r+0xa4>
 800e2ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2ce:	d1c5      	bne.n	800e25c <__swsetup_r+0x24>
 800e2d0:	bd38      	pop	{r3, r4, r5, pc}
 800e2d2:	0799      	lsls	r1, r3, #30
 800e2d4:	bf58      	it	pl
 800e2d6:	6962      	ldrpl	r2, [r4, #20]
 800e2d8:	60a2      	str	r2, [r4, #8]
 800e2da:	e7f4      	b.n	800e2c6 <__swsetup_r+0x8e>
 800e2dc:	2000      	movs	r0, #0
 800e2de:	e7f7      	b.n	800e2d0 <__swsetup_r+0x98>
 800e2e0:	20000038 	.word	0x20000038

0800e2e4 <_sbrk_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d06      	ldr	r5, [pc, #24]	@ (800e300 <_sbrk_r+0x1c>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	602b      	str	r3, [r5, #0]
 800e2f0:	f7f2 fbc8 	bl	8000a84 <_sbrk>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	d102      	bne.n	800e2fe <_sbrk_r+0x1a>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	b103      	cbz	r3, 800e2fe <_sbrk_r+0x1a>
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	20006bd0 	.word	0x20006bd0

0800e304 <abort>:
 800e304:	b508      	push	{r3, lr}
 800e306:	2006      	movs	r0, #6
 800e308:	f000 f88e 	bl	800e428 <raise>
 800e30c:	2001      	movs	r0, #1
 800e30e:	f7f2 fb41 	bl	8000994 <_exit>

0800e312 <__swhatbuf_r>:
 800e312:	b570      	push	{r4, r5, r6, lr}
 800e314:	460c      	mov	r4, r1
 800e316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e31a:	2900      	cmp	r1, #0
 800e31c:	b096      	sub	sp, #88	@ 0x58
 800e31e:	4615      	mov	r5, r2
 800e320:	461e      	mov	r6, r3
 800e322:	da0d      	bge.n	800e340 <__swhatbuf_r+0x2e>
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e32a:	f04f 0100 	mov.w	r1, #0
 800e32e:	bf14      	ite	ne
 800e330:	2340      	movne	r3, #64	@ 0x40
 800e332:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e336:	2000      	movs	r0, #0
 800e338:	6031      	str	r1, [r6, #0]
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	b016      	add	sp, #88	@ 0x58
 800e33e:	bd70      	pop	{r4, r5, r6, pc}
 800e340:	466a      	mov	r2, sp
 800e342:	f000 f879 	bl	800e438 <_fstat_r>
 800e346:	2800      	cmp	r0, #0
 800e348:	dbec      	blt.n	800e324 <__swhatbuf_r+0x12>
 800e34a:	9901      	ldr	r1, [sp, #4]
 800e34c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e350:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e354:	4259      	negs	r1, r3
 800e356:	4159      	adcs	r1, r3
 800e358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e35c:	e7eb      	b.n	800e336 <__swhatbuf_r+0x24>

0800e35e <__smakebuf_r>:
 800e35e:	898b      	ldrh	r3, [r1, #12]
 800e360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e362:	079d      	lsls	r5, r3, #30
 800e364:	4606      	mov	r6, r0
 800e366:	460c      	mov	r4, r1
 800e368:	d507      	bpl.n	800e37a <__smakebuf_r+0x1c>
 800e36a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	6123      	str	r3, [r4, #16]
 800e372:	2301      	movs	r3, #1
 800e374:	6163      	str	r3, [r4, #20]
 800e376:	b003      	add	sp, #12
 800e378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e37a:	ab01      	add	r3, sp, #4
 800e37c:	466a      	mov	r2, sp
 800e37e:	f7ff ffc8 	bl	800e312 <__swhatbuf_r>
 800e382:	9f00      	ldr	r7, [sp, #0]
 800e384:	4605      	mov	r5, r0
 800e386:	4639      	mov	r1, r7
 800e388:	4630      	mov	r0, r6
 800e38a:	f7ff fafd 	bl	800d988 <_malloc_r>
 800e38e:	b948      	cbnz	r0, 800e3a4 <__smakebuf_r+0x46>
 800e390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e394:	059a      	lsls	r2, r3, #22
 800e396:	d4ee      	bmi.n	800e376 <__smakebuf_r+0x18>
 800e398:	f023 0303 	bic.w	r3, r3, #3
 800e39c:	f043 0302 	orr.w	r3, r3, #2
 800e3a0:	81a3      	strh	r3, [r4, #12]
 800e3a2:	e7e2      	b.n	800e36a <__smakebuf_r+0xc>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	9b01      	ldr	r3, [sp, #4]
 800e3b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3b4:	b15b      	cbz	r3, 800e3ce <__smakebuf_r+0x70>
 800e3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f000 f84e 	bl	800e45c <_isatty_r>
 800e3c0:	b128      	cbz	r0, 800e3ce <__smakebuf_r+0x70>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f023 0303 	bic.w	r3, r3, #3
 800e3c8:	f043 0301 	orr.w	r3, r3, #1
 800e3cc:	81a3      	strh	r3, [r4, #12]
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	431d      	orrs	r5, r3
 800e3d2:	81a5      	strh	r5, [r4, #12]
 800e3d4:	e7cf      	b.n	800e376 <__smakebuf_r+0x18>

0800e3d6 <_raise_r>:
 800e3d6:	291f      	cmp	r1, #31
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	4605      	mov	r5, r0
 800e3dc:	460c      	mov	r4, r1
 800e3de:	d904      	bls.n	800e3ea <_raise_r+0x14>
 800e3e0:	2316      	movs	r3, #22
 800e3e2:	6003      	str	r3, [r0, #0]
 800e3e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3e8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e3ec:	b112      	cbz	r2, 800e3f4 <_raise_r+0x1e>
 800e3ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3f2:	b94b      	cbnz	r3, 800e408 <_raise_r+0x32>
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	f000 f853 	bl	800e4a0 <_getpid_r>
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	4601      	mov	r1, r0
 800e3fe:	4628      	mov	r0, r5
 800e400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e404:	f000 b83a 	b.w	800e47c <_kill_r>
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d00a      	beq.n	800e422 <_raise_r+0x4c>
 800e40c:	1c59      	adds	r1, r3, #1
 800e40e:	d103      	bne.n	800e418 <_raise_r+0x42>
 800e410:	2316      	movs	r3, #22
 800e412:	6003      	str	r3, [r0, #0]
 800e414:	2001      	movs	r0, #1
 800e416:	e7e7      	b.n	800e3e8 <_raise_r+0x12>
 800e418:	2100      	movs	r1, #0
 800e41a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e41e:	4620      	mov	r0, r4
 800e420:	4798      	blx	r3
 800e422:	2000      	movs	r0, #0
 800e424:	e7e0      	b.n	800e3e8 <_raise_r+0x12>
	...

0800e428 <raise>:
 800e428:	4b02      	ldr	r3, [pc, #8]	@ (800e434 <raise+0xc>)
 800e42a:	4601      	mov	r1, r0
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f7ff bfd2 	b.w	800e3d6 <_raise_r>
 800e432:	bf00      	nop
 800e434:	20000038 	.word	0x20000038

0800e438 <_fstat_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	4d07      	ldr	r5, [pc, #28]	@ (800e458 <_fstat_r+0x20>)
 800e43c:	2300      	movs	r3, #0
 800e43e:	4604      	mov	r4, r0
 800e440:	4608      	mov	r0, r1
 800e442:	4611      	mov	r1, r2
 800e444:	602b      	str	r3, [r5, #0]
 800e446:	f7f2 faf5 	bl	8000a34 <_fstat>
 800e44a:	1c43      	adds	r3, r0, #1
 800e44c:	d102      	bne.n	800e454 <_fstat_r+0x1c>
 800e44e:	682b      	ldr	r3, [r5, #0]
 800e450:	b103      	cbz	r3, 800e454 <_fstat_r+0x1c>
 800e452:	6023      	str	r3, [r4, #0]
 800e454:	bd38      	pop	{r3, r4, r5, pc}
 800e456:	bf00      	nop
 800e458:	20006bd0 	.word	0x20006bd0

0800e45c <_isatty_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	4d06      	ldr	r5, [pc, #24]	@ (800e478 <_isatty_r+0x1c>)
 800e460:	2300      	movs	r3, #0
 800e462:	4604      	mov	r4, r0
 800e464:	4608      	mov	r0, r1
 800e466:	602b      	str	r3, [r5, #0]
 800e468:	f7f2 faf4 	bl	8000a54 <_isatty>
 800e46c:	1c43      	adds	r3, r0, #1
 800e46e:	d102      	bne.n	800e476 <_isatty_r+0x1a>
 800e470:	682b      	ldr	r3, [r5, #0]
 800e472:	b103      	cbz	r3, 800e476 <_isatty_r+0x1a>
 800e474:	6023      	str	r3, [r4, #0]
 800e476:	bd38      	pop	{r3, r4, r5, pc}
 800e478:	20006bd0 	.word	0x20006bd0

0800e47c <_kill_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4d07      	ldr	r5, [pc, #28]	@ (800e49c <_kill_r+0x20>)
 800e480:	2300      	movs	r3, #0
 800e482:	4604      	mov	r4, r0
 800e484:	4608      	mov	r0, r1
 800e486:	4611      	mov	r1, r2
 800e488:	602b      	str	r3, [r5, #0]
 800e48a:	f7f2 fa71 	bl	8000970 <_kill>
 800e48e:	1c43      	adds	r3, r0, #1
 800e490:	d102      	bne.n	800e498 <_kill_r+0x1c>
 800e492:	682b      	ldr	r3, [r5, #0]
 800e494:	b103      	cbz	r3, 800e498 <_kill_r+0x1c>
 800e496:	6023      	str	r3, [r4, #0]
 800e498:	bd38      	pop	{r3, r4, r5, pc}
 800e49a:	bf00      	nop
 800e49c:	20006bd0 	.word	0x20006bd0

0800e4a0 <_getpid_r>:
 800e4a0:	f7f2 ba5d 	b.w	800095e <_getpid>

0800e4a4 <_init>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	bf00      	nop
 800e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4aa:	bc08      	pop	{r3}
 800e4ac:	469e      	mov	lr, r3
 800e4ae:	4770      	bx	lr

0800e4b0 <_fini>:
 800e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b2:	bf00      	nop
 800e4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b6:	bc08      	pop	{r3}
 800e4b8:	469e      	mov	lr, r3
 800e4ba:	4770      	bx	lr
