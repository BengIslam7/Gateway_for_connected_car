
STM32_ETH_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b07c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800b244  0800b244  0000c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b360  0800b360  0000d00c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b360  0800b360  0000d00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b360  0800b360  0000d00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b360  0800b360  0000c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b364  0800b364  0000c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800b368  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000684c  2000000c  0800b374  0000d00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006858  0800b374  0000d858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015873  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004676  00000000  00000000  000228af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00026f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af6  00000000  00000000  00027d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ccea  00000000  00000000  00028866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb97  00000000  00000000  00055550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef172  00000000  00000000  000710e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b8  00000000  00000000  0016029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00163854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b22c 	.word	0x0800b22c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800b22c 	.word	0x0800b22c

08000208 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b08a      	sub	sp, #40	@ 0x28
 800020c:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 800020e:	4b29      	ldr	r3, [pc, #164]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000210:	4a29      	ldr	r2, [pc, #164]	@ (80002b8 <MX_CAN1_Init+0xb0>)
 8000212:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000214:	4b27      	ldr	r3, [pc, #156]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000216:	2210      	movs	r2, #16
 8000218:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800021a:	4b26      	ldr	r3, [pc, #152]	@ (80002b4 <MX_CAN1_Init+0xac>)
 800021c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000220:	609a      	str	r2, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8000222:	4b24      	ldr	r3, [pc, #144]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_9TQ;
 8000228:	4b22      	ldr	r3, [pc, #136]	@ (80002b4 <MX_CAN1_Init+0xac>)
 800022a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800022e:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_5TQ;
 8000230:	4b20      	ldr	r3, [pc, #128]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000232:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000236:	615a      	str	r2, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 8000238:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <MX_CAN1_Init+0xac>)
 800023a:	2200      	movs	r2, #0
 800023c:	619a      	str	r2, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 800023e:	4b1d      	ldr	r3, [pc, #116]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000240:	2200      	movs	r2, #0
 8000242:	61da      	str	r2, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8000244:	4b1b      	ldr	r3, [pc, #108]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000246:	2200      	movs	r2, #0
 8000248:	621a      	str	r2, [r3, #32]
  hcan1.Init.NART = DISABLE;
 800024a:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <MX_CAN1_Init+0xac>)
 800024c:	2200      	movs	r2, #0
 800024e:	625a      	str	r2, [r3, #36]	@ 0x24
  hcan1.Init.RFLM = DISABLE;
 8000250:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000252:	2200      	movs	r2, #0
 8000254:	629a      	str	r2, [r3, #40]	@ 0x28
  hcan1.Init.TXFP = DISABLE;
 8000256:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <MX_CAN1_Init+0xac>)
 8000258:	2200      	movs	r2, #0
 800025a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800025c:	4815      	ldr	r0, [pc, #84]	@ (80002b4 <MX_CAN1_Init+0xac>)
 800025e:	f000 fb52 	bl	8000906 <HAL_CAN_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d003      	beq.n	8000270 <MX_CAN1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000268:	214e      	movs	r1, #78	@ 0x4e
 800026a:	4814      	ldr	r0, [pc, #80]	@ (80002bc <MX_CAN1_Init+0xb4>)
 800026c:	f000 fa36 	bl	80006dc <_Error_Handler>
  }
  CAN_FilterConfTypeDef sFilterConfig;
  sFilterConfig.BankNumber=10;
 8000270:	230a      	movs	r3, #10
 8000272:	627b      	str	r3, [r7, #36]	@ 0x24
  sFilterConfig.FilterNumber=4;
 8000274:	2304      	movs	r3, #4
 8000276:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x10<< 5;
 8000280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000284:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow =  0x7FF ; ;
 8000286:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800028a:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh =0x10<< 5;
 800028c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000290:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x7FF ;
 8000292:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000296:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800029c:	2301      	movs	r3, #1
 800029e:	623b      	str	r3, [r7, #32]
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80002a0:	463b      	mov	r3, r7
 80002a2:	4619      	mov	r1, r3
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <MX_CAN1_Init+0xac>)
 80002a6:	f000 fc53 	bl	8000b50 <HAL_CAN_ConfigFilter>

}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	@ 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028
 80002b8:	40006400 	.word	0x40006400
 80002bc:	0800b244 	.word	0x0800b244

080002c0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a15      	ldr	r2, [pc, #84]	@ (8000324 <HAL_CAN_MspInit+0x64>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d124      	bne.n	800031c <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002d2:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <HAL_CAN_MspInit+0x68>)
 80002d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d6:	4a14      	ldr	r2, [pc, #80]	@ (8000328 <HAL_CAN_MspInit+0x68>)
 80002d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80002de:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <HAL_CAN_MspInit+0x68>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002e6:	60bb      	str	r3, [r7, #8]
 80002e8:	68bb      	ldr	r3, [r7, #8]

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80002ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80002ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002f0:	2302      	movs	r3, #2
 80002f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002f8:	2303      	movs	r3, #3
 80002fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002fc:	2309      	movs	r3, #9
 80002fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	4619      	mov	r1, r3
 8000306:	4809      	ldr	r0, [pc, #36]	@ (800032c <HAL_CAN_MspInit+0x6c>)
 8000308:	f002 fbd6 	bl	8002ab8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2100      	movs	r1, #0
 8000310:	2014      	movs	r0, #20
 8000312:	f001 fc0e 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000316:	2014      	movs	r0, #20
 8000318:	f001 fc27 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40006400 	.word	0x40006400
 8000328:	40023800 	.word	0x40023800
 800032c:	40020400 	.word	0x40020400

08000330 <MX_GPIO_Init>:

/** Configure pins
     PA9   ------> USART1_TX
*/
void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	@ 0x28
 8000334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000336:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a31      	ldr	r2, [pc, #196]	@ (8000400 <MX_GPIO_Init+0xd0>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
 8000342:	4b2f      	ldr	r3, [pc, #188]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a2b      	ldr	r2, [pc, #172]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
 800035a:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <MX_GPIO_Init+0xd0>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000366:	4b26      	ldr	r3, [pc, #152]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a25      	ldr	r2, [pc, #148]	@ (8000400 <MX_GPIO_Init+0xd0>)
 800036c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
 8000372:	4b23      	ldr	r3, [pc, #140]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a1f      	ldr	r2, [pc, #124]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
 800038a:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_GPIO_Init+0xd0>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_GPIO_Init+0xd0>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a19      	ldr	r2, [pc, #100]	@ (8000400 <MX_GPIO_Init+0xd0>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_GPIO_Init+0xd0>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	4814      	ldr	r0, [pc, #80]	@ (8000404 <MX_GPIO_Init+0xd4>)
 80003b4:	f002 fd2c 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003b8:	2302      	movs	r3, #2
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2300      	movs	r3, #0
 80003c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	4619      	mov	r1, r3
 80003ce:	480d      	ldr	r0, [pc, #52]	@ (8000404 <MX_GPIO_Init+0xd4>)
 80003d0:	f002 fb72 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003da:	2302      	movs	r3, #2
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80003e6:	2307      	movs	r3, #7
 80003e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_GPIO_Init+0xd8>)
 80003f2:	f002 fb61 	bl	8002ab8 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	@ 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800
 8000404:	40022000 	.word	0x40022000
 8000408:	40020000 	.word	0x40020000

0800040c <Delay>:

/* USER CODE BEGIN 0 */


void Delay(volatile int number)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
int j;
for(j = 0; j < number*4000; j++)
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	e002      	b.n	8000420 <Delay+0x14>
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	3301      	adds	r3, #1
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000426:	fb02 f303 	mul.w	r3, r2, r3
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	429a      	cmp	r2, r3
 800042e:	dbf4      	blt.n	800041a <Delay+0xe>
{}
}
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <udp_receive_callback>:
extern struct netif gnetif;
/*UDP Block*/
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{   char buffer[100];
 8000440:	b580      	push	{r7, lr}
 8000442:	b0a4      	sub	sp, #144	@ 0x90
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6859      	ldr	r1, [r3, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	895b      	ldrh	r3, [r3, #10]
 8000456:	461a      	mov	r2, r3
 8000458:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800045c:	4618      	mov	r0, r3
 800045e:	f00a fea0 	bl	800b1a2 <strncpy>
	CanTxMsgTypeDef TxMessage;
	hcan1.pTxMsg = &TxMessage;
 8000462:	4a2a      	ldr	r2, [pc, #168]	@ (800050c <udp_receive_callback+0xcc>)
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	6313      	str	r3, [r2, #48]	@ 0x30
	hcan1.pTxMsg->StdId = 0x10; // Standard ID
 800046a:	4b28      	ldr	r3, [pc, #160]	@ (800050c <udp_receive_callback+0xcc>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046e:	2210      	movs	r2, #16
 8000470:	601a      	str	r2, [r3, #0]
	hcan1.pTxMsg->IDE = CAN_ID_STD; // Standard frame
 8000472:	4b26      	ldr	r3, [pc, #152]	@ (800050c <udp_receive_callback+0xcc>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
	hcan1.pTxMsg->RTR = CAN_RTR_DATA; // Data frame
 800047a:	4b24      	ldr	r3, [pc, #144]	@ (800050c <udp_receive_callback+0xcc>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
	hcan1.pTxMsg->DLC = 1; // Data length
 8000482:	4b22      	ldr	r3, [pc, #136]	@ (800050c <udp_receive_callback+0xcc>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	611a      	str	r2, [r3, #16]
	if(buffer[0]=='o'){
 800048a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800048e:	2b6f      	cmp	r3, #111	@ 0x6f
 8000490:	d109      	bne.n	80004a6 <udp_receive_callback+0x66>
		hcan1.pTxMsg->Data[0] = 9;
 8000492:	4b1e      	ldr	r3, [pc, #120]	@ (800050c <udp_receive_callback+0xcc>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000496:	2209      	movs	r2, #9
 8000498:	751a      	strb	r2, [r3, #20]
		if (HAL_CAN_Transmit(&hcan1,1000) == HAL_OK) { // 10ms Timeout
 800049a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800049e:	481b      	ldr	r0, [pc, #108]	@ (800050c <udp_receive_callback+0xcc>)
 80004a0:	f000 fc24 	bl	8000cec <HAL_CAN_Transmit>
 80004a4:	e02b      	b.n	80004fe <udp_receive_callback+0xbe>
			Delay(1000);
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);*/
		}
	}
	else{
		hcan1.pTxMsg->Data[0] = 0;
 80004a6:	4b19      	ldr	r3, [pc, #100]	@ (800050c <udp_receive_callback+0xcc>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	2200      	movs	r2, #0
 80004ac:	751a      	strb	r2, [r3, #20]
		if (HAL_CAN_Transmit(&hcan1, 1000) == HAL_OK) { // 10ms Timeout
 80004ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004b2:	4816      	ldr	r0, [pc, #88]	@ (800050c <udp_receive_callback+0xcc>)
 80004b4:	f000 fc1a 	bl	8000cec <HAL_CAN_Transmit>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d11f      	bne.n	80004fe <udp_receive_callback+0xbe>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2102      	movs	r1, #2
 80004c2:	4813      	ldr	r0, [pc, #76]	@ (8000510 <udp_receive_callback+0xd0>)
 80004c4:	f002 fca4 	bl	8002e10 <HAL_GPIO_WritePin>
			Delay(1000);
 80004c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004cc:	f7ff ff9e 	bl	800040c <Delay>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2102      	movs	r1, #2
 80004d4:	480e      	ldr	r0, [pc, #56]	@ (8000510 <udp_receive_callback+0xd0>)
 80004d6:	f002 fc9b 	bl	8002e10 <HAL_GPIO_WritePin>
			Delay(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004de:	f7ff ff95 	bl	800040c <Delay>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2102      	movs	r1, #2
 80004e6:	480a      	ldr	r0, [pc, #40]	@ (8000510 <udp_receive_callback+0xd0>)
 80004e8:	f002 fc92 	bl	8002e10 <HAL_GPIO_WritePin>
			Delay(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f0:	f7ff ff8c 	bl	800040c <Delay>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	4805      	ldr	r0, [pc, #20]	@ (8000510 <udp_receive_callback+0xd0>)
 80004fa:	f002 fc89 	bl	8002e10 <HAL_GPIO_WritePin>
		}
	}
	/* Free receive pbuf */
	pbuf_free(p);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f004 fa8e 	bl	8004a20 <pbuf_free>
}
 8000504:	bf00      	nop
 8000506:	3790      	adds	r7, #144	@ 0x90
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000028 	.word	0x20000028
 8000510:	40022000 	.word	0x40022000

08000514 <udpServer_init>:

void udpServer_init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 800051a:	f008 fe79 	bl	8009210 <udp_new>
 800051e:	4603      	mov	r3, r0
 8000520:	60fb      	str	r3, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 10, 10, 0, 111);
 8000522:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <udpServer_init+0x84>)
 8000524:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2207      	movs	r2, #7
 800052a:	4619      	mov	r1, r3
 800052c:	68f8      	ldr	r0, [r7, #12]
 800052e:	f008 fdbb 	bl	80090a8 <udp_bind>
 8000532:	4603      	mov	r3, r0
 8000534:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000536:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d125      	bne.n	800058a <udpServer_init+0x76>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 800053e:	2200      	movs	r2, #0
 8000540:	4916      	ldr	r1, [pc, #88]	@ (800059c <udpServer_init+0x88>)
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f008 fe20 	bl	8009188 <udp_recv>
	   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2102      	movs	r1, #2
 800054c:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <udpServer_init+0x8c>)
 800054e:	f002 fc5f 	bl	8002e10 <HAL_GPIO_WritePin>
	   Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000556:	f7ff ff59 	bl	800040c <Delay>
	   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2102      	movs	r1, #2
 800055e:	4810      	ldr	r0, [pc, #64]	@ (80005a0 <udpServer_init+0x8c>)
 8000560:	f002 fc56 	bl	8002e10 <HAL_GPIO_WritePin>
	   Delay(1000);
 8000564:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000568:	f7ff ff50 	bl	800040c <Delay>
	   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2102      	movs	r1, #2
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <udpServer_init+0x8c>)
 8000572:	f002 fc4d 	bl	8002e10 <HAL_GPIO_WritePin>
	   Delay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057a:	f7ff ff47 	bl	800040c <Delay>
	   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2102      	movs	r1, #2
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <udpServer_init+0x8c>)
 8000584:	f002 fc44 	bl	8002e10 <HAL_GPIO_WritePin>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000588:	e002      	b.n	8000590 <udpServer_init+0x7c>
	   udp_remove(upcb);
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f008 fe0e 	bl	80091ac <udp_remove>
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	6f000a0a 	.word	0x6f000a0a
 800059c:	08000441 	.word	0x08000441
 80005a0:	40022000 	.word	0x40022000

080005a4 <main>:
/*End of UDP Blockss*/

/* USER CODE END 0 */

int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 f94a 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f812 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f7ff febe 	bl	8000330 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005b4:	f002 fff2 	bl	800359c <MX_LWIP_Init>
  MX_CAN1_Init();
 80005b8:	f7ff fe26 	bl	8000208 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 80005bc:	f7ff ffaa 	bl	8000514 <udpServer_init>
  HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <main+0x2c>)
 80005c4:	f000 fd4a 	bl	800105c <HAL_CAN_Receive_IT>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80005c8:	f003 f876 	bl	80036b8 <MX_LWIP_Process>
 80005cc:	e7fc      	b.n	80005c8 <main+0x24>
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028

080005d4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b34      	ldr	r3, [pc, #208]	@ (80006ac <SystemClock_Config+0xd8>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005de:	4a33      	ldr	r2, [pc, #204]	@ (80006ac <SystemClock_Config+0xd8>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e6:	4b31      	ldr	r3, [pc, #196]	@ (80006ac <SystemClock_Config+0xd8>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f2:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <SystemClock_Config+0xdc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fa:	4a2d      	ldr	r2, [pc, #180]	@ (80006b0 <SystemClock_Config+0xdc>)
 80005fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <SystemClock_Config+0xdc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000616:	2310      	movs	r3, #16
 8000618:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2300      	movs	r3, #0
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000622:	230a      	movs	r3, #10
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000626:	23d2      	movs	r3, #210	@ 0xd2
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fc04 	bl	8002e44 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d003      	beq.n	800064a <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000642:	21ea      	movs	r1, #234	@ 0xea
 8000644:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <SystemClock_Config+0xe0>)
 8000646:	f000 f849 	bl	80006dc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000656:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fe5b 	bl	8003324 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <SystemClock_Config+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000674:	21f8      	movs	r1, #248	@ 0xf8
 8000676:	480f      	ldr	r0, [pc, #60]	@ (80006b4 <SystemClock_Config+0xe0>)
 8000678:	f000 f830 	bl	80006dc <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800067c:	f002 ff82 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <SystemClock_Config+0xe4>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	099b      	lsrs	r3, r3, #6
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fa7b 	bl	8001b86 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000690:	2004      	movs	r0, #4
 8000692:	f001 fa85 	bl	8001ba0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	210f      	movs	r1, #15
 800069a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800069e:	f001 fa48 	bl	8001b32 <HAL_NVIC_SetPriority>
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000
 80006b4:	0800b258 	.word	0x0800b258
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <HAL_CAN_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *hcan) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    //if(hcan->pRxMsg->Data[0]!=1){
	//CanRxMsgTypeDef RxMessage;
	//hcan->pRxMsg = &RxMessage;
    	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2102      	movs	r1, #2
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <HAL_CAN_RxCpltCallback+0x1c>)
 80006ca:	f002 fba1 	bl	8002e10 <HAL_GPIO_WritePin>
    //}
    // Re-enable interrupt for the next messagsse

}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000

080006dc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <_Error_Handler+0xa>

080006ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ee:	2003      	movs	r0, #3
 80006f0:	f001 fa14 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	f06f 000b 	mvn.w	r0, #11
 80006fc:	f001 fa19 	bl	8001b32 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	f06f 000a 	mvn.w	r0, #10
 8000708:	f001 fa13 	bl	8001b32 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	f06f 0009 	mvn.w	r0, #9
 8000714:	f001 fa0d 	bl	8001b32 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	f06f 0004 	mvn.w	r0, #4
 8000720:	f001 fa07 	bl	8001b32 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	f06f 0003 	mvn.w	r0, #3
 800072c:	f001 fa01 	bl	8001b32 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	210f      	movs	r1, #15
 8000734:	f06f 0001 	mvn.w	r0, #1
 8000738:	f001 f9fb 	bl	8001b32 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000744:	f001 f9f5 	bl	8001b32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f8a8 	bl	80008a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000754:	f001 fa40 	bl	8001bd8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <CAN1_RX0_IRQHandler>:

/**
* @brief This function handles CAN1 RX0 interrupts.
*/
void CAN1_RX0_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <CAN1_RX0_IRQHandler+0x20>)
 8000762:	f000 fd37 	bl	80011d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  __HAL_UNLOCK(&hcan1);
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <CAN1_RX0_IRQHandler+0x20>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 800076e:	2100      	movs	r1, #0
 8000770:	4802      	ldr	r0, [pc, #8]	@ (800077c <CAN1_RX0_IRQHandler+0x20>)
 8000772:	f000 fc73 	bl	800105c <HAL_CAN_Receive_IT>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000028 	.word	0x20000028

08000780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <SystemInit+0x5c>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <SystemInit+0x5c>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x60>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <SystemInit+0x60>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <SystemInit+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x60>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <SystemInit+0x60>)
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <SystemInit+0x64>)
 80007ae:	4013      	ands	r3, r2
 80007b0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <SystemInit+0x60>)
 80007b4:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <SystemInit+0x68>)
 80007b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <SystemInit+0x60>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <SystemInit+0x60>)
 80007be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <SystemInit+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <SystemInit+0x5c>)
 80007cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007d0:	609a      	str	r2, [r3, #8]
#endif
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00
 80007e0:	40023800 	.word	0x40023800
 80007e4:	fef6ffff 	.word	0xfef6ffff
 80007e8:	24003010 	.word	0x24003010

080007ec <Reset_Handler>:
 80007ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000824 <LoopFillZerobss+0x14>
 80007f0:	2100      	movs	r1, #0
 80007f2:	e003      	b.n	80007fc <LoopCopyDataInit>

080007f4 <CopyDataInit>:
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <LoopFillZerobss+0x18>)
 80007f6:	585b      	ldr	r3, [r3, r1]
 80007f8:	5043      	str	r3, [r0, r1]
 80007fa:	3104      	adds	r1, #4

080007fc <LoopCopyDataInit>:
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <LoopFillZerobss+0x1c>)
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <LoopFillZerobss+0x20>)
 8000800:	1842      	adds	r2, r0, r1
 8000802:	429a      	cmp	r2, r3
 8000804:	d3f6      	bcc.n	80007f4 <CopyDataInit>
 8000806:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <LoopFillZerobss+0x24>)
 8000808:	e002      	b.n	8000810 <LoopFillZerobss>

0800080a <FillZerobss>:
 800080a:	2300      	movs	r3, #0
 800080c:	f842 3b04 	str.w	r3, [r2], #4

08000810 <LoopFillZerobss>:
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <LoopFillZerobss+0x28>)
 8000812:	429a      	cmp	r2, r3
 8000814:	d3f9      	bcc.n	800080a <FillZerobss>
 8000816:	f7ff ffb3 	bl	8000780 <SystemInit>
 800081a:	f00a fcd5 	bl	800b1c8 <__libc_init_array>
 800081e:	f7ff fec1 	bl	80005a4 <main>
 8000822:	4770      	bx	lr
 8000824:	20050000 	.word	0x20050000
 8000828:	0800b368 	.word	0x0800b368
 800082c:	20000000 	.word	0x20000000
 8000830:	2000000c 	.word	0x2000000c
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20006858 	.word	0x20006858

0800083c <ADC_IRQHandler>:
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <HAL_Init+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <HAL_Init+0x28>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800084e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f001 f963 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f808 	bl	800086c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800085c:	f7ff ff45 	bl	80006ea <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023c00 	.word	0x40023c00

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_InitTick+0x30>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <HAL_InitTick+0x34>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	099b      	lsrs	r3, r3, #6
 8000880:	4618      	mov	r0, r3
 8000882:	f001 f980 	bl	8001b86 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000886:	2200      	movs	r2, #0
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800088e:	f001 f950 	bl	8001b32 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	10624dd3 	.word	0x10624dd3

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick++;
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <HAL_IncTick+0x18>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a03      	ldr	r2, [pc, #12]	@ (80008bc <HAL_IncTick+0x18>)
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	2000006c 	.word	0x2000006c

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2000006c 	.word	0x2000006c

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80008e4:	f7ff ffec 	bl	80008c0 <HAL_GetTick>
 80008e8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80008ea:	bf00      	nop
 80008ec:	f7ff ffe8 	bl	80008c0 <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	1ad2      	subs	r2, r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d3f7      	bcc.n	80008ec <HAL_Delay+0x14>
  {
  }
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e113      	b.n	8000b48 <HAL_CAN_Init+0x242>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d106      	bne.n	800093a <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fcc3 	bl	80002c0 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2202      	movs	r2, #2
 800093e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 0202 	bic.w	r2, r2, #2
 8000950:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000962:	f7ff ffad 	bl	80008c0 <HAL_GetTick>
 8000966:	60b8      	str	r0, [r7, #8]

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000968:	e010      	b.n	800098c <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 800096a:	f7ff ffa9 	bl	80008c0 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b0a      	cmp	r3, #10
 8000976:	d909      	bls.n	800098c <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2203      	movs	r2, #3
 800097c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e0dd      	b.n	8000b48 <HAL_CAN_Init+0x242>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	2b01      	cmp	r3, #1
 8000998:	d1e7      	bne.n	800096a <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	f040 80be 	bne.w	8000b26 <HAL_CAN_Init+0x220>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d108      	bne.n	80009c4 <HAL_CAN_Init+0xbe>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e007      	b.n	80009d4 <HAL_CAN_Init+0xce>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009d2:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d108      	bne.n	80009ee <HAL_CAN_Init+0xe8>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e007      	b.n	80009fe <HAL_CAN_Init+0xf8>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009fc:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d108      	bne.n	8000a18 <HAL_CAN_Init+0x112>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f042 0220 	orr.w	r2, r2, #32
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e007      	b.n	8000a28 <HAL_CAN_Init+0x122>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f022 0220 	bic.w	r2, r2, #32
 8000a26:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <HAL_CAN_Init+0x13c>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0210 	orr.w	r2, r2, #16
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e007      	b.n	8000a52 <HAL_CAN_Init+0x14c>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 0210 	bic.w	r2, r2, #16
 8000a50:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d108      	bne.n	8000a6c <HAL_CAN_Init+0x166>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f042 0208 	orr.w	r2, r2, #8
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_CAN_Init+0x176>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0208 	bic.w	r2, r2, #8
 8000a7a:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d108      	bne.n	8000a96 <HAL_CAN_Init+0x190>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0204 	orr.w	r2, r2, #4
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e007      	b.n	8000aa6 <HAL_CAN_Init+0x1a0>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f022 0204 	bic.w	r2, r2, #4
 8000aa4:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689a      	ldr	r2, [r3, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000aae:	431a      	orrs	r2, r3
                ((uint32_t)hcan->Init.BS1) | \
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691b      	ldr	r3, [r3, #16]
                ((uint32_t)hcan->Init.SJW) | \
 8000ab4:	431a      	orrs	r2, r3
                ((uint32_t)hcan->Init.BS2) | \
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8000aba:	ea42 0103 	orr.w	r1, r2, r3
                ((uint32_t)hcan->Init.Prescaler - 1U);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	1e5a      	subs	r2, r3, #1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
                ((uint32_t)hcan->Init.BS2) | \
 8000ac8:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000aca:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0201 	bic.w	r2, r2, #1
 8000ada:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000adc:	f7ff fef0 	bl	80008c0 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]

    /* Wait the acknowledge */
    while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000ae2:	e010      	b.n	8000b06 <HAL_CAN_Init+0x200>
    {
      if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000ae4:	f7ff feec 	bl	80008c0 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d909      	bls.n	8000b06 <HAL_CAN_Init+0x200>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2203      	movs	r2, #3
 8000af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e020      	b.n	8000b48 <HAL_CAN_Init+0x242>
    while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d0e7      	beq.n	8000ae4 <HAL_CAN_Init+0x1de>
      }
    }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d001      	beq.n	8000b26 <HAL_CAN_Init+0x220>
    {
      InitStatus = CAN_INITSTATUS_SUCCESS;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d108      	bne.n	8000b3e <HAL_CAN_Init+0x238>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
    /* Return function status */
    return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e004      	b.n	8000b48 <HAL_CAN_Init+0x242>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2204      	movs	r2, #4
 8000b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
  }
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	2201      	movs	r2, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	60fb      	str	r3, [r7, #12]
  else
  {
    can_ip = CAN1;    
  }
#else
  can_ip = CAN1;
 8000b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ce8 <HAL_CAN_ConfigFilter+0x198>)
 8000b6c:	60bb      	str	r3, [r7, #8]
#endif

  /* Initialisation mode for the filter */
  can_ip->FMR |= (uint32_t)CAN_FMR_FINIT;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b74:	f043 0201 	orr.w	r2, r3, #1
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined (CAN2)  
  /* Select the start slave bank */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b84:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  can_ip->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8U);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#endif
     
  /* Filter Deactivation */
  can_ip->FA1R &= ~(uint32_t)filternbrbitpos;
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	401a      	ands	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d123      	bne.n	8000c04 <HAL_CAN_ConfigFilter+0xb4>
  {
    /* 16-bit scale for the filter */
    can_ip->FS1R &= ~(uint32_t)filternbrbitpos;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	b29b      	uxth	r3, r3
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bde:	4319      	orrs	r1, r3
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3248      	adds	r2, #72	@ 0x48
 8000be4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	b29a      	uxth	r2, r3
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bf8:	430a      	orrs	r2, r1
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	3348      	adds	r3, #72	@ 0x48
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	440b      	add	r3, r1
 8000c02:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d122      	bne.n	8000c52 <HAL_CAN_ConfigFilter+0x102>
  {
    /* 32-bit scale for the filter */
    can_ip->FS1R |= filternbrbitpos;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	431a      	orrs	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    
    /* 32-bit identifier or First 32-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	b29b      	uxth	r3, r3
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c2c:	4319      	orrs	r1, r3
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	3248      	adds	r2, #72	@ 0x48
 8000c32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	b29a      	uxth	r2, r3
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c46:	430a      	orrs	r2, r1
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	3348      	adds	r3, #72	@ 0x48
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d109      	bne.n	8000c6e <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    can_ip->FM1R &= ~(uint32_t)filternbrbitpos;
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	401a      	ands	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c6c:	e007      	b.n	8000c7e <HAL_CAN_ConfigFilter+0x12e>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	431a      	orrs	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <HAL_CAN_ConfigFilter+0x148>
  {
    /* FIFO 0 assignation for the filter */
    can_ip->FFA1R &= ~(uint32_t)filternbrbitpos;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	401a      	ands	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d107      	bne.n	8000cb0 <HAL_CAN_ConfigFilter+0x160>
  {
    /* FIFO 1 assignation for the filter */
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d107      	bne.n	8000cc8 <HAL_CAN_ConfigFilter+0x178>
  {
    can_ip->FA1R |= filternbrbitpos;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  }

  /* Leave the initialisation mode for the filter */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cce:	f023 0201 	bic.w	r2, r3, #1
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  
  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40006400 	.word	0x40006400

08000cec <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Specify Timeout value   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000d0c:	d010      	beq.n	8000d30 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000d1c:	d008      	beq.n	8000d30 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d2c:	f040 8187 	bne.w	800103e <HAL_CAN_Transmit+0x352>
  {  
    /* Process locked */
    __HAL_LOCK(hcan);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_CAN_Transmit+0x52>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e184      	b.n	8001048 <HAL_CAN_Transmit+0x35c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
    /* Change CAN state */
    switch(hcan->State)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b62      	cmp	r3, #98	@ 0x62
 8000d50:	d010      	beq.n	8000d74 <HAL_CAN_Transmit+0x88>
 8000d52:	2b62      	cmp	r3, #98	@ 0x62
 8000d54:	dc13      	bgt.n	8000d7e <HAL_CAN_Transmit+0x92>
 8000d56:	2b22      	cmp	r3, #34	@ 0x22
 8000d58:	d002      	beq.n	8000d60 <HAL_CAN_Transmit+0x74>
 8000d5a:	2b32      	cmp	r3, #50	@ 0x32
 8000d5c:	d005      	beq.n	8000d6a <HAL_CAN_Transmit+0x7e>
 8000d5e:	e00e      	b.n	8000d7e <HAL_CAN_Transmit+0x92>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2242      	movs	r2, #66	@ 0x42
 8000d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8000d68:	e00e      	b.n	8000d88 <HAL_CAN_Transmit+0x9c>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2252      	movs	r2, #82	@ 0x52
 8000d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8000d72:	e009      	b.n	8000d88 <HAL_CAN_Transmit+0x9c>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2272      	movs	r2, #114	@ 0x72
 8000d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8000d7c:	e004      	b.n	8000d88 <HAL_CAN_Transmit+0x9c>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2212      	movs	r2, #18
 8000d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8000d86:	bf00      	nop
    }
  
    /* Select one empty transmit mailbox */
    if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000d96:	d102      	bne.n	8000d9e <HAL_CAN_Transmit+0xb2>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e00c      	b.n	8000db8 <HAL_CAN_Transmit+0xcc>
    }
    else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000dac:	d102      	bne.n	8000db4 <HAL_CAN_Transmit+0xc8>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	e001      	b.n	8000db8 <HAL_CAN_Transmit+0xcc>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6811      	ldr	r1, [r2, #0]
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3318      	adds	r3, #24
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	440b      	add	r3, r1
 8000dd6:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d117      	bne.n	8000e12 <HAL_CAN_Transmit+0x126>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3318      	adds	r3, #24
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	4413      	add	r3, r2
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	0559      	lsls	r1, r3, #21
                                                  hcan->pTxMsg->RTR);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	6809      	ldr	r1, [r1, #0]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3318      	adds	r3, #24
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	440b      	add	r3, r1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e01a      	b.n	8000e48 <HAL_CAN_Transmit+0x15c>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3318      	adds	r3, #24
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	00d9      	lsls	r1, r3, #3
                                                  hcan->pTxMsg->IDE | \
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8000e2e:	4319      	orrs	r1, r3
                                                  hcan->pTxMsg->RTR);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	68db      	ldr	r3, [r3, #12]
                                                  hcan->pTxMsg->IDE | \
 8000e36:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	6809      	ldr	r1, [r1, #0]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3318      	adds	r3, #24
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	440b      	add	r3, r1
 8000e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f002 020f 	and.w	r2, r2, #15
 8000e56:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4413      	add	r3, r2
 8000e64:	3304      	adds	r3, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6811      	ldr	r1, [r2, #0]
 8000e6c:	f023 020f 	bic.w	r2, r3, #15
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3318      	adds	r3, #24
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	440b      	add	r3, r1
 8000e78:	3304      	adds	r3, #4
 8000e7a:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3318      	adds	r3, #24
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	3304      	adds	r3, #4
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	6809      	ldr	r1, [r1, #0]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	7ddb      	ldrb	r3, [r3, #23]
 8000eaa:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)hcan->pTxMsg->Data[2U] << 16U) |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	7d9b      	ldrb	r3, [r3, #22]
 8000eb2:	041b      	lsls	r3, r3, #16
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 8000eb4:	431a      	orrs	r2, r3
                                             ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) | 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	7d5b      	ldrb	r3, [r3, #21]
 8000ebc:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)hcan->pTxMsg->Data[2U] << 16U) |
 8000ebe:	4313      	orrs	r3, r2
                                             ((uint32_t)hcan->pTxMsg->Data[0U]));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000ec4:	7d12      	ldrb	r2, [r2, #20]
 8000ec6:	4610      	mov	r0, r2
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6811      	ldr	r1, [r2, #0]
                                             ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) | 
 8000ecc:	ea43 0200 	orr.w	r2, r3, r0
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000eda:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	7edb      	ldrb	r3, [r3, #27]
 8000ee2:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)hcan->pTxMsg->Data[6U] << 16U) |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	7e9b      	ldrb	r3, [r3, #26]
 8000eea:	041b      	lsls	r3, r3, #16
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8000eec:	431a      	orrs	r2, r3
                                             ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	7e5b      	ldrb	r3, [r3, #25]
 8000ef4:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)hcan->pTxMsg->Data[6U] << 16U) |
 8000ef6:	4313      	orrs	r3, r2
                                             ((uint32_t)hcan->pTxMsg->Data[4U]));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000efc:	7e12      	ldrb	r2, [r2, #24]
 8000efe:	4610      	mov	r0, r2
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6811      	ldr	r1, [r2, #0]
                                             ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 8000f04:	ea43 0200 	orr.w	r2, r3, r0
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	440b      	add	r3, r1
 8000f0e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f12:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3318      	adds	r3, #24
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	4413      	add	r3, r2
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6811      	ldr	r1, [r2, #0]
 8000f26:	f043 0201 	orr.w	r2, r3, #1
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	440b      	add	r3, r1
 8000f32:	601a      	str	r2, [r3, #0]
  
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f34:	f7ff fcc4 	bl	80008c0 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000f3a:	e02e      	b.n	8000f9a <HAL_CAN_Transmit+0x2ae>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f42:	d02a      	beq.n	8000f9a <HAL_CAN_Transmit+0x2ae>
      {
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <HAL_CAN_Transmit+0x26e>
 8000f4a:	f7ff fcb9 	bl	80008c0 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d21f      	bcs.n	8000f9a <HAL_CAN_Transmit+0x2ae>
       {
         hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <HAL_CAN_Transmit+0x286>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	e00d      	b.n	8000f8e <HAL_CAN_Transmit+0x2a2>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d105      	bne.n	8000f84 <HAL_CAN_Transmit+0x298>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f80:	6093      	str	r3, [r2, #8]
 8000f82:	e004      	b.n	8000f8e <HAL_CAN_Transmit+0x2a2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000f8c:	6093      	str	r3, [r2, #8]

         /* Process unlocked */
         __HAL_UNLOCK(hcan);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
         return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e056      	b.n	8001048 <HAL_CAN_Transmit+0x35c>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_CAN_Transmit+0x2cc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <HAL_CAN_Transmit+0x364>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <HAL_CAN_Transmit+0x364>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e019      	b.n	8000fec <HAL_CAN_Transmit+0x300>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_CAN_Transmit+0x2ea>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_CAN_Transmit+0x368>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <HAL_CAN_Transmit+0x368>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	e00a      	b.n	8000fec <HAL_CAN_Transmit+0x300>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <HAL_CAN_Transmit+0x36c>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <HAL_CAN_Transmit+0x36c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1a5      	bne.n	8000f3c <HAL_CAN_Transmit+0x250>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b72      	cmp	r3, #114	@ 0x72
 8000ffa:	d010      	beq.n	800101e <HAL_CAN_Transmit+0x332>
 8000ffc:	2b72      	cmp	r3, #114	@ 0x72
 8000ffe:	dc13      	bgt.n	8001028 <HAL_CAN_Transmit+0x33c>
 8001000:	2b42      	cmp	r3, #66	@ 0x42
 8001002:	d002      	beq.n	800100a <HAL_CAN_Transmit+0x31e>
 8001004:	2b52      	cmp	r3, #82	@ 0x52
 8001006:	d005      	beq.n	8001014 <HAL_CAN_Transmit+0x328>
 8001008:	e00e      	b.n	8001028 <HAL_CAN_Transmit+0x33c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2222      	movs	r2, #34	@ 0x22
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8001012:	e00e      	b.n	8001032 <HAL_CAN_Transmit+0x346>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2232      	movs	r2, #50	@ 0x32
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 800101c:	e009      	b.n	8001032 <HAL_CAN_Transmit+0x346>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2262      	movs	r2, #98	@ 0x62
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8001026:	e004      	b.n	8001032 <HAL_CAN_Transmit+0x346>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8001030:	bf00      	nop
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    
    /* Return function status */
    return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e004      	b.n	8001048 <HAL_CAN_Transmit+0x35c>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2204      	movs	r2, #4
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
  }
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	04000003 	.word	0x04000003
 8001054:	08000300 	.word	0x08000300
 8001058:	10030000 	.word	0x10030000

0800105c <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  /* Check if CAN state is not busy for RX FIFO0 */
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d119      	bne.n	80010a2 <HAL_CAN_Receive_IT+0x46>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b22      	cmp	r3, #34	@ 0x22
 8001078:	d011      	beq.n	800109e <HAL_CAN_Receive_IT+0x42>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001080:	b2db      	uxtb	r3, r3
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8001082:	2b42      	cmp	r3, #66	@ 0x42
 8001084:	d00b      	beq.n	800109e <HAL_CAN_Receive_IT+0x42>
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108c:	b2db      	uxtb	r3, r3
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800108e:	2b62      	cmp	r3, #98	@ 0x62
 8001090:	d005      	beq.n	800109e <HAL_CAN_Receive_IT+0x42>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001098:	b2db      	uxtb	r3, r3
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800109a:	2b72      	cmp	r3, #114	@ 0x72
 800109c:	d101      	bne.n	80010a2 <HAL_CAN_Receive_IT+0x46>
  {
    return HAL_BUSY;
 800109e:	2302      	movs	r3, #2
 80010a0:	e091      	b.n	80011c6 <HAL_CAN_Receive_IT+0x16a>
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d119      	bne.n	80010dc <HAL_CAN_Receive_IT+0x80>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b32      	cmp	r3, #50	@ 0x32
 80010b2:	d011      	beq.n	80010d8 <HAL_CAN_Receive_IT+0x7c>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ba:	b2db      	uxtb	r3, r3
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80010bc:	2b52      	cmp	r3, #82	@ 0x52
 80010be:	d00b      	beq.n	80010d8 <HAL_CAN_Receive_IT+0x7c>
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010c6:	b2db      	uxtb	r3, r3
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80010c8:	2b62      	cmp	r3, #98	@ 0x62
 80010ca:	d005      	beq.n	80010d8 <HAL_CAN_Receive_IT+0x7c>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d2:	b2db      	uxtb	r3, r3
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80010d4:	2b72      	cmp	r3, #114	@ 0x72
 80010d6:	d101      	bne.n	80010dc <HAL_CAN_Receive_IT+0x80>
  {
    return HAL_BUSY;
 80010d8:	2302      	movs	r3, #2
 80010da:	e074      	b.n	80011c6 <HAL_CAN_Receive_IT+0x16a>
  }

  /* Process locked */
  __HAL_LOCK(hcan);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_CAN_Receive_IT+0x8e>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e06d      	b.n	80011c6 <HAL_CAN_Receive_IT+0x16a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Change CAN state */
  if(FIFONumber == CAN_FIFO0)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d120      	bne.n	800113a <HAL_CAN_Receive_IT+0xde>
  {
    switch(hcan->State)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b52      	cmp	r3, #82	@ 0x52
 8001102:	d010      	beq.n	8001126 <HAL_CAN_Receive_IT+0xca>
 8001104:	2b52      	cmp	r3, #82	@ 0x52
 8001106:	dc13      	bgt.n	8001130 <HAL_CAN_Receive_IT+0xd4>
 8001108:	2b12      	cmp	r3, #18
 800110a:	d002      	beq.n	8001112 <HAL_CAN_Receive_IT+0xb6>
 800110c:	2b32      	cmp	r3, #50	@ 0x32
 800110e:	d005      	beq.n	800111c <HAL_CAN_Receive_IT+0xc0>
 8001110:	e00e      	b.n	8001130 <HAL_CAN_Receive_IT+0xd4>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2242      	movs	r2, #66	@ 0x42
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800111a:	e02f      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
      case(HAL_CAN_STATE_BUSY_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2262      	movs	r2, #98	@ 0x62
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001124:	e02a      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2272      	movs	r2, #114	@ 0x72
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800112e:	e025      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2222      	movs	r2, #34	@ 0x22
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001138:	e020      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b42      	cmp	r3, #66	@ 0x42
 8001144:	d010      	beq.n	8001168 <HAL_CAN_Receive_IT+0x10c>
 8001146:	2b42      	cmp	r3, #66	@ 0x42
 8001148:	dc13      	bgt.n	8001172 <HAL_CAN_Receive_IT+0x116>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d002      	beq.n	8001154 <HAL_CAN_Receive_IT+0xf8>
 800114e:	2b22      	cmp	r3, #34	@ 0x22
 8001150:	d005      	beq.n	800115e <HAL_CAN_Receive_IT+0x102>
 8001152:	e00e      	b.n	8001172 <HAL_CAN_Receive_IT+0x116>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2252      	movs	r2, #82	@ 0x52
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800115c:	e00e      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
      case(HAL_CAN_STATE_BUSY_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2262      	movs	r2, #98	@ 0x62
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001166:	e009      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2272      	movs	r2, #114	@ 0x72
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001170:	e004      	b.n	800117c <HAL_CAN_Receive_IT+0x120>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2232      	movs	r2, #50	@ 0x32
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800117a:	bf00      	nop
    }
  }
  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	641a      	str	r2, [r3, #64]	@ 0x40
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  /*  - Enable Transmit mailbox empty Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6959      	ldr	r1, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f648 7301 	movw	r3, #36609	@ 0x8f01
 8001190:	430b      	orrs	r3, r1
 8001192:	6153      	str	r3, [r2, #20]
                            CAN_IT_LEC |
                            CAN_IT_ERR |
                            CAN_IT_TME);

  /* Process unlocked */
   __HAL_UNLOCK(hcan);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if(FIFONumber == CAN_FIFO0)
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d108      	bne.n	80011b4 <HAL_CAN_Receive_IT+0x158>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 020a 	orr.w	r2, r2, #10
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	e007      	b.n	80011c4 <HAL_CAN_Receive_IT+0x168>
  }
  else
  {
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80011c2:	615a      	str	r2, [r3, #20]
  }

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  /* Check Overrun flag for FIFO0 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b08      	cmp	r3, #8
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	60fb      	str	r3, [r7, #12]
  if(tmp1 && tmp2)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <HAL_CAN_IRQHandler+0x60>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_CAN_IRQHandler+0x60>
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122a:	617b      	str	r3, [r7, #20]

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2210      	movs	r2, #16
 8001232:	60da      	str	r2, [r3, #12]
  }
  /* Check Overrun flag for FIFO1 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b10      	cmp	r3, #16
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001254:	2b40      	cmp	r3, #64	@ 0x40
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	60fb      	str	r3, [r7, #12]

  if(tmp1 && tmp2)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00a      	beq.n	800127c <HAL_CAN_IRQHandler+0xa8>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d007      	beq.n	800127c <HAL_CAN_IRQHandler+0xa8>
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001272:	617b      	str	r3, [r7, #20]

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2210      	movs	r2, #16
 800127a:	611a      	str	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d16e      	bne.n	8001368 <HAL_CAN_IRQHandler+0x194>
  {
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4b2c      	ldr	r3, [pc, #176]	@ (8001344 <HAL_CAN_IRQHandler+0x170>)
 8001292:	4013      	ands	r3, r2
 8001294:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <HAL_CAN_IRQHandler+0x170>)
 8001296:	4293      	cmp	r3, r2
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	613b      	str	r3, [r7, #16]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <HAL_CAN_IRQHandler+0x174>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	4a26      	ldr	r2, [pc, #152]	@ (8001348 <HAL_CAN_IRQHandler+0x174>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	60fb      	str	r3, [r7, #12]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <HAL_CAN_IRQHandler+0x178>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <HAL_CAN_IRQHandler+0x178>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	60bb      	str	r3, [r7, #8]
    if(tmp1 || tmp2 || tmp3)  
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_CAN_IRQHandler+0x110>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <HAL_CAN_IRQHandler+0x110>
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d041      	beq.n	8001368 <HAL_CAN_IRQHandler+0x194>
    {
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	bf0c      	ite	eq
 80012f2:	2301      	moveq	r3, #1
 80012f4:	2300      	movne	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	613b      	str	r3, [r7, #16]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001308:	bf0c      	ite	eq
 800130a:	2301      	moveq	r3, #1
 800130c:	2300      	movne	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	60fb      	str	r3, [r7, #12]
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	60bb      	str	r3, [r7, #8]
      /* Check Transmit success */
      if(tmp1 || tmp2 || tmp3)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_CAN_IRQHandler+0x168>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_CAN_IRQHandler+0x168>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <HAL_CAN_IRQHandler+0x17c>
      {
        /* Call transmit function */
        CAN_Transmit_IT(hcan);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f9a1 	bl	8001684 <CAN_Transmit_IT>
 8001342:	e009      	b.n	8001358 <HAL_CAN_IRQHandler+0x184>
 8001344:	04000003 	.word	0x04000003
 8001348:	08000300 	.word	0x08000300
 800134c:	10030000 	.word	0x10030000
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001356:	617b      	str	r3, [r7, #20]
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b6c      	ldr	r3, [pc, #432]	@ (8001514 <HAL_CAN_IRQHandler+0x340>)
 8001364:	430b      	orrs	r3, r1
 8001366:	6093      	str	r3, [r2, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }

  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b02      	cmp	r3, #2
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	60fb      	str	r3, [r7, #12]
  /* Check End of reception flag for FIFO0 */
  if((tmp1 != 0U) && tmp2)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x1cc>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x1cc>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8001398:	2100      	movs	r1, #0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f9b5 	bl	800170a <CAN_Receive_IT>
  }

  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	60fb      	str	r3, [r7, #12]
  /* Check End of reception flag for FIFO1 */
  if((tmp1 != 0U) && tmp2)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x204>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x204>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 80013d0:	2101      	movs	r1, #1
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f999 	bl	800170a <CAN_Receive_IT>
  }

  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40

  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	bf0c      	ite	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	2300      	movne	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001408:	bf0c      	ite	eq
 800140a:	2301      	moveq	r3, #1
 800140c:	2300      	movne	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800141c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001420:	bf0c      	ite	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	2300      	movne	r3, #0
 8001426:	b2db      	uxtb	r3, r3
 8001428:	60bb      	str	r3, [r7, #8]
  /* Check Error Warning Flag */
  if(tmp1 && tmp2 && tmp3)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <HAL_CAN_IRQHandler+0x274>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <HAL_CAN_IRQHandler+0x274>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_CAN_IRQHandler+0x274>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b02      	cmp	r3, #2
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	60bb      	str	r3, [r7, #8]
  /* Check Error Passive Flag */
  if(tmp1 && tmp2 && tmp3)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_CAN_IRQHandler+0x2d8>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d008      	beq.n	80014ac <HAL_CAN_IRQHandler+0x2d8>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_CAN_IRQHandler+0x2d8>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	f043 0202 	orr.w	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf0c      	ite	eq
 80014ba:	2301      	moveq	r3, #1
 80014bc:	2300      	movne	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	60bb      	str	r3, [r7, #8]
  /* Check Bus-Off Flag */
  if(tmp1 && tmp2 && tmp3)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00f      	beq.n	8001518 <HAL_CAN_IRQHandler+0x344>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <HAL_CAN_IRQHandler+0x344>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <HAL_CAN_IRQHandler+0x344>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f043 0204 	orr.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001510:	e002      	b.n	8001518 <HAL_CAN_IRQHandler+0x344>
 8001512:	bf00      	nop
 8001514:	00010519 	.word	0x00010519
  }
  
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	613b      	str	r3, [r7, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	60fb      	str	r3, [r7, #12]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	60bb      	str	r3, [r7, #8]
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d15d      	bne.n	8001620 <HAL_CAN_IRQHandler+0x44c>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d05a      	beq.n	8001620 <HAL_CAN_IRQHandler+0x44c>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d057      	beq.n	8001620 <HAL_CAN_IRQHandler+0x44c>
  {
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800157a:	613b      	str	r3, [r7, #16]
    switch(tmp1)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b60      	cmp	r3, #96	@ 0x60
 8001580:	d03e      	beq.n	8001600 <HAL_CAN_IRQHandler+0x42c>
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	2b60      	cmp	r3, #96	@ 0x60
 8001586:	d842      	bhi.n	800160e <HAL_CAN_IRQHandler+0x43a>
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b50      	cmp	r3, #80	@ 0x50
 800158c:	d031      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x41e>
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b50      	cmp	r3, #80	@ 0x50
 8001592:	d83c      	bhi.n	800160e <HAL_CAN_IRQHandler+0x43a>
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b40      	cmp	r3, #64	@ 0x40
 8001598:	d024      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x410>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b40      	cmp	r3, #64	@ 0x40
 800159e:	d836      	bhi.n	800160e <HAL_CAN_IRQHandler+0x43a>
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b30      	cmp	r3, #48	@ 0x30
 80015a4:	d017      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x402>
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b30      	cmp	r3, #48	@ 0x30
 80015aa:	d830      	bhi.n	800160e <HAL_CAN_IRQHandler+0x43a>
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d003      	beq.n	80015ba <HAL_CAN_IRQHandler+0x3e6>
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	d007      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x3f4>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 80015b8:	e029      	b.n	800160e <HAL_CAN_IRQHandler+0x43a>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f043 0208 	orr.w	r2, r3, #8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80015c6:	e023      	b.n	8001610 <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f043 0210 	orr.w	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80015d4:	e01c      	b.n	8001610 <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80015e2:	e015      	b.n	8001610 <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80015f0:	e00e      	b.n	8001610 <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80015fe:	e007      	b.n	8001610 <HAL_CAN_IRQHandler+0x43c>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 800160c:	e000      	b.n	8001610 <HAL_CAN_IRQHandler+0x43c>
          break;
 800160e:	bf00      	nop
    }

    /* Clear Last error code Flag */ 
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800161e:	619a      	str	r2, [r3, #24]
  }
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d012      	beq.n	800164e <HAL_CAN_IRQHandler+0x47a>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2204      	movs	r2, #4
 800162e:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6959      	ldr	r1, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HAL_CAN_IRQHandler+0x484>)
 8001644:	400b      	ands	r3, r1
 8001646:	6153      	str	r3, [r2, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME);

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f811 	bl	8001670 <HAL_CAN_ErrorCallback>
  }  
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	ffff70a4 	.word	0xffff70a4

0800165c <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b12      	cmp	r3, #18
 80016a6:	d107      	bne.n	80016b8 <CAN_Transmit_IT+0x34>
  {   
    /* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 420f 	bic.w	r2, r2, #36608	@ 0x8f00
 80016b6:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  switch(hcan->State)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b72      	cmp	r3, #114	@ 0x72
 80016c2:	d010      	beq.n	80016e6 <CAN_Transmit_IT+0x62>
 80016c4:	2b72      	cmp	r3, #114	@ 0x72
 80016c6:	dc13      	bgt.n	80016f0 <CAN_Transmit_IT+0x6c>
 80016c8:	2b42      	cmp	r3, #66	@ 0x42
 80016ca:	d002      	beq.n	80016d2 <CAN_Transmit_IT+0x4e>
 80016cc:	2b52      	cmp	r3, #82	@ 0x52
 80016ce:	d005      	beq.n	80016dc <CAN_Transmit_IT+0x58>
 80016d0:	e00e      	b.n	80016f0 <CAN_Transmit_IT+0x6c>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2222      	movs	r2, #34	@ 0x22
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 80016da:	e00e      	b.n	80016fa <CAN_Transmit_IT+0x76>
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2232      	movs	r2, #50	@ 0x32
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 80016e4:	e009      	b.n	80016fa <CAN_Transmit_IT+0x76>
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2262      	movs	r2, #98	@ 0x62
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 80016ee:	e004      	b.n	80016fa <CAN_Transmit_IT+0x76>
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      break;
 80016f8:	bf00      	nop
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffae 	bl	800165c <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp1 = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  CanRxMsgTypeDef* pRxMsg = NULL;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <CAN_Receive_IT+0x22>
  {
    pRxMsg = hcan->pRxMsg;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e002      	b.n	8001732 <CAN_Receive_IT+0x28>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001730:	60fb      	str	r3, [r7, #12]
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	331b      	adds	r3, #27
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0204 	and.w	r2, r3, #4
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10c      	bne.n	800176a <CAN_Receive_IT+0x60>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	331b      	adds	r3, #27
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e00b      	b.n	8001782 <CAN_Receive_IT+0x78>
  }
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	331b      	adds	r3, #27
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
  }
  
  pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	331b      	adds	r3, #27
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0202 	and.w	r2, r3, #2
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	331b      	adds	r3, #27
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4413      	add	r3, r2
 80017a4:	3304      	adds	r3, #4
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 020f 	and.w	r2, r3, #15
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	621a      	str	r2, [r3, #32]
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	331b      	adds	r3, #27
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	3304      	adds	r3, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	b2da      	uxtb	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0e1b      	lsrs	r3, r3, #24
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b2da      	uxtb	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	4413      	add	r3, r2
 8001864:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0e1b      	lsrs	r3, r3, #24
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10c      	bne.n	80018aa <CAN_Receive_IT+0x1a0>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2220      	movs	r2, #32
 8001896:	60da      	str	r2, [r3, #12]

    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020a 	bic.w	r2, r2, #10
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	e00b      	b.n	80018c2 <CAN_Receive_IT+0x1b8>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2220      	movs	r2, #32
 80018b0:	611a      	str	r2, [r3, #16]

    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0250 	bic.w	r2, r2, #80	@ 0x50
 80018c0:	615a      	str	r2, [r3, #20]
  }

  tmp1 = hcan->State;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	60bb      	str	r3, [r7, #8]
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b22      	cmp	r3, #34	@ 0x22
 80018d0:	d002      	beq.n	80018d8 <CAN_Receive_IT+0x1ce>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b32      	cmp	r3, #50	@ 0x32
 80018d6:	d107      	bne.n	80018e8 <CAN_Receive_IT+0x1de>
  {   
    /* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 420f 	bic.w	r2, r2, #36608	@ 0x8f00
 80018e6:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d120      	bne.n	8001930 <CAN_Receive_IT+0x226>
  {
    switch(hcan->State)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b72      	cmp	r3, #114	@ 0x72
 80018f8:	d010      	beq.n	800191c <CAN_Receive_IT+0x212>
 80018fa:	2b72      	cmp	r3, #114	@ 0x72
 80018fc:	dc13      	bgt.n	8001926 <CAN_Receive_IT+0x21c>
 80018fe:	2b42      	cmp	r3, #66	@ 0x42
 8001900:	d002      	beq.n	8001908 <CAN_Receive_IT+0x1fe>
 8001902:	2b62      	cmp	r3, #98	@ 0x62
 8001904:	d005      	beq.n	8001912 <CAN_Receive_IT+0x208>
 8001906:	e00e      	b.n	8001926 <CAN_Receive_IT+0x21c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2212      	movs	r2, #18
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001910:	e02f      	b.n	8001972 <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2232      	movs	r2, #50	@ 0x32
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800191a:	e02a      	b.n	8001972 <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2252      	movs	r2, #82	@ 0x52
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001924:	e025      	b.n	8001972 <CAN_Receive_IT+0x268>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800192e:	e020      	b.n	8001972 <CAN_Receive_IT+0x268>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b72      	cmp	r3, #114	@ 0x72
 800193a:	d010      	beq.n	800195e <CAN_Receive_IT+0x254>
 800193c:	2b72      	cmp	r3, #114	@ 0x72
 800193e:	dc13      	bgt.n	8001968 <CAN_Receive_IT+0x25e>
 8001940:	2b52      	cmp	r3, #82	@ 0x52
 8001942:	d002      	beq.n	800194a <CAN_Receive_IT+0x240>
 8001944:	2b62      	cmp	r3, #98	@ 0x62
 8001946:	d005      	beq.n	8001954 <CAN_Receive_IT+0x24a>
 8001948:	e00e      	b.n	8001968 <CAN_Receive_IT+0x25e>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2212      	movs	r2, #18
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001952:	e00e      	b.n	8001972 <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2222      	movs	r2, #34	@ 0x22
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 800195c:	e009      	b.n	8001972 <CAN_Receive_IT+0x268>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2242      	movs	r2, #66	@ 0x42
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001966:	e004      	b.n	8001972 <CAN_Receive_IT+0x268>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        break;
 8001970:	bf00      	nop
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fea2 	bl	80006bc <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <NVIC_SetPriorityGrouping+0x40>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <NVIC_SetPriorityGrouping+0x44>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <NVIC_SetPriorityGrouping+0x40>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	05fa0000 	.word	0x05fa0000

080019cc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	@ (8001a18 <NVIC_EnableIRQ+0x30>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da0b      	bge.n	8001a48 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <NVIC_SetPriority+0x4c>)
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	3b04      	subs	r3, #4
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a46:	e009      	b.n	8001a5c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <NVIC_SetPriority+0x50>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	@ 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff2d 	bl	8001984 <NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff42 	bl	80019cc <NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff35 	bl	80019e8 <NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d106      	bne.n	8001bbc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a08      	ldr	r2, [pc, #32]	@ (8001bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001bba:	e005      	b.n	8001bc8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001bdc:	f000 f802 	bl	8001be4 <HAL_SYSTICK_Callback>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001c04:	4ba0      	ldr	r3, [pc, #640]	@ (8001e88 <HAL_ETH_Init+0x294>)
 8001c06:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e180      	b.n	8001f1c <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f001 fd4e 	bl	80036d0 <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c34:	4b95      	ldr	r3, [pc, #596]	@ (8001e8c <HAL_ETH_Init+0x298>)
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	4a94      	ldr	r2, [pc, #592]	@ (8001e8c <HAL_ETH_Init+0x298>)
 8001c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c40:	4b92      	ldr	r3, [pc, #584]	@ (8001e8c <HAL_ETH_Init+0x298>)
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c4c:	4b90      	ldr	r3, [pc, #576]	@ (8001e90 <HAL_ETH_Init+0x29c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a8f      	ldr	r2, [pc, #572]	@ (8001e90 <HAL_ETH_Init+0x29c>)
 8001c52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c56:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c58:	4b8d      	ldr	r3, [pc, #564]	@ (8001e90 <HAL_ETH_Init+0x29c>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	498b      	ldr	r1, [pc, #556]	@ (8001e90 <HAL_ETH_Init+0x29c>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c7c:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7e:	f7fe fe1f 	bl	80008c0 <HAL_GetTick>
 8001c82:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c84:	e011      	b.n	8001caa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001c86:	f7fe fe1b 	bl	80008c0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c94:	d909      	bls.n	8001caa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e138      	b.n	8001f1c <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e4      	bne.n	8001c86 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f023 031c 	bic.w	r3, r3, #28
 8001cca:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ccc:	f001 fc5a 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 8001cd0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8001e94 <HAL_ETH_Init+0x2a0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d908      	bls.n	8001cec <HAL_ETH_Init+0xf8>
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e98 <HAL_ETH_Init+0x2a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d804      	bhi.n	8001cec <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e027      	b.n	8001d3c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4a6a      	ldr	r2, [pc, #424]	@ (8001e98 <HAL_ETH_Init+0x2a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d908      	bls.n	8001d06 <HAL_ETH_Init+0x112>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	4a64      	ldr	r2, [pc, #400]	@ (8001e88 <HAL_ETH_Init+0x294>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d204      	bcs.n	8001d06 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f043 030c 	orr.w	r3, r3, #12
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	e01a      	b.n	8001d3c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4a5f      	ldr	r2, [pc, #380]	@ (8001e88 <HAL_ETH_Init+0x294>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d303      	bcc.n	8001d16 <HAL_ETH_Init+0x122>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4a62      	ldr	r2, [pc, #392]	@ (8001e9c <HAL_ETH_Init+0x2a8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d911      	bls.n	8001d3a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4a60      	ldr	r2, [pc, #384]	@ (8001e9c <HAL_ETH_Init+0x2a8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d908      	bls.n	8001d30 <HAL_ETH_Init+0x13c>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea0 <HAL_ETH_Init+0x2ac>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d804      	bhi.n	8001d30 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e005      	b.n	8001d3c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	e000      	b.n	8001d3c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d3a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fb94 	bl	8002478 <HAL_ETH_WritePHYRegister>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d5a:	6939      	ldr	r1, [r7, #16]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fc21 	bl	80025a4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0d6      	b.n	8001f1c <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d6e:	20ff      	movs	r0, #255	@ 0xff
 8001d70:	f7fe fdb2 	bl	80008d8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a4 	beq.w	8001ec6 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe fd9f 	bl	80008c0 <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fb0b 	bl	80023a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001d92:	f7fe fd95 	bl	80008c0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d90f      	bls.n	8001dc4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001da8:	6939      	ldr	r1, [r7, #16]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fbfa 	bl	80025a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0ab      	b.n	8001f1c <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0da      	beq.n	8001d84 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001dce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb4f 	bl	8002478 <HAL_ETH_WritePHYRegister>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001de4:	6939      	ldr	r1, [r7, #16]
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fbdc 	bl	80025a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001df4:	2301      	movs	r3, #1
 8001df6:	e091      	b.n	8001f1c <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fd62 	bl	80008c0 <HAL_GetTick>
 8001dfc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	461a      	mov	r2, r3
 8001e04:	2101      	movs	r1, #1
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 face 	bl	80023a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001e0c:	f7fe fd58 	bl	80008c0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d90f      	bls.n	8001e3e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e22:	6939      	ldr	r1, [r7, #16]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fbbd 	bl	80025a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e06e      	b.n	8001f1c <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0da      	beq.n	8001dfe <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2110      	movs	r1, #16
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 faa9 	bl	80023a8 <HAL_ETH_ReadPHYRegister>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00b      	beq.n	8001e74 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fb9e 	bl	80025a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e70:	2301      	movs	r3, #1
 8001e72:	e053      	b.n	8001f1c <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	e010      	b.n	8001eaa <HAL_ETH_Init+0x2b6>
 8001e88:	03938700 	.word	0x03938700
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	01312cff 	.word	0x01312cff
 8001e98:	02160ebf 	.word	0x02160ebf
 8001e9c:	05f5e0ff 	.word	0x05f5e0ff
 8001ea0:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	e026      	b.n	8001f0a <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e021      	b.n	8001f0a <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	08db      	lsrs	r3, r3, #3
 8001ecc:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	2100      	movs	r1, #0
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 faca 	bl	8002478 <HAL_ETH_WritePHYRegister>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001eee:	6939      	ldr	r1, [r7, #16]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb57 	bl	80025a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00c      	b.n	8001f1c <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001f02:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001f06:	f7fe fce7 	bl	80008d8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001f0a:	6939      	ldr	r1, [r7, #16]
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fb49 	bl	80025a4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ETH_DMATxDescListInit+0x20>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e051      	b.n	8001fe8 <HAL_ETH_DMATxDescListInit+0xc4>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e030      	b.n	8001fc2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	015b      	lsls	r3, r3, #5
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	4413      	add	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f70:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d208      	bcs.n	8001fb6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	e002      	b.n	8001fbc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3ca      	bcc.n	8001f60 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fd4:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ETH_DMARxDescListInit+0x20>
 8002010:	2302      	movs	r3, #2
 8002012:	e055      	b.n	80020c0 <HAL_ETH_DMARxDescListInit+0xcc>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e034      	b.n	800209a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	015b      	lsls	r3, r3, #5
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002048:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	461a      	mov	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	d208      	bcs.n	800208e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4413      	add	r3, r2
 8002086:	461a      	mov	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	e002      	b.n	8002094 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3c6      	bcc.n	8002030 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ac:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ETH_TransmitFrame+0x24>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0cc      	b.n	800228a <HAL_ETH_TransmitFrame+0x1be>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 8002116:	2301      	movs	r3, #1
 8002118:	e0b7      	b.n	800228a <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da09      	bge.n	8002138 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2212      	movs	r2, #18
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0a8      	b.n	800228a <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800213e:	4293      	cmp	r3, r2
 8002140:	d915      	bls.n	800216e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	4a54      	ldr	r2, [pc, #336]	@ (8002298 <HAL_ETH_TransmitFrame+0x1cc>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4b51      	ldr	r3, [pc, #324]	@ (8002298 <HAL_ETH_TransmitFrame+0x1cc>)
 8002152:	fba3 1302 	umull	r1, r3, r3, r2
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e001      	b.n	8002172 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d11c      	bne.n	80021b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8002186:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002192:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80021a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021b0:	e04b      	b.n	800224a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	e044      	b.n	8002242 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80021e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d116      	bne.n	8002220 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002200:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4a25      	ldr	r2, [pc, #148]	@ (800229c <HAL_ETH_TransmitFrame+0x1d0>)
 8002206:	fb03 f202 	mul.w	r2, r3, r2
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8002212:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800221e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800222e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	461a      	mov	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	3301      	adds	r3, #1
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3b6      	bcc.n	80021b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002264:	461a      	mov	r2, r3
 8002266:	2304      	movs	r3, #4
 8002268:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002272:	461a      	mov	r2, r3
 8002274:	2300      	movs	r3, #0
 8002276:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	ac02b00b 	.word	0xac02b00b
 800229c:	fffffa0c 	.word	0xfffffa0c

080022a0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ETH_GetReceivedFrame+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e070      	b.n	800239c <HAL_ETH_GetReceivedFrame+0xfc>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db5a      	blt.n	800238a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d030      	beq.n	8002344 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d103      	bne.n	80022fc <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002310:	3b04      	subs	r3, #4
 8002312:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
      
      /* Return function status */
      return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e02b      	b.n	800239c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28
 8002372:	e00a      	b.n	800238a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	629a      	str	r2, [r3, #40]	@ 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	460b      	mov	r3, r1
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b82      	cmp	r3, #130	@ 0x82
 80023c8:	d101      	bne.n	80023ce <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	e050      	b.n	8002470 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2282      	movs	r2, #130	@ 0x82
 80023d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 031c 	and.w	r3, r3, #28
 80023e4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8a1b      	ldrh	r3, [r3, #16]
 80023ea:	02db      	lsls	r3, r3, #11
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80023f4:	897b      	ldrh	r3, [r7, #10]
 80023f6:	019b      	lsls	r3, r3, #6
 80023f8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f023 0302 	bic.w	r3, r3, #2
 8002408:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800241a:	f7fe fa51 	bl	80008c0 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002420:	e015      	b.n	800244e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002422:	f7fe fa4d 	bl	80008c0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002430:	d309      	bcc.n	8002446 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e014      	b.n	8002470 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e4      	bne.n	8002422 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	460b      	mov	r3, r1
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b42      	cmp	r3, #66	@ 0x42
 8002498:	d101      	bne.n	800249e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	e04e      	b.n	800253c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2242      	movs	r2, #66	@ 0x42
 80024a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 031c 	and.w	r3, r3, #28
 80024b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8a1b      	ldrh	r3, [r3, #16]
 80024ba:	02db      	lsls	r3, r3, #11
 80024bc:	b29b      	uxth	r3, r3
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80024c4:	897b      	ldrh	r3, [r7, #10]
 80024c6:	019b      	lsls	r3, r3, #6
 80024c8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80024f4:	f7fe f9e4 	bl	80008c0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024fa:	e015      	b.n	8002528 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80024fc:	f7fe f9e0 	bl	80008c0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250a:	d309      	bcc.n	8002520 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e00d      	b.n	800253c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e4      	bne.n	80024fc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ETH_Start+0x16>
 8002556:	2302      	movs	r3, #2
 8002558:	e01f      	b.n	800259a <HAL_ETH_Start+0x56>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa18 	bl	80029a0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa32 	bl	80029da <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa78 	bl	8002a6c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fa49 	bl	8002a14 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fa5c 	bl	8002a40 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0b0      	sub	sp, #192	@ 0xc0
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025c0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80025d2:	2300      	movs	r3, #0
 80025d4:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80025ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80025f0:	e001      	b.n	80025f6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80025f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025fa:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002600:	2300      	movs	r3, #0
 8002602:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002610:	2340      	movs	r3, #64	@ 0x40
 8002612:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800267c:	4ba9      	ldr	r3, [pc, #676]	@ (8002924 <ETH_MACDMAConfig+0x380>)
 800267e:	4013      	ands	r3, r2
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 8002686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002688:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800268a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 800268c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800268e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 8002690:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002696:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 800269a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800269c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 800269e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80026a4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80026a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 80026a8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80026aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 80026ac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80026ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 80026b0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80026b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80026b4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80026b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 80026b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80026ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80026cc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe f8fd 	bl	80008d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80026e6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 80026ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026ec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80026ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 80026f0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80026f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 80026f6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80026f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 80026fc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80026fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8002702:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8002708:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800270c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002714:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002716:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe f8d8 	bl	80008d8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002730:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800273a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002744:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002750:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002754:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002758:	4013      	ands	r3, r2
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800275e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002762:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002768:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800276a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 800276e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002774:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 800277a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800277c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002780:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002782:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002794:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7fe f899 	bl	80008d8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80027ae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 80027b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe f884 	bl	80008d8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80027d8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80027de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027e2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80027e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027ec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80027fe:	2304      	movs	r3, #4
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800280e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002818:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800281e:	2300      	movs	r3, #0
 8002820:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002822:	2300      	movs	r3, #0
 8002824:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002838:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <ETH_MACDMAConfig+0x384>)
 800283a:	4013      	ands	r3, r2
 800283c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002840:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002842:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002844:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002846:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002848:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800284a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800284c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800284e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002850:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002852:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002854:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002856:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002858:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800285c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800285e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8002860:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002874:	461a      	mov	r2, r3
 8002876:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800287a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f7fe f824 	bl	80008d8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002898:	461a      	mov	r2, r3
 800289a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800289e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 80028a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028a4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 80028a8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028ac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80028ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 80028b0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80028b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80028b6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80028b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80028ba:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028c8:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d8:	2001      	movs	r0, #1
 80028da:	f7fd fffd 	bl	80008d8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e6:	461a      	mov	r2, r3
 80028e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028ec:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10b      	bne.n	800290e <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <ETH_MACDMAConfig+0x388>)
 8002906:	430b      	orrs	r3, r1
 8002908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800290c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	461a      	mov	r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f80a 	bl	8002930 <ETH_MACAddressConfig>
}
 800291c:	bf00      	nop
 800291e:	37c0      	adds	r7, #192	@ 0xc0
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	ff20810f 	.word	0xff20810f
 8002928:	f8de3f23 	.word	0xf8de3f23
 800292c:	00010040 	.word	0x00010040

08002930 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3305      	adds	r3, #5
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	3204      	adds	r2, #4
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <ETH_MACAddressConfig+0x68>)
 8002952:	4413      	add	r3, r2
 8002954:	461a      	mov	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3303      	adds	r3, #3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	061a      	lsls	r2, r3, #24
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3302      	adds	r3, #2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3301      	adds	r3, #1
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	4313      	orrs	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <ETH_MACAddressConfig+0x6c>)
 8002982:	4413      	add	r3, r2
 8002984:	461a      	mov	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	6013      	str	r3, [r2, #0]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40028040 	.word	0x40028040
 800299c:	40028044 	.word	0x40028044

080029a0 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c4:	2001      	movs	r0, #1
 80029c6:	f7fd ff87 	bl	80008d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0204 	orr.w	r2, r2, #4
 80029f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7fd ff6a 	bl	80008d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a32:	6193      	str	r3, [r2, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a5e:	6193      	str	r3, [r2, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a8e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7fd ff1b 	bl	80008d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002aac:	6193      	str	r3, [r2, #24]
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e175      	b.n	8002dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 8164 	bne.w	8002dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x4e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b12      	cmp	r3, #18
 8002b04:	d123      	bne.n	8002b4e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	69b9      	ldr	r1, [r7, #24]
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d00b      	beq.n	8002ba2 <HAL_GPIO_Init+0xea>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b96:	2b11      	cmp	r3, #17
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b12      	cmp	r3, #18
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80be 	beq.w	8002dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	4b66      	ldr	r3, [pc, #408]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	4a65      	ldr	r2, [pc, #404]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4e:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_GPIO_Init+0x324>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c5a:	4a61      	ldr	r2, [pc, #388]	@ (8002de0 <HAL_GPIO_Init+0x328>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a58      	ldr	r2, [pc, #352]	@ (8002de4 <HAL_GPIO_Init+0x32c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d037      	beq.n	8002cf6 <HAL_GPIO_Init+0x23e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a57      	ldr	r2, [pc, #348]	@ (8002de8 <HAL_GPIO_Init+0x330>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d031      	beq.n	8002cf2 <HAL_GPIO_Init+0x23a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a56      	ldr	r2, [pc, #344]	@ (8002dec <HAL_GPIO_Init+0x334>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02b      	beq.n	8002cee <HAL_GPIO_Init+0x236>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a55      	ldr	r2, [pc, #340]	@ (8002df0 <HAL_GPIO_Init+0x338>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d025      	beq.n	8002cea <HAL_GPIO_Init+0x232>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a54      	ldr	r2, [pc, #336]	@ (8002df4 <HAL_GPIO_Init+0x33c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01f      	beq.n	8002ce6 <HAL_GPIO_Init+0x22e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a53      	ldr	r2, [pc, #332]	@ (8002df8 <HAL_GPIO_Init+0x340>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d019      	beq.n	8002ce2 <HAL_GPIO_Init+0x22a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	@ (8002dfc <HAL_GPIO_Init+0x344>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_GPIO_Init+0x226>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	@ (8002e00 <HAL_GPIO_Init+0x348>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00d      	beq.n	8002cda <HAL_GPIO_Init+0x222>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a50      	ldr	r2, [pc, #320]	@ (8002e04 <HAL_GPIO_Init+0x34c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <HAL_GPIO_Init+0x21e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e08 <HAL_GPIO_Init+0x350>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002cce:	2309      	movs	r3, #9
 8002cd0:	e012      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	e010      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e00e      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cde:	2306      	movs	r3, #6
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x240>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	@ (8002de0 <HAL_GPIO_Init+0x328>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d16:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3a:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d40:	4b32      	ldr	r3, [pc, #200]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d64:	4a29      	ldr	r2, [pc, #164]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b28      	ldr	r3, [pc, #160]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a14      	ldr	r2, [pc, #80]	@ (8002e0c <HAL_GPIO_Init+0x354>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f ae86 	bls.w	8002ad8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	@ 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40021c00 	.word	0x40021c00
 8002e04:	40022000 	.word	0x40022000
 8002e08:	40022400 	.word	0x40022400
 8002e0c:	40013c00 	.word	0x40013c00

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e25c      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8087 	beq.w	8002f76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e68:	4b96      	ldr	r3, [pc, #600]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d00c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e74:	4b93      	ldr	r3, [pc, #588]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d112      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62>
 8002e80:	4b90      	ldr	r3, [pc, #576]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x130>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d168      	bne.n	8002f74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e236      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x7a>
 8002eb0:	4b84      	ldr	r3, [pc, #528]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a83      	ldr	r2, [pc, #524]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e02e      	b.n	8002f1c <HAL_RCC_OscConfig+0xd8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x9c>
 8002ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7e      	ldr	r2, [pc, #504]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7b      	ldr	r2, [pc, #492]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xd8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0xc0>
 8002eea:	4b76      	ldr	r3, [pc, #472]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a75      	ldr	r2, [pc, #468]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b73      	ldr	r3, [pc, #460]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a72      	ldr	r2, [pc, #456]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xd8>
 8002f04:	4b6f      	ldr	r3, [pc, #444]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b6c      	ldr	r3, [pc, #432]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6b      	ldr	r2, [pc, #428]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fd fccc 	bl	80008c0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fd fcc8 	bl	80008c0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e1ea      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b61      	ldr	r3, [pc, #388]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe8>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fd fcb8 	bl	80008c0 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fd fcb4 	bl	80008c0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1d6      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b57      	ldr	r3, [pc, #348]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x110>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d069      	beq.n	8003056 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f82:	4b50      	ldr	r3, [pc, #320]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x190>
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1aa      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b41      	ldr	r3, [pc, #260]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	493d      	ldr	r1, [pc, #244]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e040      	b.n	8003056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b39      	ldr	r3, [pc, #228]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a38      	ldr	r2, [pc, #224]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fc6a 	bl	80008c0 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff0:	f7fd fc66 	bl	80008c0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e188      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b2d      	ldr	r3, [pc, #180]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4929      	ldr	r1, [pc, #164]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003024:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd fc46 	bl	80008c0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7fd fc42 	bl	80008c0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e164      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d038      	beq.n	80030d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d019      	beq.n	800309e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306a:	4b16      	ldr	r3, [pc, #88]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd fc23 	bl	80008c0 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd fc1f 	bl	80008c0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e141      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x23a>
 800309c:	e01a      	b.n	80030d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a2:	4a08      	ldr	r2, [pc, #32]	@ (80030c4 <HAL_RCC_OscConfig+0x280>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fd fc09 	bl	80008c0 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fd fc05 	bl	80008c0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d903      	bls.n	80030c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e127      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
 80030c4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b94      	ldr	r3, [pc, #592]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ee      	bne.n	80030b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a4 	beq.w	800322a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b8e      	ldr	r3, [pc, #568]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b8b      	ldr	r3, [pc, #556]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	4a8a      	ldr	r2, [pc, #552]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310a:	4b85      	ldr	r3, [pc, #532]	@ (8003320 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003116:	4b82      	ldr	r3, [pc, #520]	@ (8003320 <HAL_RCC_OscConfig+0x4dc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a81      	ldr	r2, [pc, #516]	@ (8003320 <HAL_RCC_OscConfig+0x4dc>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fd fbcd 	bl	80008c0 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fd fbc9 	bl	80008c0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	@ 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0eb      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b78      	ldr	r3, [pc, #480]	@ (8003320 <HAL_RCC_OscConfig+0x4dc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x31a>
 8003150:	4b72      	ldr	r3, [pc, #456]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003154:	4a71      	ldr	r2, [pc, #452]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	@ 0x70
 800315c:	e02d      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x33c>
 8003166:	4b6d      	ldr	r3, [pc, #436]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a6c      	ldr	r2, [pc, #432]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70
 8003172:	4b6a      	ldr	r3, [pc, #424]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a69      	ldr	r2, [pc, #420]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
 800317e:	e01c      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x35e>
 8003188:	4b64      	ldr	r3, [pc, #400]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a63      	ldr	r2, [pc, #396]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b61      	ldr	r3, [pc, #388]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a60      	ldr	r2, [pc, #384]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	e00b      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
 80031a2:	4b5e      	ldr	r3, [pc, #376]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	4a5d      	ldr	r2, [pc, #372]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ae:	4b5b      	ldr	r3, [pc, #364]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b2:	4a5a      	ldr	r2, [pc, #360]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fd fb7d 	bl	80008c0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fd fb79 	bl	80008c0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e099      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	4b4e      	ldr	r3, [pc, #312]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ee      	beq.n	80031ca <HAL_RCC_OscConfig+0x386>
 80031ec:	e014      	b.n	8003218 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fd fb67 	bl	80008c0 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fd fb63 	bl	80008c0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e083      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	4b43      	ldr	r3, [pc, #268]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ee      	bne.n	80031f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	4a3e      	ldr	r2, [pc, #248]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d06f      	beq.n	8003312 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003232:	4b3a      	ldr	r3, [pc, #232]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b08      	cmp	r3, #8
 800323c:	d067      	beq.n	800330e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d149      	bne.n	80032da <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	4b35      	ldr	r3, [pc, #212]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a34      	ldr	r2, [pc, #208]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800324c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fd fb35 	bl	80008c0 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd fb31 	bl	80008c0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e053      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	019b      	lsls	r3, r3, #6
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	3b01      	subs	r3, #1
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	4313      	orrs	r3, r2
 800329e:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032a4:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1c      	ldr	r2, [pc, #112]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fd fb05 	bl	80008c0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fd fb01 	bl	80008c0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e023      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	4b13      	ldr	r3, [pc, #76]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x476>
 80032d8:	e01b      	b.n	8003312 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0f      	ldr	r2, [pc, #60]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 80032e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fd faeb 	bl	80008c0 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fd fae7 	bl	80008c0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e009      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_RCC_OscConfig+0x4d8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x4aa>
 800330c:	e001      	b.n	8003312 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	40007000 	.word	0x40007000

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b6      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b5d      	ldr	r3, [pc, #372]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b5a      	ldr	r3, [pc, #360]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	4958      	ldr	r1, [pc, #352]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b56      	ldr	r3, [pc, #344]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e09e      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b4f      	ldr	r3, [pc, #316]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	494c      	ldr	r1, [pc, #304]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d040      	beq.n	8003418 <HAL_RCC_ClockConfig+0xf4>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0x8a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d115      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xb2>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07d      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xb2>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e071      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xb2>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e069      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d6:	4b38      	ldr	r3, [pc, #224]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f023 0203 	bic.w	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4935      	ldr	r1, [pc, #212]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e8:	f7fd fa6a 	bl	80008c0 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_ClockConfig+0xe2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fd fa66 	bl	80008c0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e051      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	4b2c      	ldr	r3, [pc, #176]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 020c 	and.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	429a      	cmp	r2, r3
 8003416:	d1eb      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xcc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003418:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d210      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x124>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 020f 	bic.w	r2, r3, #15
 800342e:	4921      	ldr	r1, [pc, #132]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <HAL_RCC_ClockConfig+0x190>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x124>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e030      	b.n	80034aa <HAL_RCC_ClockConfig+0x186>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4915      	ldr	r1, [pc, #84]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x162>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	490d      	ldr	r1, [pc, #52]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003486:	f000 f81d 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800348a:	4602      	mov	r2, r0
 800348c:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <HAL_RCC_ClockConfig+0x194>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4909      	ldr	r1, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x198>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <HAL_RCC_ClockConfig+0x19c>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034a2:	200f      	movs	r0, #15
 80034a4:	f7fd f9e2 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	0800b26c 	.word	0x0800b26c
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	2300      	movs	r3, #0
 80034d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034da:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x3c>
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d83c      	bhi.n	8003564 <HAL_RCC_GetSysClockFreq+0xa0>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x36>
 80034f2:	e037      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f6:	60bb      	str	r3, [r7, #8]
       break;
 80034f8:	e037      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fa:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034fc:	60bb      	str	r3, [r7, #8]
      break;
 80034fe:	e034      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003508:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800350a:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x6c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003516:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003520:	6852      	ldr	r2, [r2, #4]
 8003522:	0992      	lsrs	r2, r2, #6
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x84>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8003530:	4a12      	ldr	r2, [pc, #72]	@ (800357c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	4a0f      	ldr	r2, [pc, #60]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 800353a:	6852      	ldr	r2, [r2, #4]
 800353c:	0992      	lsrs	r2, r2, #6
 800353e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <HAL_RCC_GetSysClockFreq+0xb4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	603b      	str	r3, [r7, #0]
      
      sysclockfreq = pllvco/pllp;
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	60bb      	str	r3, [r7, #8]
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003566:	60bb      	str	r3, [r7, #8]
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	68bb      	ldr	r3, [r7, #8]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	017d7840 	.word	0x017d7840

08003584 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect. 
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_RCC_GetHCLKFreq+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000000 	.word	0x20000000

0800359c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80035a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035a4:	220a      	movs	r2, #10
 80035a6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 80035a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035aa:	220a      	movs	r2, #10
 80035ac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80035ae:	4b39      	ldr	r3, [pc, #228]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80035b4:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035b6:	226f      	movs	r2, #111	@ 0x6f
 80035b8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80035ba:	4b37      	ldr	r3, [pc, #220]	@ (8003698 <MX_LWIP_Init+0xfc>)
 80035bc:	22ff      	movs	r2, #255	@ 0xff
 80035be:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80035c0:	4b35      	ldr	r3, [pc, #212]	@ (8003698 <MX_LWIP_Init+0xfc>)
 80035c2:	22ff      	movs	r2, #255	@ 0xff
 80035c4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80035c6:	4b34      	ldr	r3, [pc, #208]	@ (8003698 <MX_LWIP_Init+0xfc>)
 80035c8:	22ff      	movs	r2, #255	@ 0xff
 80035ca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80035cc:	4b32      	ldr	r3, [pc, #200]	@ (8003698 <MX_LWIP_Init+0xfc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80035d2:	4b32      	ldr	r3, [pc, #200]	@ (800369c <MX_LWIP_Init+0x100>)
 80035d4:	220a      	movs	r2, #10
 80035d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 80035d8:	4b30      	ldr	r3, [pc, #192]	@ (800369c <MX_LWIP_Init+0x100>)
 80035da:	220a      	movs	r2, #10
 80035dc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80035de:	4b2f      	ldr	r3, [pc, #188]	@ (800369c <MX_LWIP_Init+0x100>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 80035e4:	4b2d      	ldr	r3, [pc, #180]	@ (800369c <MX_LWIP_Init+0x100>)
 80035e6:	22fe      	movs	r2, #254	@ 0xfe
 80035e8:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80035ea:	f000 fb46 	bl	8003c7a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80035ee:	4b29      	ldr	r3, [pc, #164]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035f0:	78db      	ldrb	r3, [r3, #3]
 80035f2:	061a      	lsls	r2, r3, #24
 80035f4:	4b27      	ldr	r3, [pc, #156]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035f6:	789b      	ldrb	r3, [r3, #2]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <MX_LWIP_Init+0xf8>)
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	4313      	orrs	r3, r2
 8003604:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <MX_LWIP_Init+0xf8>)
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	4a25      	ldr	r2, [pc, #148]	@ (80036a0 <MX_LWIP_Init+0x104>)
 800360c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800360e:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <MX_LWIP_Init+0xfc>)
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	061a      	lsls	r2, r3, #24
 8003614:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <MX_LWIP_Init+0xfc>)
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <MX_LWIP_Init+0xfc>)
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	4313      	orrs	r3, r2
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <MX_LWIP_Init+0xfc>)
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	4313      	orrs	r3, r2
 800362a:	4a1e      	ldr	r2, [pc, #120]	@ (80036a4 <MX_LWIP_Init+0x108>)
 800362c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800362e:	4b1b      	ldr	r3, [pc, #108]	@ (800369c <MX_LWIP_Init+0x100>)
 8003630:	78db      	ldrb	r3, [r3, #3]
 8003632:	061a      	lsls	r2, r3, #24
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <MX_LWIP_Init+0x100>)
 8003636:	789b      	ldrb	r3, [r3, #2]
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	4b17      	ldr	r3, [pc, #92]	@ (800369c <MX_LWIP_Init+0x100>)
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	4313      	orrs	r3, r2
 8003644:	4a15      	ldr	r2, [pc, #84]	@ (800369c <MX_LWIP_Init+0x100>)
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <MX_LWIP_Init+0x10c>)
 800364c:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <MX_LWIP_Init+0x110>)
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <MX_LWIP_Init+0x114>)
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <MX_LWIP_Init+0x10c>)
 800365c:	4a11      	ldr	r2, [pc, #68]	@ (80036a4 <MX_LWIP_Init+0x108>)
 800365e:	4910      	ldr	r1, [pc, #64]	@ (80036a0 <MX_LWIP_Init+0x104>)
 8003660:	4814      	ldr	r0, [pc, #80]	@ (80036b4 <MX_LWIP_Init+0x118>)
 8003662:	f000 fdfd 	bl	8004260 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003666:	4813      	ldr	r0, [pc, #76]	@ (80036b4 <MX_LWIP_Init+0x118>)
 8003668:	f000 fecc 	bl	8004404 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <MX_LWIP_Init+0x118>)
 800366e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <MX_LWIP_Init+0xea>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800367e:	480d      	ldr	r0, [pc, #52]	@ (80036b4 <MX_LWIP_Init+0x118>)
 8003680:	f000 fed0 	bl	8004424 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003684:	e002      	b.n	800368c <MX_LWIP_Init+0xf0>
    netif_set_down(&gnetif);
 8003686:	480b      	ldr	r0, [pc, #44]	@ (80036b4 <MX_LWIP_Init+0x118>)
 8003688:	f000 ff10 	bl	80044ac <netif_set_down>
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200000ac 	.word	0x200000ac
 8003698:	200000b0 	.word	0x200000b0
 800369c:	200000b4 	.word	0x200000b4
 80036a0:	200000a0 	.word	0x200000a0
 80036a4:	200000a4 	.word	0x200000a4
 80036a8:	200000a8 	.word	0x200000a8
 80036ac:	0800afdd 	.word	0x0800afdd
 80036b0:	08003bd5 	.word	0x08003bd5
 80036b4:	20000070 	.word	0x20000070

080036b8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80036bc:	4803      	ldr	r0, [pc, #12]	@ (80036cc <MX_LWIP_Process+0x14>)
 80036be:	f000 fa69 	bl	8003b94 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80036c2:	f005 fb49 	bl	8008d58 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000070 	.word	0x20000070

080036d0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <HAL_ETH_MspInit+0xc4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d154      	bne.n	800378c <HAL_ETH_MspInit+0xbc>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 80036e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 8003700:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a20      	ldr	r2, [pc, #128]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 8003718:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <HAL_ETH_MspInit+0xc8>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800372a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800372e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800373c:	230b      	movs	r3, #11
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4619      	mov	r1, r3
 8003746:	4815      	ldr	r0, [pc, #84]	@ (800379c <HAL_ETH_MspInit+0xcc>)
 8003748:	f7ff f9b6 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800374c:	2332      	movs	r3, #50	@ 0x32
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800375c:	230b      	movs	r3, #11
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	480e      	ldr	r0, [pc, #56]	@ (80037a0 <HAL_ETH_MspInit+0xd0>)
 8003768:	f7ff f9a6 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800376c:	2386      	movs	r3, #134	@ 0x86
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800377c:	230b      	movs	r3, #11
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4619      	mov	r1, r3
 8003786:	4807      	ldr	r0, [pc, #28]	@ (80037a4 <HAL_ETH_MspInit+0xd4>)
 8003788:	f7ff f996 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	@ 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40028000 	.word	0x40028000
 8003798:	40023800 	.word	0x40023800
 800379c:	40021800 	.word	0x40021800
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020000 	.word	0x40020000

080037a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80037b4:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <low_level_init+0x134>)
 80037b6:	4a4a      	ldr	r2, [pc, #296]	@ (80038e0 <low_level_init+0x138>)
 80037b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80037ba:	4b48      	ldr	r3, [pc, #288]	@ (80038dc <low_level_init+0x134>)
 80037bc:	2201      	movs	r2, #1
 80037be:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80037c0:	4b46      	ldr	r3, [pc, #280]	@ (80038dc <low_level_init+0x134>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80037c6:	2300      	movs	r3, #0
 80037c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80037ce:	23e1      	movs	r3, #225	@ 0xe1
 80037d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80037d2:	2300      	movs	r3, #0
 80037d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80037d6:	2300      	movs	r3, #0
 80037d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80037da:	2300      	movs	r3, #0
 80037dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80037de:	4a3f      	ldr	r2, [pc, #252]	@ (80038dc <low_level_init+0x134>)
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80037e6:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <low_level_init+0x134>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80037ec:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <low_level_init+0x134>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80037f2:	4b3a      	ldr	r3, [pc, #232]	@ (80038dc <low_level_init+0x134>)
 80037f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037f8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80037fa:	4838      	ldr	r0, [pc, #224]	@ (80038dc <low_level_init+0x134>)
 80037fc:	f7fe f9fa 	bl	8001bf4 <HAL_ETH_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	b2da      	uxtb	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800381c:	2304      	movs	r3, #4
 800381e:	4a31      	ldr	r2, [pc, #196]	@ (80038e4 <low_level_init+0x13c>)
 8003820:	4931      	ldr	r1, [pc, #196]	@ (80038e8 <low_level_init+0x140>)
 8003822:	482e      	ldr	r0, [pc, #184]	@ (80038dc <low_level_init+0x134>)
 8003824:	f7fe fb7e 	bl	8001f24 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003828:	2304      	movs	r3, #4
 800382a:	4a30      	ldr	r2, [pc, #192]	@ (80038ec <low_level_init+0x144>)
 800382c:	4930      	ldr	r1, [pc, #192]	@ (80038f0 <low_level_init+0x148>)
 800382e:	482b      	ldr	r0, [pc, #172]	@ (80038dc <low_level_init+0x134>)
 8003830:	f7fe fbe0 	bl	8001ff4 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2206      	movs	r2, #6
 8003838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800383c:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <low_level_init+0x134>)
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <low_level_init+0x134>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	785a      	ldrb	r2, [r3, #1]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003854:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <low_level_init+0x134>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	789a      	ldrb	r2, [r3, #2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003860:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <low_level_init+0x134>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	78da      	ldrb	r2, [r3, #3]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <low_level_init+0x134>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	791a      	ldrb	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003878:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <low_level_init+0x134>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	795a      	ldrb	r2, [r3, #5]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800388a:	845a      	strh	r2, [r3, #34]	@ 0x22

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8003892:	f043 030a 	orr.w	r3, r3, #10
 8003896:	b2da      	uxtb	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800389e:	480f      	ldr	r0, [pc, #60]	@ (80038dc <low_level_init+0x134>)
 80038a0:	f7fe fe50 	bl	8002544 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	461a      	mov	r2, r3
 80038aa:	210b      	movs	r1, #11
 80038ac:	480b      	ldr	r0, [pc, #44]	@ (80038dc <low_level_init+0x134>)
 80038ae:	f7fe fd7b 	bl	80023a8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f043 030b 	orr.w	r3, r3, #11
 80038b8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	461a      	mov	r2, r3
 80038be:	210b      	movs	r1, #11
 80038c0:	4806      	ldr	r0, [pc, #24]	@ (80038dc <low_level_init+0x134>)
 80038c2:	f7fe fdd9 	bl	8002478 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	461a      	mov	r2, r3
 80038cc:	210b      	movs	r1, #11
 80038ce:	4803      	ldr	r0, [pc, #12]	@ (80038dc <low_level_init+0x134>)
 80038d0:	f7fe fd6a 	bl	80023a8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20003158 	.word	0x20003158
 80038e0:	40028000 	.word	0x40028000
 80038e4:	20001988 	.word	0x20001988
 80038e8:	20000138 	.word	0x20000138
 80038ec:	200001b8 	.word	0x200001b8
 80038f0:	200000b8 	.word	0x200000b8

080038f4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	@ 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80038fe:	4b4b      	ldr	r3, [pc, #300]	@ (8003a2c <low_level_output+0x138>)
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003916:	4b45      	ldr	r3, [pc, #276]	@ (8003a2c <low_level_output+0x138>)
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	e05a      	b.n	80039dc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	da03      	bge.n	8003936 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800392e:	23f8      	movs	r3, #248	@ 0xf8
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8003934:	e05c      	b.n	80039f0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	895b      	ldrh	r3, [r3, #10]
 800393a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003940:	e02f      	b.n	80039a2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	18d0      	adds	r0, r2, r3
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	18d1      	adds	r1, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	461a      	mov	r2, r3
 800395a:	f007 fc59 	bl	800b210 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da03      	bge.n	8003974 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800396c:	23f8      	movs	r3, #248	@ 0xf8
 800396e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8003972:	e03d      	b.n	80039f0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003984:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003990:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800399c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d8c8      	bhi.n	8003942 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	18d0      	adds	r0, r2, r3
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4413      	add	r3, r2
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f007 fc25 	bl	800b210 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1a1      	bne.n	8003926 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	4811      	ldr	r0, [pc, #68]	@ (8003a2c <low_level_output+0x138>)
 80039e6:	f7fe fb71 	bl	80020cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <low_level_output+0x138>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003a02:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <low_level_output+0x138>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003a10:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <low_level_output+0x138>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003a1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3728      	adds	r7, #40	@ 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20003158 	.word	0x20003158

08003a30 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	@ 0x30
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003a54:	484e      	ldr	r0, [pc, #312]	@ (8003b90 <low_level_input+0x160>)
 8003a56:	f7fe fc23 	bl	80022a0 <HAL_ETH_GetReceivedFrame>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <low_level_input+0x34>
    return NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e090      	b.n	8003b86 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003a64:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <low_level_input+0x160>)
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003a6a:	4b49      	ldr	r3, [pc, #292]	@ (8003b90 <low_level_input+0x160>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8003a70:	89fb      	ldrh	r3, [r7, #14]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	2004      	movs	r0, #4
 8003a7e:	f000 fd67 	bl	8004550 <pbuf_alloc>
 8003a82:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04b      	beq.n	8003b22 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a8a:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <low_level_input+0x160>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a98:	e040      	b.n	8003b1c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	895b      	ldrh	r3, [r3, #10]
 8003a9e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003aa4:	e021      	b.n	8003aea <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	18d0      	adds	r0, r2, r3
 8003aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	18d1      	adds	r1, r2, r3
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	f007 fba7 	bl	800b210 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003ad8:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003ae4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d8d6      	bhi.n	8003aa6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	18d0      	adds	r0, r2, r3
 8003b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f007 fb81 	bl	800b210 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4413      	add	r3, r2
 8003b14:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1bb      	bne.n	8003a9a <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <low_level_input+0x160>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e00b      	b.n	8003b46 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3301      	adds	r3, #1
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <low_level_input+0x160>)
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d3ee      	bcc.n	8003b2e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <low_level_input+0x160>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <low_level_input+0x160>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <low_level_input+0x160>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b70:	461a      	mov	r2, r3
 8003b72:	2380      	movs	r3, #128	@ 0x80
 8003b74:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <low_level_input+0x160>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	6093      	str	r3, [r2, #8]
  }
  return p;
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3730      	adds	r7, #48	@ 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20003158 	.word	0x20003158

08003b94 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff47 	bl	8003a30 <low_level_input>
 8003ba2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	4798      	blx	r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003bb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 ff2d 	bl	8004a20 <pbuf_free>
    p = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e000      	b.n	8003bce <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003bcc:	bf00      	nop
  }
}
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2273      	movs	r2, #115	@ 0x73
 8003be0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->name[1] = IFNAME1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2274      	movs	r2, #116	@ 0x74
 8003be8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a06      	ldr	r2, [pc, #24]	@ (8003c08 <ethernetif_init+0x34>)
 8003bf0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a05      	ldr	r2, [pc, #20]	@ (8003c0c <ethernetif_init+0x38>)
 8003bf6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fdd5 	bl	80037a8 <low_level_init>

  return ERR_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08009a01 	.word	0x08009a01
 8003c0c:	080038f5 	.word	0x080038f5

08003c10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003c14:	f7fc fe54 	bl	80008c0 <HAL_GetTick>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	4603      	mov	r3, r0
 8003c26:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	b21a      	sxth	r2, r3
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b21b      	sxth	r3, r3
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	b29b      	uxth	r3, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	061a      	lsls	r2, r3, #24
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0e1b      	lsrs	r3, r3, #24
 8003c6c:	4313      	orrs	r3, r2
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003c7e:	f000 f86d 	bl	8003d5c <mem_init>
  memp_init();
 8003c82:	f000 fa65 	bl	8004150 <memp_init>
  pbuf_init();
  netif_init();
 8003c86:	f000 fae3 	bl	8004250 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003c8a:	f005 f8b7 	bl	8008dfc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003c8e:	f001 f85b 	bl	8004d48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003c92:	f004 ffa7 	bl	8008be4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d50 <plug_holes+0xb4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d01f      	beq.n	8003cf8 <plug_holes+0x5c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	791b      	ldrb	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11b      	bne.n	8003cf8 <plug_holes+0x5c>
 8003cc0:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <plug_holes+0xb8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d016      	beq.n	8003cf8 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <plug_holes+0xbc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d102      	bne.n	8003cda <plug_holes+0x3e>
      lfree = mem;
 8003cd4:	4a20      	ldr	r2, [pc, #128]	@ (8003d58 <plug_holes+0xbc>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <plug_holes+0xb4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	1ad1      	subs	r1, r2, r3
 8003cea:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <plug_holes+0xb4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	8812      	ldrh	r2, [r2, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	b28a      	uxth	r2, r1
 8003cf6:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003cf8:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <plug_holes+0xb4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	8852      	ldrh	r2, [r2, #2]
 8003d00:	4413      	add	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d01a      	beq.n	8003d42 <plug_holes+0xa6>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	791b      	ldrb	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003d14:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <plug_holes+0xbc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d102      	bne.n	8003d24 <plug_holes+0x88>
      lfree = pmem;
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d58 <plug_holes+0xbc>)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003d2c:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <plug_holes+0xb4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	1ad1      	subs	r1, r2, r3
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <plug_holes+0xb4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b28a      	uxth	r2, r1
 8003d40:	805a      	strh	r2, [r3, #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	2000380c 	.word	0x2000380c
 8003d54:	20003810 	.word	0x20003810
 8003d58:	20003814 	.word	0x20003814

08003d5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003d62:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <mem_init+0x6c>)
 8003d64:	3303      	adds	r3, #3
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <mem_init+0x70>)
 8003d6e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003d70:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <mem_init+0x70>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003d7c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <mem_init+0x70>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8003d92:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd0 <mem_init+0x74>)
 8003d94:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <mem_init+0x74>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <mem_init+0x74>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003da6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <mem_init+0x74>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003db0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003db2:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <mem_init+0x70>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <mem_init+0x78>)
 8003db8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	200031b8 	.word	0x200031b8
 8003dcc:	2000380c 	.word	0x2000380c
 8003dd0:	20003810 	.word	0x20003810
 8003dd4:	20003814 	.word	0x20003814

08003dd8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01b      	beq.n	8003e1e <mem_free+0x46>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003de6:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <mem_free+0x54>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d318      	bcc.n	8003e22 <mem_free+0x4a>
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <mem_free+0x58>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d213      	bcs.n	8003e22 <mem_free+0x4a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3b08      	subs	r3, #8
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003e06:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <mem_free+0x5c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d202      	bcs.n	8003e16 <mem_free+0x3e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003e10:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <mem_free+0x5c>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff ff40 	bl	8003c9c <plug_holes>
 8003e1c:	e002      	b.n	8003e24 <mem_free+0x4c>
    return;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <mem_free+0x4c>
    return;
 8003e22:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000380c 	.word	0x2000380c
 8003e30:	20003810 	.word	0x20003810
 8003e34:	20003814 	.word	0x20003814

08003e38 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	3303      	adds	r3, #3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	2b0b      	cmp	r3, #11
 8003e54:	d801      	bhi.n	8003e5a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003e56:	230c      	movs	r3, #12
 8003e58:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003e5a:	887b      	ldrh	r3, [r7, #2]
 8003e5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e60:	d901      	bls.n	8003e66 <mem_trim+0x2e>
    return NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e095      	b.n	8003f92 <mem_trim+0x15a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003e66:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa0 <mem_trim+0x168>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d304      	bcc.n	8003e7a <mem_trim+0x42>
 8003e70:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa4 <mem_trim+0x16c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d301      	bcc.n	8003e7e <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	e089      	b.n	8003f92 <mem_trim+0x15a>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3b08      	subs	r3, #8
 8003e82:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003e84:	4b46      	ldr	r3, [pc, #280]	@ (8003fa0 <mem_trim+0x168>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	8a7b      	ldrh	r3, [r7, #18]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b08      	subs	r3, #8
 8003e9a:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8003e9c:	887a      	ldrh	r2, [r7, #2]
 8003e9e:	8a3b      	ldrh	r3, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d901      	bls.n	8003ea8 <mem_trim+0x70>
    /* not supported */
    return NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e074      	b.n	8003f92 <mem_trim+0x15a>
  }
  if (newsize == size) {
 8003ea8:	887a      	ldrh	r2, [r7, #2]
 8003eaa:	8a3b      	ldrh	r3, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d101      	bne.n	8003eb4 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	e06e      	b.n	8003f92 <mem_trim+0x15a>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa0 <mem_trim+0x168>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	8812      	ldrh	r2, [r2, #0]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d131      	bne.n	8003f2c <mem_trim+0xf4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003ece:	8a7a      	ldrh	r2, [r7, #18]
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8003eda:	4b33      	ldr	r3, [pc, #204]	@ (8003fa8 <mem_trim+0x170>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d105      	bne.n	8003ef0 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa0 <mem_trim+0x168>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	897b      	ldrh	r3, [r7, #10]
 8003eea:	4413      	add	r3, r2
 8003eec:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa8 <mem_trim+0x170>)
 8003eee:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <mem_trim+0x168>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	893a      	ldrh	r2, [r7, #8]
 8003f04:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8a7a      	ldrh	r2, [r7, #18]
 8003f0a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	897a      	ldrh	r2, [r7, #10]
 8003f10:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f1a:	d039      	beq.n	8003f90 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003f1c:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <mem_trim+0x168>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	8812      	ldrh	r2, [r2, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	897a      	ldrh	r2, [r7, #10]
 8003f28:	805a      	strh	r2, [r3, #2]
 8003f2a:	e031      	b.n	8003f90 <mem_trim+0x158>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	f103 0214 	add.w	r2, r3, #20
 8003f32:	8a3b      	ldrh	r3, [r7, #16]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d82b      	bhi.n	8003f90 <mem_trim+0x158>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003f38:	8a7a      	ldrh	r2, [r7, #18]
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3308      	adds	r3, #8
 8003f42:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003f44:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <mem_trim+0x168>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	897b      	ldrh	r3, [r7, #10]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003f4e:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <mem_trim+0x170>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d202      	bcs.n	8003f5e <mem_trim+0x126>
      lfree = mem2;
 8003f58:	4a13      	ldr	r2, [pc, #76]	@ (8003fa8 <mem_trim+0x170>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8a7a      	ldrh	r2, [r7, #18]
 8003f70:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	897a      	ldrh	r2, [r7, #10]
 8003f76:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f80:	d006      	beq.n	8003f90 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <mem_trim+0x168>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	897a      	ldrh	r2, [r7, #10]
 8003f8e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003f90:	687b      	ldr	r3, [r7, #4]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	2000380c 	.word	0x2000380c
 8003fa4:	20003810 	.word	0x20003810
 8003fa8:	20003814 	.word	0x20003814

08003fac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	@ 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <mem_malloc+0x14>
    return NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e08b      	b.n	80040d8 <mem_malloc+0x12c>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	3303      	adds	r3, #3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	2b0b      	cmp	r3, #11
 8003fd0:	d801      	bhi.n	8003fd6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003fdc:	d901      	bls.n	8003fe2 <mem_malloc+0x36>
    return NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e07a      	b.n	80040d8 <mem_malloc+0x12c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003fe2:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <mem_malloc+0x138>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b40      	ldr	r3, [pc, #256]	@ (80040e8 <mem_malloc+0x13c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	83fb      	strh	r3, [r7, #30]
 8003fee:	e06c      	b.n	80040ca <mem_malloc+0x11e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8003ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <mem_malloc+0x13c>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	791b      	ldrb	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d15d      	bne.n	80040be <mem_malloc+0x112>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	8bfb      	ldrh	r3, [r7, #30]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f1a3 0208 	sub.w	r2, r3, #8
 8004010:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004012:	429a      	cmp	r2, r3
 8004014:	d353      	bcc.n	80040be <mem_malloc+0x112>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	8bfb      	ldrh	r3, [r7, #30]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f1a3 0208 	sub.w	r2, r3, #8
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	3314      	adds	r3, #20
 8004028:	429a      	cmp	r2, r3
 800402a:	d327      	bcc.n	800407c <mem_malloc+0xd0>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800402c:	8bfa      	ldrh	r2, [r7, #30]
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	4413      	add	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	3308      	adds	r3, #8
 8004036:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004038:	4b2b      	ldr	r3, [pc, #172]	@ (80040e8 <mem_malloc+0x13c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	8a7b      	ldrh	r3, [r7, #18]
 800403e:	4413      	add	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8bfa      	ldrh	r2, [r7, #30]
 8004054:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	8a7a      	ldrh	r2, [r7, #18]
 800405a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2201      	movs	r2, #1
 8004060:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800406a:	d00a      	beq.n	8004082 <mem_malloc+0xd6>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800406c:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <mem_malloc+0x13c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	4413      	add	r3, r2
 8004076:	8a7a      	ldrh	r2, [r7, #18]
 8004078:	805a      	strh	r2, [r3, #2]
 800407a:	e002      	b.n	8004082 <mem_malloc+0xd6>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2201      	movs	r2, #1
 8004080:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004082:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <mem_malloc+0x138>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	429a      	cmp	r2, r3
 800408a:	d115      	bne.n	80040b8 <mem_malloc+0x10c>
          struct mem *cur = lfree;
 800408c:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <mem_malloc+0x138>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004092:	e005      	b.n	80040a0 <mem_malloc+0xf4>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004094:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <mem_malloc+0x13c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	4413      	add	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	791b      	ldrb	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <mem_malloc+0x106>
 80040a8:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <mem_malloc+0x140>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d1f0      	bne.n	8004094 <mem_malloc+0xe8>
          }
          lfree = cur;
 80040b2:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <mem_malloc+0x138>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3308      	adds	r3, #8
 80040bc:	e00c      	b.n	80040d8 <mem_malloc+0x12c>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <mem_malloc+0x13c>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80040ca:	8bfa      	ldrh	r2, [r7, #30]
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d38c      	bcc.n	8003ff0 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3724      	adds	r7, #36	@ 0x24
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	20003814 	.word	0x20003814
 80040e8:	2000380c 	.word	0x2000380c
 80040ec:	20003810 	.word	0x20003810

080040f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	3303      	adds	r3, #3
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e011      	b.n	8004136 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	885b      	ldrh	r3, [r3, #2]
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4293      	cmp	r3, r2
 8004140:	dbe7      	blt.n	8004112 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004156:	2300      	movs	r3, #0
 8004158:	80fb      	strh	r3, [r7, #6]
 800415a:	e009      	b.n	8004170 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <memp_init+0x30>)
 8004160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ffc3 	bl	80040f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	3301      	adds	r3, #1
 800416e:	80fb      	strh	r3, [r7, #6]
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	2b08      	cmp	r3, #8
 8004174:	d9f2      	bls.n	800415c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	0800b2e8 	.word	0x0800b2e8

08004184 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <do_memp_malloc_pool+0x24>
#if !MEMP_MEM_MALLOC
    *desc->tab = memp->next;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	601a      	str	r2, [r3, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	e000      	b.n	80041aa <do_memp_malloc_pool+0x26>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d901      	bls.n	80041cc <memp_malloc+0x14>
 80041c8:	2300      	movs	r3, #0
 80041ca:	e008      	b.n	80041de <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	4a06      	ldr	r2, [pc, #24]	@ (80041e8 <memp_malloc+0x30>)
 80041d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ffd5 	bl	8004184 <do_memp_malloc_pool>
 80041da:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	0800b2e8 	.word	0x0800b2e8

080041ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	6039      	str	r1, [r7, #0]
 8004222:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d80c      	bhi.n	8004244 <memp_free+0x2c>

  if (mem == NULL) {
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	4a06      	ldr	r2, [pc, #24]	@ (800424c <memp_free+0x34>)
 8004234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ffd6 	bl	80041ec <do_memp_free_pool>
 8004240:	e000      	b.n	8004244 <memp_free+0x2c>
    return;
 8004242:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	0800b2e8 	.word	0x0800b2e8

08004250 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2203      	movs	r2, #3
 800428c:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8004296:	4b13      	ldr	r3, [pc, #76]	@ (80042e4 <netif_add+0x84>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	b2d1      	uxtb	r1, r2
 800429e:	4a11      	ldr	r2, [pc, #68]	@ (80042e4 <netif_add+0x84>)
 80042a0:	7011      	strb	r1, [r2, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
  netif->input = input;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f819 	bl	80042ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	4798      	blx	r3
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <netif_add+0x6a>
    return NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e007      	b.n	80042da <netif_add+0x7a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <netif_add+0x88>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80042d2:	4a05      	ldr	r2, [pc, #20]	@ (80042e8 <netif_add+0x88>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80042d8:	68fb      	ldr	r3, [r7, #12]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200066f8 	.word	0x200066f8
 80042e8:	200066f0 	.word	0x200066f0

080042ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <netif_set_addr+0x1c>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f81a 	bl	8004344 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f862 	bl	80043dc <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f84a 	bl	80043b4 <netif_set_gw>
 8004320:	e00c      	b.n	800433c <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f859 	bl	80043dc <netif_set_netmask>
    netif_set_gw(netif, gw);
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f841 	bl	80043b4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f805 	bl	8004344 <netif_set_ipaddr>
  }
}
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <netif_set_ipaddr+0x18>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e002      	b.n	8004362 <netif_set_ipaddr+0x1e>
 800435c:	4b14      	ldr	r3, [pc, #80]	@ (80043b0 <netif_set_ipaddr+0x6c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d01c      	beq.n	80043a8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	f107 020c 	add.w	r2, r7, #12
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fd2b 	bl	8005dd4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	f107 020c 	add.w	r2, r7, #12
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f004 ff59 	bl	8009240 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <netif_set_ipaddr+0x56>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	e000      	b.n	800439c <netif_set_ipaddr+0x58>
 800439a:	2300      	movs	r3, #0
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80043a0:	2101      	movs	r1, #1
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f861 	bl	800446a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	0800b34c 	.word	0x0800b34c

080043b4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <netif_set_gw+0x16>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	e000      	b.n	80043cc <netif_set_gw+0x18>
 80043ca:	2300      	movs	r3, #0
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <netif_set_netmask+0x16>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	e000      	b.n	80043f4 <netif_set_netmask+0x18>
 80043f2:	2300      	movs	r3, #0
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800440c:	4a04      	ldr	r2, [pc, #16]	@ (8004420 <netif_set_default+0x1c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200066f4 	.word	0x200066f4

08004424 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d113      	bne.n	8004462 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	b2da      	uxtb	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800445a:	2103      	movs	r1, #3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f804 	bl	800446a <netif_issue_reports>
    }
  }
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d011      	beq.n	80044a4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f005 fcfa 	bl	8009e98 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f005 f944 	bl	8009770 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <pbuf_free_ooseq+0x40>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80044fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <pbuf_free_ooseq+0x44>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	e00f      	b.n	8004524 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f9d6 	bl	80058c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 800451c:	e005      	b.n	800452a <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ec      	bne.n	8004504 <pbuf_free_ooseq+0x14>
    }
  }
}
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	200066f9 	.word	0x200066f9
 8004534:	20006708 	.word	0x20006708

08004538 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800453c:	4b03      	ldr	r3, [pc, #12]	@ (800454c <pbuf_pool_is_empty+0x14>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	200066f9 	.word	0x200066f9

08004550 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
 800455a:	460b      	mov	r3, r1
 800455c:	80bb      	strh	r3, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d81c      	bhi.n	80045a2 <pbuf_alloc+0x52>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <pbuf_alloc+0x20>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004585 	.word	0x08004585
 8004574:	0800458b 	.word	0x0800458b
 8004578:	08004591 	.word	0x08004591
 800457c:	08004597 	.word	0x08004597
 8004580:	0800459d 	.word	0x0800459d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004584:	2336      	movs	r3, #54	@ 0x36
 8004586:	82fb      	strh	r3, [r7, #22]
    break;
 8004588:	e00d      	b.n	80045a6 <pbuf_alloc+0x56>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800458a:	2322      	movs	r3, #34	@ 0x22
 800458c:	82fb      	strh	r3, [r7, #22]
    break;
 800458e:	e00a      	b.n	80045a6 <pbuf_alloc+0x56>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004590:	230e      	movs	r3, #14
 8004592:	82fb      	strh	r3, [r7, #22]
    break;
 8004594:	e007      	b.n	80045a6 <pbuf_alloc+0x56>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004596:	2300      	movs	r3, #0
 8004598:	82fb      	strh	r3, [r7, #22]
    break;
 800459a:	e004      	b.n	80045a6 <pbuf_alloc+0x56>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	82fb      	strh	r3, [r7, #22]
    break;
 80045a0:	e001      	b.n	80045a6 <pbuf_alloc+0x56>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e0d3      	b.n	800474e <pbuf_alloc+0x1fe>
  }

  switch (type) {
 80045a6:	79bb      	ldrb	r3, [r7, #6]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d00c      	beq.n	80045c6 <pbuf_alloc+0x76>
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	f300 80c5 	bgt.w	800473c <pbuf_alloc+0x1ec>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d079      	beq.n	80046aa <pbuf_alloc+0x15a>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f2c0 80c0 	blt.w	800473c <pbuf_alloc+0x1ec>
 80045bc:	3b01      	subs	r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	f200 80bc 	bhi.w	800473c <pbuf_alloc+0x1ec>
 80045c4:	e0a0      	b.n	8004708 <pbuf_alloc+0x1b8>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80045c6:	2008      	movs	r0, #8
 80045c8:	f7ff fdf6 	bl	80041b8 <memp_malloc>
 80045cc:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <pbuf_alloc+0x8c>
      PBUF_POOL_IS_EMPTY();
 80045d4:	f7ff ffb0 	bl	8004538 <pbuf_pool_is_empty>
      return NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	e0b8      	b.n	800474e <pbuf_alloc+0x1fe>
    }
    p->type = type;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	79ba      	ldrb	r2, [r7, #6]
 80045e0:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80045e8:	8afb      	ldrh	r3, [r7, #22]
 80045ea:	3310      	adds	r3, #16
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	3303      	adds	r3, #3
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	461a      	mov	r2, r3
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	88ba      	ldrh	r2, [r7, #4]
 8004600:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004602:	8afb      	ldrh	r3, [r7, #22]
 8004604:	3303      	adds	r3, #3
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 800460e:	88bb      	ldrh	r3, [r7, #4]
 8004610:	4293      	cmp	r3, r2
 8004612:	bf28      	it	cs
 8004614:	4613      	movcs	r3, r2
 8004616:	b29a      	uxth	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2201      	movs	r2, #1
 8004620:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004626:	88bb      	ldrh	r3, [r7, #4]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	8952      	ldrh	r2, [r2, #10]
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8004630:	e037      	b.n	80046a2 <pbuf_alloc+0x152>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004632:	2008      	movs	r0, #8
 8004634:	f7ff fdc0 	bl	80041b8 <memp_malloc>
 8004638:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <pbuf_alloc+0xfe>
        PBUF_POOL_IS_EMPTY();
 8004640:	f7ff ff7a 	bl	8004538 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004644:	69f8      	ldr	r0, [r7, #28]
 8004646:	f000 f9eb 	bl	8004a20 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	e07f      	b.n	800474e <pbuf_alloc+0x1fe>
      }
      q->type = type;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	79ba      	ldrb	r2, [r7, #6]
 8004652:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004676:	bf28      	it	cs
 8004678:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f103 0210 	add.w	r2, r3, #16
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	895b      	ldrh	r3, [r3, #10]
 8004696:	461a      	mov	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	dcc4      	bgt.n	8004632 <pbuf_alloc+0xe2>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80046a8:	e04a      	b.n	8004740 <pbuf_alloc+0x1f0>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 80046aa:	8afb      	ldrh	r3, [r7, #22]
 80046ac:	3313      	adds	r3, #19
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f023 0303 	bic.w	r3, r3, #3
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	88bb      	ldrh	r3, [r7, #4]
 80046b8:	3303      	adds	r3, #3
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fc70 	bl	8003fac <mem_malloc>
 80046cc:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <pbuf_alloc+0x188>
      return NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e03a      	b.n	800474e <pbuf_alloc+0x1fe>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80046d8:	8afb      	ldrh	r3, [r7, #22]
 80046da:	3310      	adds	r3, #16
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	3303      	adds	r3, #3
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	461a      	mov	r2, r3
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	88ba      	ldrh	r2, [r7, #4]
 80046f0:	811a      	strh	r2, [r3, #8]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	891a      	ldrh	r2, [r3, #8]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	79ba      	ldrb	r2, [r7, #6]
 8004704:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8004706:	e01b      	b.n	8004740 <pbuf_alloc+0x1f0>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004708:	2007      	movs	r0, #7
 800470a:	f7ff fd55 	bl	80041b8 <memp_malloc>
 800470e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <pbuf_alloc+0x1ca>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	e019      	b.n	800474e <pbuf_alloc+0x1fe>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	88ba      	ldrh	r2, [r7, #4]
 8004724:	811a      	strh	r2, [r3, #8]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	891a      	ldrh	r2, [r3, #8]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	79ba      	ldrb	r2, [r7, #6]
 8004738:	731a      	strb	r2, [r3, #12]
    break;
 800473a:	e001      	b.n	8004740 <pbuf_alloc+0x1f0>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	e006      	b.n	800474e <pbuf_alloc+0x1fe>
  }
  /* set reference count */
  p->ref = 1;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2201      	movs	r2, #1
 8004744:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2200      	movs	r2, #0
 800474a:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800474c:	69fb      	ldr	r3, [r7, #28]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop

08004758 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	71fb      	strb	r3, [r7, #7]
 8004764:	460b      	mov	r3, r1
 8004766:	80bb      	strh	r3, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d81b      	bhi.n	80047aa <pbuf_alloced_custom+0x52>
 8004772:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <pbuf_alloced_custom+0x20>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	0800478d 	.word	0x0800478d
 800477c:	08004793 	.word	0x08004793
 8004780:	08004799 	.word	0x08004799
 8004784:	0800479f 	.word	0x0800479f
 8004788:	080047a5 	.word	0x080047a5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800478c:	2336      	movs	r3, #54	@ 0x36
 800478e:	81fb      	strh	r3, [r7, #14]
    break;
 8004790:	e00d      	b.n	80047ae <pbuf_alloced_custom+0x56>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004792:	2322      	movs	r3, #34	@ 0x22
 8004794:	81fb      	strh	r3, [r7, #14]
    break;
 8004796:	e00a      	b.n	80047ae <pbuf_alloced_custom+0x56>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004798:	230e      	movs	r3, #14
 800479a:	81fb      	strh	r3, [r7, #14]
    break;
 800479c:	e007      	b.n	80047ae <pbuf_alloced_custom+0x56>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800479e:	2300      	movs	r3, #0
 80047a0:	81fb      	strh	r3, [r7, #14]
    break;
 80047a2:	e004      	b.n	80047ae <pbuf_alloced_custom+0x56>
  case PBUF_RAW:
    offset = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	81fb      	strh	r3, [r7, #14]
    break;
 80047a8:	e001      	b.n	80047ae <pbuf_alloced_custom+0x56>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e02d      	b.n	800480a <pbuf_alloced_custom+0xb2>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	3303      	adds	r3, #3
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	88bb      	ldrh	r3, [r7, #4]
 80047b8:	441a      	add	r2, r3
 80047ba:	8bbb      	ldrh	r3, [r7, #28]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d901      	bls.n	80047c4 <pbuf_alloced_custom+0x6c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e022      	b.n	800480a <pbuf_alloced_custom+0xb2>
  }

  p->pbuf.next = NULL;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <pbuf_alloced_custom+0x8a>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80047d0:	89fb      	ldrh	r3, [r7, #14]
 80047d2:	3303      	adds	r3, #3
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	441a      	add	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	605a      	str	r2, [r3, #4]
 80047e0:	e002      	b.n	80047e8 <pbuf_alloced_custom+0x90>
  } else {
    p->pbuf.payload = NULL;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2202      	movs	r2, #2
 80047ec:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	88ba      	ldrh	r2, [r7, #4]
 80047f2:	811a      	strh	r2, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	891a      	ldrh	r2, [r3, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	79ba      	ldrb	r2, [r7, #6]
 8004800:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2201      	movs	r2, #1
 8004806:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004808:	683b      	ldr	r3, [r7, #0]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	891b      	ldrh	r3, [r3, #8]
 8004828:	887a      	ldrh	r2, [r7, #2]
 800482a:	429a      	cmp	r2, r3
 800482c:	d24e      	bcs.n	80048cc <pbuf_realloc+0xb4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800482e:	887b      	ldrh	r3, [r7, #2]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	8912      	ldrh	r2, [r2, #8]
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004838:	887b      	ldrh	r3, [r7, #2]
 800483a:	827b      	strh	r3, [r7, #18]
  q = p;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004840:	e00f      	b.n	8004862 <pbuf_realloc+0x4a>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	895b      	ldrh	r3, [r3, #10]
 8004846:	8a7a      	ldrh	r2, [r7, #18]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	891a      	ldrh	r2, [r3, #8]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	b29b      	uxth	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	b29a      	uxth	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	617b      	str	r3, [r7, #20]
  while (rem_len > q->len) {
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	895b      	ldrh	r3, [r3, #10]
 8004866:	8a7a      	ldrh	r2, [r7, #18]
 8004868:	429a      	cmp	r2, r3
 800486a:	d8ea      	bhi.n	8004842 <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	7b1b      	ldrb	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d117      	bne.n	80048a4 <pbuf_realloc+0x8c>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	895b      	ldrh	r3, [r3, #10]
 8004878:	8a7a      	ldrh	r2, [r7, #18]
 800487a:	429a      	cmp	r2, r3
 800487c:	d012      	beq.n	80048a4 <pbuf_realloc+0x8c>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	7b5b      	ldrb	r3, [r3, #13]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <pbuf_realloc+0x8c>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	b29a      	uxth	r2, r3
 8004894:	8a7b      	ldrh	r3, [r7, #18]
 8004896:	4413      	add	r3, r2
 8004898:	b29b      	uxth	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f7ff facb 	bl	8003e38 <mem_trim>
 80048a2:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	8a7a      	ldrh	r2, [r7, #18]
 80048a8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	895a      	ldrh	r2, [r3, #10]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d004      	beq.n	80048c4 <pbuf_realloc+0xac>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f8ae 	bl	8004a20 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e000      	b.n	80048ce <pbuf_realloc+0xb6>
    return;
 80048cc:	bf00      	nop

}
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
 80048e0:	4613      	mov	r3, r2
 80048e2:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 80048e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <pbuf_header_impl+0x1e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <pbuf_header_impl+0x22>
    return 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e06a      	b.n	80049cc <pbuf_header_impl+0xf8>
  }

  if (header_size_increment < 0) {
 80048f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da09      	bge.n	8004912 <pbuf_header_impl+0x3e>
    increment_magnitude = -header_size_increment;
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	425b      	negs	r3, r3
 8004902:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	895b      	ldrh	r3, [r3, #10]
 8004908:	89fa      	ldrh	r2, [r7, #14]
 800490a:	429a      	cmp	r2, r3
 800490c:	d903      	bls.n	8004916 <pbuf_header_impl+0x42>
 800490e:	2301      	movs	r3, #1
 8004910:	e05c      	b.n	80049cc <pbuf_header_impl+0xf8>
  } else {
    increment_magnitude = header_size_increment;
 8004912:	887b      	ldrh	r3, [r7, #2]
 8004914:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7b1b      	ldrb	r3, [r3, #12]
 800491a:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004922:	89bb      	ldrh	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <pbuf_header_impl+0x5a>
 8004928:	89bb      	ldrh	r3, [r7, #12]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d112      	bne.n	8004954 <pbuf_header_impl+0x80>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004936:	425b      	negs	r3, r3
 8004938:	441a      	add	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3310      	adds	r3, #16
 8004946:	429a      	cmp	r2, r3
 8004948:	d231      	bcs.n	80049ae <pbuf_header_impl+0xda>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004950:	2301      	movs	r3, #1
 8004952:	e03b      	b.n	80049cc <pbuf_header_impl+0xf8>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004954:	89bb      	ldrh	r3, [r7, #12]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d002      	beq.n	8004960 <pbuf_header_impl+0x8c>
 800495a:	89bb      	ldrh	r3, [r7, #12]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d124      	bne.n	80049aa <pbuf_header_impl+0xd6>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004960:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004964:	2b00      	cmp	r3, #0
 8004966:	da0d      	bge.n	8004984 <pbuf_header_impl+0xb0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	895b      	ldrh	r3, [r3, #10]
 800496c:	89fa      	ldrh	r2, [r7, #14]
 800496e:	429a      	cmp	r2, r3
 8004970:	d808      	bhi.n	8004984 <pbuf_header_impl+0xb0>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800497a:	425b      	negs	r3, r3
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e011      	b.n	80049a8 <pbuf_header_impl+0xd4>
    } else if ((header_size_increment > 0) && force) {
 8004984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dd0b      	ble.n	80049a4 <pbuf_header_impl+0xd0>
 800498c:	787b      	ldrb	r3, [r7, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <pbuf_header_impl+0xd0>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800499a:	425b      	negs	r3, r3
 800499c:	441a      	add	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	e001      	b.n	80049a8 <pbuf_header_impl+0xd4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e011      	b.n	80049cc <pbuf_header_impl+0xf8>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80049a8:	e001      	b.n	80049ae <pbuf_header_impl+0xda>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00e      	b.n	80049cc <pbuf_header_impl+0xf8>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	895a      	ldrh	r2, [r3, #10]
 80049b2:	887b      	ldrh	r3, [r7, #2]
 80049b4:	4413      	add	r3, r2
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	891a      	ldrh	r2, [r3, #8]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4413      	add	r3, r2
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80049e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049e8:	2200      	movs	r2, #0
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ff71 	bl	80048d4 <pbuf_header_impl>
 80049f2:	4603      	mov	r3, r0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004a08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff5f 	bl	80048d4 <pbuf_header_impl>
 8004a16:	4603      	mov	r3, r0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e043      	b.n	8004aba <pbuf_free+0x9a>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004a36:	e03c      	b.n	8004ab2 <pbuf_free+0x92>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	89db      	ldrh	r3, [r3, #14]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	81da      	strh	r2, [r3, #14]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	89db      	ldrh	r3, [r3, #14]
 8004a48:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004a4a:	8abb      	ldrh	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d12e      	bne.n	8004aae <pbuf_free+0x8e>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7b1b      	ldrb	r3, [r3, #12]
 8004a5a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	7b5b      	ldrb	r3, [r3, #13]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <pbuf_free+0x56>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
 8004a74:	e015      	b.n	8004aa2 <pbuf_free+0x82>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d104      	bne.n	8004a86 <pbuf_free+0x66>
          memp_free(MEMP_PBUF_POOL, p);
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	2008      	movs	r0, #8
 8004a80:	f7ff fbca 	bl	8004218 <memp_free>
 8004a84:	e00d      	b.n	8004aa2 <pbuf_free+0x82>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004a86:	89fb      	ldrh	r3, [r7, #14]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d002      	beq.n	8004a92 <pbuf_free+0x72>
 8004a8c:	89fb      	ldrh	r3, [r7, #14]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d104      	bne.n	8004a9c <pbuf_free+0x7c>
          memp_free(MEMP_PBUF, p);
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	2007      	movs	r0, #7
 8004a96:	f7ff fbbf 	bl	8004218 <memp_free>
 8004a9a:	e002      	b.n	8004aa2 <pbuf_free+0x82>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff f99b 	bl	8003dd8 <mem_free>
        }
      }
      count++;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	e001      	b.n	8004ab2 <pbuf_free+0x92>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1bf      	bne.n	8004a38 <pbuf_free+0x18>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004ace:	e005      	b.n	8004adc <pbuf_clen+0x1a>
    ++len;
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f6      	bne.n	8004ad0 <pbuf_clen+0xe>
  }
  return len;
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	89db      	ldrh	r3, [r3, #14]
 8004b02:	3301      	adds	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	81da      	strh	r2, [r3, #14]
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01f      	beq.n	8004b66 <pbuf_cat+0x50>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01c      	beq.n	8004b66 <pbuf_cat+0x50>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e00a      	b.n	8004b48 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	891a      	ldrh	r2, [r3, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	891b      	ldrh	r3, [r3, #8]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	891a      	ldrh	r2, [r3, #8]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	891b      	ldrh	r3, [r3, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	81fb      	strh	r3, [r7, #14]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <pbuf_copy+0x2a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <pbuf_copy+0x2a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	891a      	ldrh	r2, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	891b      	ldrh	r3, [r3, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d202      	bcs.n	8004ba0 <pbuf_copy+0x30>
 8004b9a:	f06f 030f 	mvn.w	r3, #15
 8004b9e:	e06b      	b.n	8004c78 <pbuf_copy+0x108>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	895b      	ldrh	r3, [r3, #10]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	895b      	ldrh	r3, [r3, #10]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	89bb      	ldrh	r3, [r7, #12]
 8004bb2:	1acb      	subs	r3, r1, r3
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	db05      	blt.n	8004bc4 <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	895a      	ldrh	r2, [r3, #10]
 8004bbc:	89bb      	ldrh	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	e004      	b.n	8004bce <pbuf_copy+0x5e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	895a      	ldrh	r2, [r3, #10]
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	18d0      	adds	r0, r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	89bb      	ldrh	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	897a      	ldrh	r2, [r7, #10]
 8004be0:	4619      	mov	r1, r3
 8004be2:	f006 fb15 	bl	800b210 <memcpy>
    offset_to += len;
 8004be6:	89fa      	ldrh	r2, [r7, #14]
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	4413      	add	r3, r2
 8004bec:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8004bee:	89ba      	ldrh	r2, [r7, #12]
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	895b      	ldrh	r3, [r3, #10]
 8004bfa:	89ba      	ldrh	r2, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d304      	bcc.n	8004c0a <pbuf_copy+0x9a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	895b      	ldrh	r3, [r3, #10]
 8004c0e:	89fa      	ldrh	r2, [r7, #14]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d10d      	bne.n	8004c30 <pbuf_copy+0xc0>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <pbuf_copy+0xc0>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <pbuf_copy+0xc0>
 8004c2a:	f06f 030f 	mvn.w	r3, #15
 8004c2e:	e023      	b.n	8004c78 <pbuf_copy+0x108>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <pbuf_copy+0xe0>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	895a      	ldrh	r2, [r3, #10]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	891b      	ldrh	r3, [r3, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d106      	bne.n	8004c50 <pbuf_copy+0xe0>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <pbuf_copy+0xe0>
 8004c4a:	f06f 0305 	mvn.w	r3, #5
 8004c4e:	e013      	b.n	8004c78 <pbuf_copy+0x108>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <pbuf_copy+0x100>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	895a      	ldrh	r2, [r3, #10]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	891b      	ldrh	r3, [r3, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d106      	bne.n	8004c70 <pbuf_copy+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <pbuf_copy+0x100>
 8004c6a:	f06f 0305 	mvn.w	r3, #5
 8004c6e:	e003      	b.n	8004c78 <pbuf_copy+0x108>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d194      	bne.n	8004ba0 <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	460b      	mov	r3, r1
 8004c90:	80fb      	strh	r3, [r7, #6]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <pbuf_copy_partial+0x24>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e04d      	b.n	8004d40 <pbuf_copy_partial+0xc0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <pbuf_copy_partial+0x2e>
 8004caa:	2300      	movs	r3, #0
 8004cac:	e048      	b.n	8004d40 <pbuf_copy_partial+0xc0>

  left = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <pbuf_copy_partial+0x3e>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <pbuf_copy_partial+0x42>
    return 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e03e      	b.n	8004d40 <pbuf_copy_partial+0xc0>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	e034      	b.n	8004d32 <pbuf_copy_partial+0xb2>
    if ((offset != 0) && (offset >= p->len)) {
 8004cc8:	88bb      	ldrh	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <pbuf_copy_partial+0x64>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	895b      	ldrh	r3, [r3, #10]
 8004cd2:	88ba      	ldrh	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d305      	bcc.n	8004ce4 <pbuf_copy_partial+0x64>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	895b      	ldrh	r3, [r3, #10]
 8004cdc:	88ba      	ldrh	r2, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	80bb      	strh	r3, [r7, #4]
 8004ce2:	e023      	b.n	8004d2c <pbuf_copy_partial+0xac>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	895a      	ldrh	r2, [r3, #10]
 8004ce8:	88bb      	ldrh	r3, [r7, #4]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004cee:	8b3a      	ldrh	r2, [r7, #24]
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d901      	bls.n	8004cfa <pbuf_copy_partial+0x7a>
        buf_copy_len = len;
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004cfa:	8b7b      	ldrh	r3, [r7, #26]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	18d0      	adds	r0, r2, r3
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	88bb      	ldrh	r3, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	8b3a      	ldrh	r2, [r7, #24]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f006 fa80 	bl	800b210 <memcpy>
      copied_total += buf_copy_len;
 8004d10:	8afa      	ldrh	r2, [r7, #22]
 8004d12:	8b3b      	ldrh	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8004d18:	8b7a      	ldrh	r2, [r7, #26]
 8004d1a:	8b3b      	ldrh	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	8b3b      	ldrh	r3, [r7, #24]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <pbuf_copy_partial+0xbe>
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1c4      	bne.n	8004cc8 <pbuf_copy_partial+0x48>
    }
  }
  return copied_total;
 8004d3e:	8afb      	ldrh	r3, [r7, #22]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004d5c:	f000 fcf4 	bl	8005748 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004d60:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <tcp_tmr+0x28>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <tcp_tmr+0x28>)
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <tcp_tmr+0x28>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004d78:	f000 faa4 	bl	80052c4 <tcp_slowtmr>
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20006711 	.word	0x20006711

08004d84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e00a      	b.n	8004daa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d102      	bne.n	8004da4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f1      	bne.n	8004d94 <tcp_remove_listener+0x10>
      }
   }
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004dc8:	2301      	movs	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e00b      	b.n	8004de6 <tcp_listen_closed+0x26>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <tcp_listen_closed+0x38>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ffd2 	bl	8004d84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d9f0      	bls.n	8004dce <tcp_listen_closed+0xe>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	0800b324 	.word	0x0800b324

08004dfc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004dfc:	b5b0      	push	{r4, r5, r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d068      	beq.n	8004ee0 <tcp_close_shutdown+0xe4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7d1b      	ldrb	r3, [r3, #20]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d003      	beq.n	8004e1e <tcp_close_shutdown+0x22>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7d1b      	ldrb	r3, [r3, #20]
 8004e1a:	2b07      	cmp	r3, #7
 8004e1c:	d160      	bne.n	8004ee0 <tcp_close_shutdown+0xe4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <tcp_close_shutdown+0x34>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8004e2e:	d057      	beq.n	8004ee0 <tcp_close_shutdown+0xe4>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e38:	687c      	ldr	r4, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1d1d      	adds	r5, r3, #4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8adb      	ldrh	r3, [r3, #22]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	8b12      	ldrh	r2, [r2, #24]
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	f003 fc5f 	bl	8008710 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fed6 	bl	8005c04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004e58:	4b75      	ldr	r3, [pc, #468]	@ (8005030 <tcp_close_shutdown+0x234>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d105      	bne.n	8004e6e <tcp_close_shutdown+0x72>
 8004e62:	4b73      	ldr	r3, [pc, #460]	@ (8005030 <tcp_close_shutdown+0x234>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a71      	ldr	r2, [pc, #452]	@ (8005030 <tcp_close_shutdown+0x234>)
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	e013      	b.n	8004e96 <tcp_close_shutdown+0x9a>
 8004e6e:	4b70      	ldr	r3, [pc, #448]	@ (8005030 <tcp_close_shutdown+0x234>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	e00c      	b.n	8004e90 <tcp_close_shutdown+0x94>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d104      	bne.n	8004e8a <tcp_close_shutdown+0x8e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e005      	b.n	8004e96 <tcp_close_shutdown+0x9a>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ef      	bne.n	8004e76 <tcp_close_shutdown+0x7a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	4b65      	ldr	r3, [pc, #404]	@ (8005034 <tcp_close_shutdown+0x238>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7d1b      	ldrb	r3, [r3, #20]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d10c      	bne.n	8004ec4 <tcp_close_shutdown+0xc8>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	220a      	movs	r2, #10
 8004eae:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004eb0:	4b61      	ldr	r3, [pc, #388]	@ (8005038 <tcp_close_shutdown+0x23c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8005038 <tcp_close_shutdown+0x23c>)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	f003 fe5b 	bl	8008b78 <tcp_timer_needed>
 8004ec2:	e00b      	b.n	8004edc <tcp_close_shutdown+0xe0>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8004ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800503c <tcp_close_shutdown+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d102      	bne.n	8004ed4 <tcp_close_shutdown+0xd8>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8004ece:	f002 ffc1 	bl	8007e54 <tcp_trigger_input_pcb_close>
 8004ed2:	e003      	b.n	8004edc <tcp_close_shutdown+0xe0>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f7ff f99e 	bl	8004218 <memp_free>
        }
      }
      return ERR_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e0a3      	b.n	8005028 <tcp_close_shutdown+0x22c>
    }
  }

  switch (pcb->state) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7d1b      	ldrb	r3, [r3, #20]
 8004ee4:	2b07      	cmp	r3, #7
 8004ee6:	f200 8089 	bhi.w	8004ffc <tcp_close_shutdown+0x200>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <tcp_close_shutdown+0xf4>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f11 	.word	0x08004f11
 8004ef4:	08004f6f 	.word	0x08004f6f
 8004ef8:	08004f8f 	.word	0x08004f8f
 8004efc:	08004faf 	.word	0x08004faf
 8004f00:	08004fc9 	.word	0x08004fc9
 8004f04:	08004ffd 	.word	0x08004ffd
 8004f08:	08004ffd 	.word	0x08004ffd
 8004f0c:	08004fe3 	.word	0x08004fe3
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
    if (pcb->local_port != 0) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8adb      	ldrh	r3, [r3, #22]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d021      	beq.n	8004f60 <tcp_close_shutdown+0x164>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004f1c:	4b48      	ldr	r3, [pc, #288]	@ (8005040 <tcp_close_shutdown+0x244>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d105      	bne.n	8004f32 <tcp_close_shutdown+0x136>
 8004f26:	4b46      	ldr	r3, [pc, #280]	@ (8005040 <tcp_close_shutdown+0x244>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a44      	ldr	r2, [pc, #272]	@ (8005040 <tcp_close_shutdown+0x244>)
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	e013      	b.n	8004f5a <tcp_close_shutdown+0x15e>
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <tcp_close_shutdown+0x244>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e00c      	b.n	8004f54 <tcp_close_shutdown+0x158>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d104      	bne.n	8004f4e <tcp_close_shutdown+0x152>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	e005      	b.n	8004f5a <tcp_close_shutdown+0x15e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ef      	bne.n	8004f3a <tcp_close_shutdown+0x13e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	2001      	movs	r0, #1
 8004f64:	f7ff f958 	bl	8004218 <memp_free>
    pcb = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	607b      	str	r3, [r7, #4]
    break;
 8004f6c:	e050      	b.n	8005010 <tcp_close_shutdown+0x214>
  case LISTEN:
    err = ERR_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]
    tcp_listen_closed(pcb);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff ff24 	bl	8004dc0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4832      	ldr	r0, [pc, #200]	@ (8005044 <tcp_close_shutdown+0x248>)
 8004f7c:	f000 fe83 	bl	8005c86 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	2002      	movs	r0, #2
 8004f84:	f7ff f948 	bl	8004218 <memp_free>
    pcb = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
    break;
 8004f8c:	e040      	b.n	8005010 <tcp_close_shutdown+0x214>
  case SYN_SENT:
    err = ERR_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4826      	ldr	r0, [pc, #152]	@ (8005030 <tcp_close_shutdown+0x234>)
 8004f96:	f000 fe76 	bl	8005c86 <tcp_pcb_remove>
 8004f9a:	4b26      	ldr	r3, [pc, #152]	@ (8005034 <tcp_close_shutdown+0x238>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f7ff f938 	bl	8004218 <memp_free>
    pcb = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	607b      	str	r3, [r7, #4]
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8004fac:	e030      	b.n	8005010 <tcp_close_shutdown+0x214>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f002 ffc8 	bl	8007f44 <tcp_send_fin>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d122      	bne.n	8005006 <tcp_close_shutdown+0x20a>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004fc6:	e01e      	b.n	8005006 <tcp_close_shutdown+0x20a>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f002 ffbb 	bl	8007f44 <tcp_send_fin>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d117      	bne.n	800500a <tcp_close_shutdown+0x20e>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2205      	movs	r2, #5
 8004fde:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004fe0:	e013      	b.n	800500a <tcp_close_shutdown+0x20e>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f002 ffae 	bl	8007f44 <tcp_send_fin>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10c      	bne.n	800500e <tcp_close_shutdown+0x212>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2209      	movs	r2, #9
 8004ff8:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004ffa:	e008      	b.n	800500e <tcp_close_shutdown+0x212>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]
    pcb = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	607b      	str	r3, [r7, #4]
    break;
 8005004:	e004      	b.n	8005010 <tcp_close_shutdown+0x214>
    break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <tcp_close_shutdown+0x214>
    break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <tcp_close_shutdown+0x214>
    break;
 800500e:	bf00      	nop
  }

  if (pcb != NULL && err == ERR_OK) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <tcp_close_shutdown+0x228>
 8005016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <tcp_close_shutdown+0x228>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f003 f948 	bl	80082b4 <tcp_output>
  }
  return err;
 8005024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bdb0      	pop	{r4, r5, r7, pc}
 8005030:	20006708 	.word	0x20006708
 8005034:	20006710 	.word	0x20006710
 8005038:	2000670c 	.word	0x2000670c
 800503c:	20006748 	.word	0x20006748
 8005040:	20006700 	.word	0x20006700
 8005044:	20006704 	.word	0x20006704

08005048 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7d1b      	ldrb	r3, [r3, #20]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d006      	beq.n	8005066 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7e9b      	ldrb	r3, [r3, #26]
 800505c:	f043 0310 	orr.w	r3, r3, #16
 8005060:	b2da      	uxtb	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005066:	2101      	movs	r1, #1
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fec7 	bl	8004dfc <tcp_close_shutdown>
 800506e:	4603      	mov	r3, r0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	@ 0x30
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7d1b      	ldrb	r3, [r3, #20]
 8005086:	2b0a      	cmp	r3, #10
 8005088:	d108      	bne.n	800509c <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4845      	ldr	r0, [pc, #276]	@ (80051a4 <tcp_abandon+0x12c>)
 800508e:	f000 fdfa 	bl	8005c86 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	2001      	movs	r0, #1
 8005096:	f7ff f8bf 	bl	8004218 <memp_free>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 800509a:	e07e      	b.n	800519a <tcp_abandon+0x122>
    int send_rst = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a8:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050b6:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7d1b      	ldrb	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d126      	bne.n	8005114 <tcp_abandon+0x9c>
      if (pcb->local_port != 0) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8adb      	ldrh	r3, [r3, #22]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02e      	beq.n	800512c <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80050ce:	4b36      	ldr	r3, [pc, #216]	@ (80051a8 <tcp_abandon+0x130>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d105      	bne.n	80050e4 <tcp_abandon+0x6c>
 80050d8:	4b33      	ldr	r3, [pc, #204]	@ (80051a8 <tcp_abandon+0x130>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	4a32      	ldr	r2, [pc, #200]	@ (80051a8 <tcp_abandon+0x130>)
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e013      	b.n	800510c <tcp_abandon+0x94>
 80050e4:	4b30      	ldr	r3, [pc, #192]	@ (80051a8 <tcp_abandon+0x130>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e00c      	b.n	8005106 <tcp_abandon+0x8e>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d104      	bne.n	8005100 <tcp_abandon+0x88>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	e005      	b.n	800510c <tcp_abandon+0x94>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ef      	bne.n	80050ec <tcp_abandon+0x74>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e00b      	b.n	800512c <tcp_abandon+0xb4>
      send_rst = reset;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8adb      	ldrh	r3, [r3, #22]
 800511c:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4822      	ldr	r0, [pc, #136]	@ (80051ac <tcp_abandon+0x134>)
 8005122:	f000 fdb0 	bl	8005c86 <tcp_pcb_remove>
 8005126:	4b22      	ldr	r3, [pc, #136]	@ (80051b0 <tcp_abandon+0x138>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <tcp_abandon+0xc6>
      tcp_segs_free(pcb->unacked);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fbc2 	bl	80058c2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <tcp_abandon+0xd8>
      tcp_segs_free(pcb->unsent);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fbb9 	bl	80058c2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <tcp_abandon+0xea>
      tcp_segs_free(pcb->ooseq);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fbb0 	bl	80058c2 <tcp_segs_free>
    if (send_rst) {
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00c      	beq.n	8005182 <tcp_abandon+0x10a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	1d19      	adds	r1, r3, #4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8b1b      	ldrh	r3, [r3, #24]
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	460b      	mov	r3, r1
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	69b8      	ldr	r0, [r7, #24]
 800517e:	f003 fac7 	bl	8008710 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	2001      	movs	r0, #1
 8005186:	f7ff f847 	bl	8004218 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <tcp_abandon+0x122>
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f06f 010c 	mvn.w	r1, #12
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	4798      	blx	r3
}
 800519a:	bf00      	nop
 800519c:	3728      	adds	r7, #40	@ 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2000670c 	.word	0x2000670c
 80051a8:	20006700 	.word	0x20006700
 80051ac:	20006708 	.word	0x20006708
 80051b0:	20006710 	.word	0x20006710

080051b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80051bc:	2101      	movs	r1, #1
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff5a 	bl	8005078 <tcp_abandon>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80051dc:	4413      	add	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80051e8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80051ec:	bf28      	it	cs
 80051ee:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80051f2:	b292      	uxth	r2, r2
 80051f4:	4413      	add	r3, r2
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	db08      	blt.n	8005210 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	e015      	b.n	800523c <tcp_update_rcv_ann_wnd+0x70>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	dd03      	ble.n	8005226 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005224:	e009      	b.n	800523a <tcp_update_rcv_ann_wnd+0x6e>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800523a:	2300      	movs	r3, #0
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	4413      	add	r3, r2
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005266:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800526a:	d904      	bls.n	8005276 <tcp_recved+0x2e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005272:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005274:	e00f      	b.n	8005296 <tcp_recved+0x4e>
  } else if (pcb->rcv_wnd == 0) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <tcp_recved+0x4e>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7d1b      	ldrb	r3, [r3, #20]
 8005282:	2b07      	cmp	r3, #7
 8005284:	d003      	beq.n	800528e <tcp_recved+0x46>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	7d1b      	ldrb	r3, [r3, #20]
 800528a:	2b09      	cmp	r3, #9
 800528c:	d103      	bne.n	8005296 <tcp_recved+0x4e>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005294:	851a      	strh	r2, [r3, #40]	@ 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff ff98 	bl	80051cc <tcp_update_rcv_ann_wnd>
 800529c:	4603      	mov	r3, r0
 800529e:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80052a6:	db09      	blt.n	80052bc <tcp_recved+0x74>
    tcp_ack_now(pcb);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7e9b      	ldrb	r3, [r3, #26]
 80052ac:	f043 0302 	orr.w	r3, r3, #2
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f002 fffc 	bl	80082b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b08a      	sub	sp, #40	@ 0x28
 80052c8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	757b      	strb	r3, [r7, #21]

  ++tcp_ticks;
 80052ce:	4b85      	ldr	r3, [pc, #532]	@ (80054e4 <tcp_slowtmr+0x220>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a83      	ldr	r2, [pc, #524]	@ (80054e4 <tcp_slowtmr+0x220>)
 80052d6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80052d8:	4b83      	ldr	r3, [pc, #524]	@ (80054e8 <tcp_slowtmr+0x224>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	4b81      	ldr	r3, [pc, #516]	@ (80054e8 <tcp_slowtmr+0x224>)
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e000      	b.n	80052e8 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80052e6:	bf00      	nop
  prev = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
 80052ec:	4b7f      	ldr	r3, [pc, #508]	@ (80054ec <tcp_slowtmr+0x228>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80052f2:	e1de      	b.n	80056b2 <tcp_slowtmr+0x3ee>
    if (pcb->last_timer == tcp_timer_ctr) {
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	7f5a      	ldrb	r2, [r3, #29]
 80052f8:	4b7b      	ldr	r3, [pc, #492]	@ (80054e8 <tcp_slowtmr+0x224>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d103      	bne.n	8005308 <tcp_slowtmr+0x44>
      pcb = pcb->next;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	61fb      	str	r3, [r7, #28]
      continue;
 8005306:	e1d4      	b.n	80056b2 <tcp_slowtmr+0x3ee>
    pcb->last_timer = tcp_timer_ctr;
 8005308:	4b77      	ldr	r3, [pc, #476]	@ (80054e8 <tcp_slowtmr+0x224>)
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	75fb      	strb	r3, [r7, #23]
    pcb_reset = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	75bb      	strb	r3, [r7, #22]
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	7d1b      	ldrb	r3, [r3, #20]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d108      	bne.n	8005332 <tcp_slowtmr+0x6e>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005326:	2b06      	cmp	r3, #6
 8005328:	d103      	bne.n	8005332 <tcp_slowtmr+0x6e>
      ++pcb_remove;
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	3301      	adds	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
 8005330:	e09e      	b.n	8005470 <tcp_slowtmr+0x1ac>
    else if (pcb->nrtx == TCP_MAXRTX) {
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d103      	bne.n	8005344 <tcp_slowtmr+0x80>
      ++pcb_remove;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	3301      	adds	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
 8005342:	e095      	b.n	8005470 <tcp_slowtmr+0x1ac>
      if (pcb->persist_backoff > 0) {
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800534a:	2b00      	cmp	r3, #0
 800534c:	d032      	beq.n	80053b4 <tcp_slowtmr+0xf0>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8005354:	3b01      	subs	r3, #1
 8005356:	4a66      	ldr	r2, [pc, #408]	@ (80054f0 <tcp_slowtmr+0x22c>)
 8005358:	5cd3      	ldrb	r3, [r2, r3]
 800535a:	737b      	strb	r3, [r7, #13]
        if (pcb->persist_cnt < backoff_cnt) {
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8005362:	7b7a      	ldrb	r2, [r7, #13]
 8005364:	429a      	cmp	r2, r3
 8005366:	d907      	bls.n	8005378 <tcp_slowtmr+0xb4>
          pcb->persist_cnt++;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800536e:	3301      	adds	r3, #1
 8005370:	b2da      	uxtb	r2, r3
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800537e:	7b7a      	ldrb	r2, [r7, #13]
 8005380:	429a      	cmp	r2, r3
 8005382:	d875      	bhi.n	8005470 <tcp_slowtmr+0x1ac>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005384:	69f8      	ldr	r0, [r7, #28]
 8005386:	f003 fb37 	bl	80089f8 <tcp_zero_window_probe>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d16f      	bne.n	8005470 <tcp_slowtmr+0x1ac>
            pcb->persist_cnt = 0;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d866      	bhi.n	8005470 <tcp_slowtmr+0x1ac>
              pcb->persist_backoff++;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80053a8:	3301      	adds	r3, #1
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80053b2:	e05d      	b.n	8005470 <tcp_slowtmr+0x1ac>
        if (pcb->rtime >= 0) {
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db08      	blt.n	80053d0 <tcp_slowtmr+0x10c>
          ++pcb->rtime;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	b21a      	sxth	r2, r3
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d04b      	beq.n	8005470 <tcp_slowtmr+0x1ac>
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80053e4:	429a      	cmp	r2, r3
 80053e6:	db43      	blt.n	8005470 <tcp_slowtmr+0x1ac>
          if (pcb->state != SYN_SENT) {
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	7d1b      	ldrb	r3, [r3, #20]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d014      	beq.n	800541a <tcp_slowtmr+0x156>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80053f6:	10db      	asrs	r3, r3, #3
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005402:	4413      	add	r3, r2
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 800540a:	4611      	mov	r1, r2
 800540c:	4a39      	ldr	r2, [pc, #228]	@ (80054f4 <tcp_slowtmr+0x230>)
 800540e:	5c52      	ldrb	r2, [r2, r1]
 8005410:	4093      	lsls	r3, r2
 8005412:	b21a      	sxth	r2, r3
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2200      	movs	r2, #0
 800541e:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800542c:	4293      	cmp	r3, r2
 800542e:	bf28      	it	cs
 8005430:	4613      	movcs	r3, r2
 8005432:	81fb      	strh	r3, [r7, #14]
          pcb->ssthresh = eff_wnd >> 1;
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	b29b      	uxth	r3, r3
 800544e:	429a      	cmp	r2, r3
 8005450:	d206      	bcs.n	8005460 <tcp_slowtmr+0x19c>
            pcb->ssthresh = (pcb->mss << 1);
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 800546a:	69f8      	ldr	r0, [r7, #28]
 800546c:	f003 f9b5 	bl	80087da <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	7d1b      	ldrb	r3, [r3, #20]
 8005474:	2b06      	cmp	r3, #6
 8005476:	d10f      	bne.n	8005498 <tcp_slowtmr+0x1d4>
      if (pcb->flags & TF_RXCLOSED) {
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	7e9b      	ldrb	r3, [r3, #26]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <tcp_slowtmr+0x1d4>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005484:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <tcp_slowtmr+0x220>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b28      	cmp	r3, #40	@ 0x28
 8005490:	d902      	bls.n	8005498 <tcp_slowtmr+0x1d4>
          ++pcb_remove;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	3301      	adds	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	7a1b      	ldrb	r3, [r3, #8]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d054      	beq.n	800554e <tcp_slowtmr+0x28a>
       ((pcb->state == ESTABLISHED) ||
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d003      	beq.n	80054b4 <tcp_slowtmr+0x1f0>
        (pcb->state == CLOSE_WAIT))) {
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d14c      	bne.n	800554e <tcp_slowtmr+0x28a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <tcp_slowtmr+0x220>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <tcp_slowtmr+0x234>)
 80054c6:	440b      	add	r3, r1
 80054c8:	490c      	ldr	r1, [pc, #48]	@ (80054fc <tcp_slowtmr+0x238>)
 80054ca:	fba1 1303 	umull	r1, r3, r1, r3
 80054ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d915      	bls.n	8005500 <tcp_slowtmr+0x23c>
        ++pcb_remove;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	3301      	adds	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
        ++pcb_reset;
 80054da:	7dbb      	ldrb	r3, [r7, #22]
 80054dc:	3301      	adds	r3, #1
 80054de:	75bb      	strb	r3, [r7, #22]
 80054e0:	e035      	b.n	800554e <tcp_slowtmr+0x28a>
 80054e2:	bf00      	nop
 80054e4:	200066fc 	.word	0x200066fc
 80054e8:	20006712 	.word	0x20006712
 80054ec:	20006708 	.word	0x20006708
 80054f0:	0800b31c 	.word	0x0800b31c
 80054f4:	0800b30c 	.word	0x0800b30c
 80054f8:	000a4cb8 	.word	0x000a4cb8
 80054fc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005500:	4b8b      	ldr	r3, [pc, #556]	@ (8005730 <tcp_slowtmr+0x46c>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8005516:	4618      	mov	r0, r3
 8005518:	4b86      	ldr	r3, [pc, #536]	@ (8005734 <tcp_slowtmr+0x470>)
 800551a:	fb00 f303 	mul.w	r3, r0, r3
 800551e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005520:	4985      	ldr	r1, [pc, #532]	@ (8005738 <tcp_slowtmr+0x474>)
 8005522:	fba1 1303 	umull	r1, r3, r1, r3
 8005526:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005528:	429a      	cmp	r2, r3
 800552a:	d910      	bls.n	800554e <tcp_slowtmr+0x28a>
        err = tcp_keepalive(pcb);
 800552c:	69f8      	ldr	r0, [r7, #28]
 800552e:	f003 fa26 	bl	800897e <tcp_keepalive>
 8005532:	4603      	mov	r3, r0
 8005534:	757b      	strb	r3, [r7, #21]
        if (err == ERR_OK) {
 8005536:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <tcp_slowtmr+0x28a>
          pcb->keep_cnt_sent++;
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8005544:	3301      	adds	r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <tcp_slowtmr+0x2c0>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005556:	4b76      	ldr	r3, [pc, #472]	@ (8005730 <tcp_slowtmr+0x46c>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8005566:	4619      	mov	r1, r3
 8005568:	460b      	mov	r3, r1
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	440b      	add	r3, r1
 800556e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005570:	429a      	cmp	r2, r3
 8005572:	d307      	bcc.n	8005584 <tcp_slowtmr+0x2c0>
      tcp_segs_free(pcb->ooseq);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f9a2 	bl	80058c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2200      	movs	r2, #0
 8005582:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	7d1b      	ldrb	r3, [r3, #20]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d109      	bne.n	80055a0 <tcp_slowtmr+0x2dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800558c:	4b68      	ldr	r3, [pc, #416]	@ (8005730 <tcp_slowtmr+0x46c>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b28      	cmp	r3, #40	@ 0x28
 8005598:	d902      	bls.n	80055a0 <tcp_slowtmr+0x2dc>
        ++pcb_remove;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	3301      	adds	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
    if (pcb->state == LAST_ACK) {
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	7d1b      	ldrb	r3, [r3, #20]
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	d109      	bne.n	80055bc <tcp_slowtmr+0x2f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80055a8:	4b61      	ldr	r3, [pc, #388]	@ (8005730 <tcp_slowtmr+0x46c>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80055b4:	d902      	bls.n	80055bc <tcp_slowtmr+0x2f8>
        ++pcb_remove;
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
 80055b8:	3301      	adds	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
    if (pcb_remove) {
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d042      	beq.n	8005648 <tcp_slowtmr+0x384>
      tcp_err_fn err_fn = pcb->errf;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055c8:	60bb      	str	r3, [r7, #8]
      tcp_pcb_purge(pcb);
 80055ca:	69f8      	ldr	r0, [r7, #28]
 80055cc:	f000 fb1a 	bl	8005c04 <tcp_pcb_purge>
      if (prev != NULL) {
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d004      	beq.n	80055e0 <tcp_slowtmr+0x31c>
        prev->next = pcb->next;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	e003      	b.n	80055e8 <tcp_slowtmr+0x324>
        tcp_active_pcbs = pcb->next;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a55      	ldr	r2, [pc, #340]	@ (800573c <tcp_slowtmr+0x478>)
 80055e6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80055e8:	7dbb      	ldrb	r3, [r7, #22]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <tcp_slowtmr+0x34c>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80055f6:	69fc      	ldr	r4, [r7, #28]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	1d1d      	adds	r5, r3, #4
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	8adb      	ldrh	r3, [r3, #22]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	8b12      	ldrh	r2, [r2, #24]
 8005604:	9201      	str	r2, [sp, #4]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	462b      	mov	r3, r5
 800560a:	4622      	mov	r2, r4
 800560c:	f003 f880 	bl	8008710 <tcp_rst>
      err_arg = pcb->callback_arg;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	607b      	str	r3, [r7, #4]
      pcb2 = pcb;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	2001      	movs	r0, #1
 8005624:	f7fe fdf8 	bl	8004218 <memp_free>
      tcp_active_pcbs_changed = 0;
 8005628:	4b45      	ldr	r3, [pc, #276]	@ (8005740 <tcp_slowtmr+0x47c>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <tcp_slowtmr+0x37a>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f06f 010c 	mvn.w	r1, #12
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800563e:	4b40      	ldr	r3, [pc, #256]	@ (8005740 <tcp_slowtmr+0x47c>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d035      	beq.n	80056b2 <tcp_slowtmr+0x3ee>
        goto tcp_slowtmr_start;
 8005646:	e64f      	b.n	80052e8 <tcp_slowtmr+0x24>
      prev = pcb;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	61fb      	str	r3, [r7, #28]
      ++prev->polltmr;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	7edb      	ldrb	r3, [r3, #27]
 8005656:	3301      	adds	r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	7eda      	ldrb	r2, [r3, #27]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	7f1b      	ldrb	r3, [r3, #28]
 8005666:	429a      	cmp	r2, r3
 8005668:	d323      	bcc.n	80056b2 <tcp_slowtmr+0x3ee>
        prev->polltmr = 0;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2200      	movs	r2, #0
 800566e:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 8005670:	4b33      	ldr	r3, [pc, #204]	@ (8005740 <tcp_slowtmr+0x47c>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <tcp_slowtmr+0x3d2>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	6912      	ldr	r2, [r2, #16]
 800568a:	69b9      	ldr	r1, [r7, #24]
 800568c:	4610      	mov	r0, r2
 800568e:	4798      	blx	r3
 8005690:	4603      	mov	r3, r0
 8005692:	757b      	strb	r3, [r7, #21]
 8005694:	e001      	b.n	800569a <tcp_slowtmr+0x3d6>
 8005696:	2300      	movs	r3, #0
 8005698:	757b      	strb	r3, [r7, #21]
        if (tcp_active_pcbs_changed) {
 800569a:	4b29      	ldr	r3, [pc, #164]	@ (8005740 <tcp_slowtmr+0x47c>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f47f ae21 	bne.w	80052e6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80056a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <tcp_slowtmr+0x3ee>
          tcp_output(prev);
 80056ac:	69b8      	ldr	r0, [r7, #24]
 80056ae:	f002 fe01 	bl	80082b4 <tcp_output>
  while (pcb != NULL) {
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f47f ae1d 	bne.w	80052f4 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
 80056be:	4b21      	ldr	r3, [pc, #132]	@ (8005744 <tcp_slowtmr+0x480>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80056c4:	e02c      	b.n	8005720 <tcp_slowtmr+0x45c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80056ca:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <tcp_slowtmr+0x46c>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2bf0      	cmp	r3, #240	@ 0xf0
 80056d6:	d902      	bls.n	80056de <tcp_slowtmr+0x41a>
      ++pcb_remove;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	3301      	adds	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d018      	beq.n	8005716 <tcp_slowtmr+0x452>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80056e4:	69f8      	ldr	r0, [r7, #28]
 80056e6:	f000 fa8d 	bl	8005c04 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e003      	b.n	8005702 <tcp_slowtmr+0x43e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <tcp_slowtmr+0x480>)
 8005700:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	613b      	str	r3, [r7, #16]
      pcb = pcb->next;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
 800570c:	6939      	ldr	r1, [r7, #16]
 800570e:	2001      	movs	r0, #1
 8005710:	f7fe fd82 	bl	8004218 <memp_free>
 8005714:	e004      	b.n	8005720 <tcp_slowtmr+0x45c>
    } else {
      prev = pcb;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1cf      	bne.n	80056c6 <tcp_slowtmr+0x402>
    }
  }
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bdb0      	pop	{r4, r5, r7, pc}
 8005730:	200066fc 	.word	0x200066fc
 8005734:	000124f8 	.word	0x000124f8
 8005738:	10624dd3 	.word	0x10624dd3
 800573c:	20006708 	.word	0x20006708
 8005740:	20006710 	.word	0x20006710
 8005744:	2000670c 	.word	0x2000670c

08005748 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800574e:	4b25      	ldr	r3, [pc, #148]	@ (80057e4 <tcp_fasttmr+0x9c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4b23      	ldr	r3, [pc, #140]	@ (80057e4 <tcp_fasttmr+0x9c>)
 8005758:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800575a:	4b23      	ldr	r3, [pc, #140]	@ (80057e8 <tcp_fasttmr+0xa0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005760:	e038      	b.n	80057d4 <tcp_fasttmr+0x8c>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7f5a      	ldrb	r2, [r3, #29]
 8005766:	4b1f      	ldr	r3, [pc, #124]	@ (80057e4 <tcp_fasttmr+0x9c>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d02f      	beq.n	80057ce <tcp_fasttmr+0x86>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800576e:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <tcp_fasttmr+0x9c>)
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7e9b      	ldrb	r3, [r3, #26]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d010      	beq.n	80057a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7e9b      	ldrb	r3, [r3, #26]
 8005786:	f043 0302 	orr.w	r3, r3, #2
 800578a:	b2da      	uxtb	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f002 fd8f 	bl	80082b4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7e9b      	ldrb	r3, [r3, #26]
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	769a      	strb	r2, [r3, #26]
      }

      next = pcb->next;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <tcp_fasttmr+0x80>
        tcp_active_pcbs_changed = 0;
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <tcp_fasttmr+0xa4>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f819 	bl	80057f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80057be:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <tcp_fasttmr+0xa4>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d000      	beq.n	80057c8 <tcp_fasttmr+0x80>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80057c6:	e7c8      	b.n	800575a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	e002      	b.n	80057d4 <tcp_fasttmr+0x8c>
    } else {
      pcb = pcb->next;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c3      	bne.n	8005762 <tcp_fasttmr+0x1a>
    }
  }
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20006712 	.word	0x20006712
 80057e8:	20006708 	.word	0x20006708
 80057ec:	20006710 	.word	0x20006710

080057f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057fc:	7b5b      	ldrb	r3, [r3, #13]
 80057fe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005804:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <tcp_process_refused_data+0x3e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6918      	ldr	r0, [r3, #16]
 8005820:	2300      	movs	r3, #0
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	47a0      	blx	r4
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
 800582c:	e007      	b.n	800583e <tcp_process_refused_data+0x4e>
 800582e:	2300      	movs	r3, #0
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	2000      	movs	r0, #0
 8005836:	f000 f88d 	bl	8005954 <tcp_recv_null>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800583e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d12a      	bne.n	800589c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d033      	beq.n	80058b8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005854:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005858:	d005      	beq.n	8005866 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585e:	3301      	adds	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <tcp_process_refused_data+0x98>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6918      	ldr	r0, [r3, #16]
 800587a:	2300      	movs	r3, #0
 800587c:	2200      	movs	r2, #0
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	47a0      	blx	r4
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
 8005886:	e001      	b.n	800588c <tcp_process_refused_data+0x9c>
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800588c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005890:	f113 0f0d 	cmn.w	r3, #13
 8005894:	d110      	bne.n	80058b8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8005896:	f06f 030c 	mvn.w	r3, #12
 800589a:	e00e      	b.n	80058ba <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800589c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058a0:	f113 0f0d 	cmn.w	r3, #13
 80058a4:	d102      	bne.n	80058ac <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80058a6:	f06f 030c 	mvn.w	r3, #12
 80058aa:	e006      	b.n	80058ba <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 80058b2:	f06f 0304 	mvn.w	r3, #4
 80058b6:	e000      	b.n	80058ba <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}

080058c2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80058ca:	e007      	b.n	80058dc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f80a 	bl	80058ec <tcp_seg_free>
    seg = next;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f4      	bne.n	80058cc <tcp_segs_free+0xa>
  }
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00c      	beq.n	8005914 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff f88a 	bl	8004a20 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	2003      	movs	r0, #3
 8005910:	f7fe fc82 	bl	8004218 <memp_free>
  }
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005924:	2003      	movs	r0, #3
 8005926:	f7fe fc47 	bl	80041b8 <memp_malloc>
 800592a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <tcp_seg_copy+0x1a>
    return NULL;
 8005932:	2300      	movs	r3, #0
 8005934:	e00a      	b.n	800594c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005936:	2210      	movs	r2, #16
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f005 fc68 	bl	800b210 <memcpy>
  pbuf_ref(cseg->p);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff f8d3 	bl	8004af0 <pbuf_ref>
  return cseg;
 800594a:	68fb      	ldr	r3, [r7, #12]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	891b      	ldrh	r3, [r3, #8]
 800596c:	4619      	mov	r1, r3
 800596e:	68b8      	ldr	r0, [r7, #8]
 8005970:	f7ff fc6a 	bl	8005248 <tcp_recved>
    pbuf_free(p);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff f853 	bl	8004a20 <pbuf_free>
 800597a:	e008      	b.n	800598e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800597c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8005984:	68b8      	ldr	r0, [r7, #8]
 8005986:	f7ff fb5f 	bl	8005048 <tcp_close>
 800598a:	4603      	mov	r3, r0
 800598c:	e000      	b.n	8005990 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	db01      	blt.n	80059ae <tcp_kill_prio+0x16>
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	e000      	b.n	80059b0 <tcp_kill_prio+0x18>
 80059ae:	237f      	movs	r3, #127	@ 0x7f
 80059b0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80059ba:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <tcp_kill_prio+0x7c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e01a      	b.n	80059f8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	7d5b      	ldrb	r3, [r3, #21]
 80059c6:	7afa      	ldrb	r2, [r7, #11]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d312      	bcc.n	80059f2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80059cc:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <tcp_kill_prio+0x80>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d80a      	bhi.n	80059f2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80059dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <tcp_kill_prio+0x80>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	7d5b      	ldrb	r3, [r3, #21]
 80059f0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e1      	bne.n	80059c2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7ff fbd5 	bl	80051b4 <tcp_abort>
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20006708 	.word	0x20006708
 8005a18:	200066fc 	.word	0x200066fc

08005a1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a2e:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <tcp_kill_state+0x68>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e017      	b.n	8005a66 <tcp_kill_state+0x4a>
    if (pcb->state == state) {
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	7d1b      	ldrb	r3, [r3, #20]
 8005a3a:	79fa      	ldrb	r2, [r7, #7]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d10f      	bne.n	8005a60 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005a40:	4b11      	ldr	r3, [pc, #68]	@ (8005a88 <tcp_kill_state+0x6c>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d807      	bhi.n	8005a60 <tcp_kill_state+0x44>
        inactivity = tcp_ticks - pcb->tmr;
 8005a50:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <tcp_kill_state+0x6c>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e4      	bne.n	8005a36 <tcp_kill_state+0x1a>
      }
    }
  }
  if (inactive != NULL) {
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <tcp_kill_state+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005a72:	2100      	movs	r1, #0
 8005a74:	6938      	ldr	r0, [r7, #16]
 8005a76:	f7ff faff 	bl	8005078 <tcp_abandon>
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20006708 	.word	0x20006708
 8005a88:	200066fc 	.word	0x200066fc

08005a8c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <tcp_kill_timewait+0x58>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e012      	b.n	8005ac8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005aa2:	4b11      	ldr	r3, [pc, #68]	@ (8005ae8 <tcp_kill_timewait+0x5c>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d807      	bhi.n	8005ac2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <tcp_kill_timewait+0x5c>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e9      	bne.n	8005aa2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005ad4:	68b8      	ldr	r0, [r7, #8]
 8005ad6:	f7ff fb6d 	bl	80051b4 <tcp_abort>
  }
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000670c 	.word	0x2000670c
 8005ae8:	200066fc 	.word	0x200066fc

08005aec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  u32_t iss;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005af6:	2001      	movs	r0, #1
 8005af8:	f7fe fb5e 	bl	80041b8 <memp_malloc>
 8005afc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d124      	bne.n	8005b4e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8005b04:	f7ff ffc2 	bl	8005a8c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b08:	2001      	movs	r0, #1
 8005b0a:	f7fe fb55 	bl	80041b8 <memp_malloc>
 8005b0e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11b      	bne.n	8005b4e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8005b16:	2009      	movs	r0, #9
 8005b18:	f7ff ff80 	bl	8005a1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7fe fb4b 	bl	80041b8 <memp_malloc>
 8005b22:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d111      	bne.n	8005b4e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8005b2a:	2008      	movs	r0, #8
 8005b2c:	f7ff ff76 	bl	8005a1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7fe fb41 	bl	80041b8 <memp_malloc>
 8005b36:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ff29 	bl	8005998 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b46:	2001      	movs	r0, #1
 8005b48:	f7fe fb36 	bl	80041b8 <memp_malloc>
 8005b4c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d049      	beq.n	8005be8 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005b54:	2298      	movs	r2, #152	@ 0x98
 8005b56:	2100      	movs	r1, #0
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f005 fb1a 	bl	800b192 <memset>
    pcb->prio = prio;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	79fa      	ldrb	r2, [r7, #7]
 8005b62:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8005b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	22ff      	movs	r2, #255	@ 0xff
 8005b82:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8005b8a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2206      	movs	r2, #6
 8005b90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2206      	movs	r2, #6
 8005b98:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ba0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    iss = tcp_next_iss();
 8005baa:	f000 f8b9 	bl	8005d20 <tcp_next_iss>
 8005bae:	60b8      	str	r0, [r7, #8]
    pcb->snd_wl2 = iss;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    pcb->snd_nxt = iss;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	64da      	str	r2, [r3, #76]	@ 0x4c
    pcb->lastack = iss;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    pcb->snd_lbb = iss;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	659a      	str	r2, [r3, #88]	@ 0x58
    pcb->tmr = tcp_ticks;
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <tcp_alloc+0x108>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005bd0:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <tcp_alloc+0x10c>)
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	775a      	strb	r2, [r3, #29]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <tcp_alloc+0x110>)
 8005bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a07      	ldr	r2, [pc, #28]	@ (8005c00 <tcp_alloc+0x114>)
 8005be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005be8:	68fb      	ldr	r3, [r7, #12]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200066fc 	.word	0x200066fc
 8005bf8:	20006712 	.word	0x20006712
 8005bfc:	08005955 	.word	0x08005955
 8005c00:	006ddd00 	.word	0x006ddd00

08005c04 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	7d1b      	ldrb	r3, [r3, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d034      	beq.n	8005c7e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8005c18:	2b0a      	cmp	r3, #10
 8005c1a:	d030      	beq.n	8005c7e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d02c      	beq.n	8005c7e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fef5 	bl	8004a20 <pbuf_free>
      pcb->refused_data = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fe3e 	bl	80058c2 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c52:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fe32 	bl	80058c2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fe2d 	bl	80058c2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	669a      	str	r2, [r3, #104]	@ 0x68
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d105      	bne.n	8005ca6 <tcp_pcb_remove+0x20>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e013      	b.n	8005cce <tcp_pcb_remove+0x48>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e00c      	b.n	8005cc8 <tcp_pcb_remove+0x42>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d104      	bne.n	8005cc2 <tcp_pcb_remove+0x3c>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	60da      	str	r2, [r3, #12]
 8005cc0:	e005      	b.n	8005cce <tcp_pcb_remove+0x48>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ef      	bne.n	8005cae <tcp_pcb_remove+0x28>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005cd4:	6838      	ldr	r0, [r7, #0]
 8005cd6:	f7ff ff95 	bl	8005c04 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	7d1b      	ldrb	r3, [r3, #20]
 8005cde:	2b0a      	cmp	r3, #10
 8005ce0:	d013      	beq.n	8005d0a <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d00f      	beq.n	8005d0a <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	7e9b      	ldrb	r3, [r3, #26]
 8005cee:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	7e9b      	ldrb	r3, [r3, #26]
 8005cfa:	f043 0302 	orr.w	r3, r3, #2
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005d04:	6838      	ldr	r0, [r7, #0]
 8005d06:	f002 fad5 	bl	80082b4 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;

  iss += tcp_ticks;       /* XXX */
 8005d24:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <tcp_next_iss+0x20>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <tcp_next_iss+0x24>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	4a04      	ldr	r2, [pc, #16]	@ (8005d40 <tcp_next_iss+0x20>)
 8005d30:	6013      	str	r3, [r2, #0]
  return iss;
 8005d32:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <tcp_next_iss+0x20>)
 8005d34:	681b      	ldr	r3, [r3, #0]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000004 	.word	0x20000004
 8005d44:	200066fc 	.word	0x200066fc

08005d48 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8005d54:	6838      	ldr	r0, [r7, #0]
 8005d56:	f004 fa1d 	bl	800a194 <ip4_route>
 8005d5a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	e010      	b.n	8005d88 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005d6a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005d6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	3b28      	subs	r3, #40	@ 0x28
 8005d78:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005d7a:	893a      	ldrh	r2, [r7, #8]
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	bf28      	it	cs
 8005d82:	4613      	movcs	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8005d86:	88fb      	ldrh	r3, [r7, #6]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005d9e:	e011      	b.n	8005dc4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d108      	bne.n	8005dbe <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff f9fe 	bl	80051b4 <tcp_abort>
      pcb = next;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e002      	b.n	8005dc4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ea      	bne.n	8005da0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02c      	beq.n	8005e3e <tcp_netif_ip_addr_changed+0x6a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d028      	beq.n	8005e3e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005dec:	4b16      	ldr	r3, [pc, #88]	@ (8005e48 <tcp_netif_ip_addr_changed+0x74>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ffcc 	bl	8005d90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005df8:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <tcp_netif_ip_addr_changed+0x78>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ffc6 	bl	8005d90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <tcp_netif_ip_addr_changed+0x6a>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d015      	beq.n	8005e3e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005e12:	4b0f      	ldr	r3, [pc, #60]	@ (8005e50 <tcp_netif_ip_addr_changed+0x7c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e00e      	b.n	8005e38 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d103      	bne.n	8005e34 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1ed      	bne.n	8005e1a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20006708 	.word	0x20006708
 8005e4c:	20006700 	.word	0x20006700
 8005e50:	20006704 	.word	0x20006704

08005e54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005e54:	b590      	push	{r4, r7, lr}
 8005e56:	b08b      	sub	sp, #44	@ 0x2c
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4a8f      	ldr	r2, [pc, #572]	@ (80060a0 <tcp_input+0x24c>)
 8005e64:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	895b      	ldrh	r3, [r3, #10]
 8005e6a:	2b13      	cmp	r3, #19
 8005e6c:	f240 8312 	bls.w	8006494 <tcp_input+0x640>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005e70:	4b8c      	ldr	r3, [pc, #560]	@ (80060a4 <tcp_input+0x250>)
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	4a8b      	ldr	r2, [pc, #556]	@ (80060a4 <tcp_input+0x250>)
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f004 fbde 	bl	800a63c <ip4_addr_isbroadcast_u32>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 8308 	bne.w	8006498 <tcp_input+0x644>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005e88:	4b86      	ldr	r3, [pc, #536]	@ (80060a4 <tcp_input+0x250>)
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005e90:	2be0      	cmp	r3, #224	@ 0xe0
 8005e92:	f000 8301 	beq.w	8006498 <tcp_input+0x644>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005e96:	4b82      	ldr	r3, [pc, #520]	@ (80060a0 <tcp_input+0x24c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	899b      	ldrh	r3, [r3, #12]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fd febd 	bl	8003c1e <lwip_htons>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	0b1b      	lsrs	r3, r3, #12
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005eb0:	7cbb      	ldrb	r3, [r7, #18]
 8005eb2:	2b13      	cmp	r3, #19
 8005eb4:	f240 82f2 	bls.w	800649c <tcp_input+0x648>
 8005eb8:	7cbb      	ldrb	r3, [r7, #18]
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	891b      	ldrh	r3, [r3, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	f200 82eb 	bhi.w	800649c <tcp_input+0x648>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005ec6:	7cbb      	ldrb	r3, [r7, #18]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b14      	subs	r3, #20
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	4b76      	ldr	r3, [pc, #472]	@ (80060a8 <tcp_input+0x254>)
 8005ed0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8005ed2:	4b76      	ldr	r3, [pc, #472]	@ (80060ac <tcp_input+0x258>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	895a      	ldrh	r2, [r3, #10]
 8005edc:	7cbb      	ldrb	r3, [r7, #18]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d30d      	bcc.n	8005f00 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8005ee4:	4b70      	ldr	r3, [pc, #448]	@ (80060a8 <tcp_input+0x254>)
 8005ee6:	881a      	ldrh	r2, [r3, #0]
 8005ee8:	4b71      	ldr	r3, [pc, #452]	@ (80060b0 <tcp_input+0x25c>)
 8005eea:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005eec:	7cbb      	ldrb	r3, [r7, #18]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	b21b      	sxth	r3, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fe fd6d 	bl	80049d8 <pbuf_header>
 8005efe:	e034      	b.n	8005f6a <tcp_input+0x116>
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8005f00:	f06f 0113 	mvn.w	r1, #19
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fe fd67 	bl	80049d8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	895a      	ldrh	r2, [r3, #10]
 8005f0e:	4b68      	ldr	r3, [pc, #416]	@ (80060b0 <tcp_input+0x25c>)
 8005f10:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005f12:	4b65      	ldr	r3, [pc, #404]	@ (80060a8 <tcp_input+0x254>)
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	4b66      	ldr	r3, [pc, #408]	@ (80060b0 <tcp_input+0x25c>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8005f1e:	4b64      	ldr	r3, [pc, #400]	@ (80060b0 <tcp_input+0x25c>)
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	425b      	negs	r3, r3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fe fd54 	bl	80049d8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	895b      	ldrh	r3, [r3, #10]
 8005f36:	8a3a      	ldrh	r2, [r7, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	f200 82b1 	bhi.w	80064a0 <tcp_input+0x64c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a59      	ldr	r2, [pc, #356]	@ (80060ac <tcp_input+0x258>)
 8005f46:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	8a3b      	ldrh	r3, [r7, #16]
 8005f4e:	425b      	negs	r3, r3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f7fe fd3e 	bl	80049d8 <pbuf_header>
    p->tot_len -= opt2len;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	891a      	ldrh	r2, [r3, #8]
 8005f60:	8a3b      	ldrh	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80060a0 <tcp_input+0x24c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	4a4b      	ldr	r2, [pc, #300]	@ (80060a0 <tcp_input+0x24c>)
 8005f74:	6814      	ldr	r4, [r2, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fd fe51 	bl	8003c1e <lwip_htons>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005f80:	4b47      	ldr	r3, [pc, #284]	@ (80060a0 <tcp_input+0x24c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	885b      	ldrh	r3, [r3, #2]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4a45      	ldr	r2, [pc, #276]	@ (80060a0 <tcp_input+0x24c>)
 8005f8a:	6814      	ldr	r4, [r2, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fd fe46 	bl	8003c1e <lwip_htons>
 8005f92:	4603      	mov	r3, r0
 8005f94:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f96:	4b42      	ldr	r3, [pc, #264]	@ (80060a0 <tcp_input+0x24c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a40      	ldr	r2, [pc, #256]	@ (80060a0 <tcp_input+0x24c>)
 8005f9e:	6814      	ldr	r4, [r2, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fd fe51 	bl	8003c48 <lwip_htonl>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	4a41      	ldr	r2, [pc, #260]	@ (80060b4 <tcp_input+0x260>)
 8005fae:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80060a0 <tcp_input+0x24c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80060a0 <tcp_input+0x24c>)
 8005fb8:	6814      	ldr	r4, [r2, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fd fe44 	bl	8003c48 <lwip_htonl>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	60a3      	str	r3, [r4, #8]
 8005fc4:	68a3      	ldr	r3, [r4, #8]
 8005fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80060b8 <tcp_input+0x264>)
 8005fc8:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005fca:	4b35      	ldr	r3, [pc, #212]	@ (80060a0 <tcp_input+0x24c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	89db      	ldrh	r3, [r3, #14]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4a33      	ldr	r2, [pc, #204]	@ (80060a0 <tcp_input+0x24c>)
 8005fd4:	6814      	ldr	r4, [r2, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fd fe21 	bl	8003c1e <lwip_htons>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80060a0 <tcp_input+0x24c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	899b      	ldrh	r3, [r3, #12]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fd fe18 	bl	8003c1e <lwip_htons>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	4b30      	ldr	r3, [pc, #192]	@ (80060bc <tcp_input+0x268>)
 8005ffa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	891b      	ldrh	r3, [r3, #8]
 8006000:	4a2e      	ldr	r2, [pc, #184]	@ (80060bc <tcp_input+0x268>)
 8006002:	7812      	ldrb	r2, [r2, #0]
 8006004:	f002 0203 	and.w	r2, r2, #3
 8006008:	2a00      	cmp	r2, #0
 800600a:	bf14      	ite	ne
 800600c:	2201      	movne	r2, #1
 800600e:	2200      	moveq	r2, #0
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	4413      	add	r3, r2
 8006014:	b29a      	uxth	r2, r3
 8006016:	4b2a      	ldr	r3, [pc, #168]	@ (80060c0 <tcp_input+0x26c>)
 8006018:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800601e:	4b29      	ldr	r3, [pc, #164]	@ (80060c4 <tcp_input+0x270>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e02f      	b.n	8006086 <tcp_input+0x232>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	8b1a      	ldrh	r2, [r3, #24]
 800602a:	4b1d      	ldr	r3, [pc, #116]	@ (80060a0 <tcp_input+0x24c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	429a      	cmp	r2, r3
 8006034:	d122      	bne.n	800607c <tcp_input+0x228>
        pcb->local_port == tcphdr->dest &&
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	8ada      	ldrh	r2, [r3, #22]
 800603a:	4b19      	ldr	r3, [pc, #100]	@ (80060a0 <tcp_input+0x24c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	885b      	ldrh	r3, [r3, #2]
 8006040:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006042:	429a      	cmp	r2, r3
 8006044:	d11a      	bne.n	800607c <tcp_input+0x228>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <tcp_input+0x250>)
 800604c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800604e:	429a      	cmp	r2, r3
 8006050:	d114      	bne.n	800607c <tcp_input+0x228>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <tcp_input+0x250>)
 8006058:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800605a:	429a      	cmp	r2, r3
 800605c:	d10e      	bne.n	800607c <tcp_input+0x228>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d014      	beq.n	800608e <tcp_input+0x23a>
        prev->next = pcb->next;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800606c:	4b15      	ldr	r3, [pc, #84]	@ (80060c4 <tcp_input+0x270>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006074:	4a13      	ldr	r2, [pc, #76]	@ (80060c4 <tcp_input+0x270>)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 800607a:	e008      	b.n	800608e <tcp_input+0x23a>
    }
    prev = pcb;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1cc      	bne.n	8006026 <tcp_input+0x1d2>
 800608c:	e000      	b.n	8006090 <tcp_input+0x23c>
      break;
 800608e:	bf00      	nop
  }

  if (pcb == NULL) {
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 8080 	bne.w	8006198 <tcp_input+0x344>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <tcp_input+0x274>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e03b      	b.n	8006118 <tcp_input+0x2c4>
 80060a0:	20006724 	.word	0x20006724
 80060a4:	200031a0 	.word	0x200031a0
 80060a8:	20006728 	.word	0x20006728
 80060ac:	2000672c 	.word	0x2000672c
 80060b0:	2000672a 	.word	0x2000672a
 80060b4:	20006734 	.word	0x20006734
 80060b8:	20006738 	.word	0x20006738
 80060bc:	20006740 	.word	0x20006740
 80060c0:	2000673e 	.word	0x2000673e
 80060c4:	20006708 	.word	0x20006708
 80060c8:	2000670c 	.word	0x2000670c
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	8b1a      	ldrh	r2, [r3, #24]
 80060d0:	4b91      	ldr	r3, [pc, #580]	@ (8006318 <tcp_input+0x4c4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	429a      	cmp	r2, r3
 80060da:	d11a      	bne.n	8006112 <tcp_input+0x2be>
          pcb->local_port == tcphdr->dest &&
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	8ada      	ldrh	r2, [r3, #22]
 80060e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006318 <tcp_input+0x4c4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d112      	bne.n	8006112 <tcp_input+0x2be>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b8a      	ldr	r3, [pc, #552]	@ (800631c <tcp_input+0x4c8>)
 80060f2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d10c      	bne.n	8006112 <tcp_input+0x2be>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b87      	ldr	r3, [pc, #540]	@ (800631c <tcp_input+0x4c8>)
 80060fe:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006100:	429a      	cmp	r2, r3
 8006102:	d106      	bne.n	8006112 <tcp_input+0x2be>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006104:	69f8      	ldr	r0, [r7, #28]
 8006106:	f000 fac3 	bl	8006690 <tcp_timewait_input>
        pbuf_free(p);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fe fc88 	bl	8004a20 <pbuf_free>
        return;
 8006110:	e1cc      	b.n	80064ac <tcp_input+0x658>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1d6      	bne.n	80060cc <tcp_input+0x278>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006122:	4b7f      	ldr	r3, [pc, #508]	@ (8006320 <tcp_input+0x4cc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e019      	b.n	800615e <tcp_input+0x30a>
      if (lpcb->local_port == tcphdr->dest) {
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	8ada      	ldrh	r2, [r3, #22]
 800612e:	4b7a      	ldr	r3, [pc, #488]	@ (8006318 <tcp_input+0x4c4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	885b      	ldrh	r3, [r3, #2]
 8006134:	b29b      	uxth	r3, r3
 8006136:	429a      	cmp	r2, r3
 8006138:	d10c      	bne.n	8006154 <tcp_input+0x300>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b77      	ldr	r3, [pc, #476]	@ (800631c <tcp_input+0x4c8>)
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	429a      	cmp	r2, r3
 8006144:	d00f      	beq.n	8006166 <tcp_input+0x312>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00d      	beq.n	8006168 <tcp_input+0x314>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <tcp_input+0x314>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e2      	bne.n	800612a <tcp_input+0x2d6>
 8006164:	e000      	b.n	8006168 <tcp_input+0x314>
            break;
 8006166:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d014      	beq.n	8006198 <tcp_input+0x344>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <tcp_input+0x336>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800617c:	4b68      	ldr	r3, [pc, #416]	@ (8006320 <tcp_input+0x4cc>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006184:	4a66      	ldr	r2, [pc, #408]	@ (8006320 <tcp_input+0x4cc>)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800618a:	6978      	ldr	r0, [r7, #20]
 800618c:	f000 f9a6 	bl	80064dc <tcp_listen_input>
      pbuf_free(p);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fe fc45 	bl	8004a20 <pbuf_free>
      return;
 8006196:	e189      	b.n	80064ac <tcp_input+0x658>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8154 	beq.w	8006448 <tcp_input+0x5f4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80061a0:	4b60      	ldr	r3, [pc, #384]	@ (8006324 <tcp_input+0x4d0>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	891a      	ldrh	r2, [r3, #8]
 80061aa:	4b5e      	ldr	r3, [pc, #376]	@ (8006324 <tcp_input+0x4d0>)
 80061ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80061ae:	4a5d      	ldr	r2, [pc, #372]	@ (8006324 <tcp_input+0x4d0>)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80061b4:	4b58      	ldr	r3, [pc, #352]	@ (8006318 <tcp_input+0x4c4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006324 <tcp_input+0x4d0>)
 80061ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80061bc:	4b5a      	ldr	r3, [pc, #360]	@ (8006328 <tcp_input+0x4d4>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80061c2:	4b5a      	ldr	r3, [pc, #360]	@ (800632c <tcp_input+0x4d8>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80061c8:	4b59      	ldr	r3, [pc, #356]	@ (8006330 <tcp_input+0x4dc>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80061ce:	4b59      	ldr	r3, [pc, #356]	@ (8006334 <tcp_input+0x4e0>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d006      	beq.n	80061e8 <tcp_input+0x394>
      p->flags |= PBUF_FLAG_PUSH;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7b5b      	ldrb	r3, [r3, #13]
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <tcp_input+0x3be>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80061f0:	69f8      	ldr	r0, [r7, #28]
 80061f2:	f7ff fafd 	bl	80057f0 <tcp_process_refused_data>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f113 0f0d 	cmn.w	r3, #13
 80061fc:	f000 8108 	beq.w	8006410 <tcp_input+0x5bc>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <tcp_input+0x3be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006208:	4b4b      	ldr	r3, [pc, #300]	@ (8006338 <tcp_input+0x4e4>)
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 80ff 	bne.w	8006410 <tcp_input+0x5bc>
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
 8006212:	4a4a      	ldr	r2, [pc, #296]	@ (800633c <tcp_input+0x4e8>)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006218:	69f8      	ldr	r0, [r7, #28]
 800621a:	f000 faa1 	bl	8006760 <tcp_process>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006222:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006226:	f113 0f0d 	cmn.w	r3, #13
 800622a:	f000 80f3 	beq.w	8006414 <tcp_input+0x5c0>
      if (recv_flags & TF_RESET) {
 800622e:	4b3f      	ldr	r3, [pc, #252]	@ (800632c <tcp_input+0x4d8>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d016      	beq.n	8006268 <tcp_input+0x414>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <tcp_input+0x402>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	6912      	ldr	r2, [r2, #16]
 800624e:	f06f 010d 	mvn.w	r1, #13
 8006252:	4610      	mov	r0, r2
 8006254:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006256:	69f9      	ldr	r1, [r7, #28]
 8006258:	4839      	ldr	r0, [pc, #228]	@ (8006340 <tcp_input+0x4ec>)
 800625a:	f7ff fd14 	bl	8005c86 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800625e:	69f9      	ldr	r1, [r7, #28]
 8006260:	2001      	movs	r0, #1
 8006262:	f7fd ffd9 	bl	8004218 <memp_free>
 8006266:	e0dc      	b.n	8006422 <tcp_input+0x5ce>
      } else {
        err = ERR_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800626c:	4b30      	ldr	r3, [pc, #192]	@ (8006330 <tcp_input+0x4dc>)
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <tcp_input+0x458>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006274:	4b2e      	ldr	r3, [pc, #184]	@ (8006330 <tcp_input+0x4dc>)
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <tcp_input+0x442>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	6910      	ldr	r0, [r2, #16]
 800628a:	89fa      	ldrh	r2, [r7, #14]
 800628c:	69f9      	ldr	r1, [r7, #28]
 800628e:	4798      	blx	r3
 8006290:	4603      	mov	r3, r0
 8006292:	74fb      	strb	r3, [r7, #19]
 8006294:	e001      	b.n	800629a <tcp_input+0x446>
 8006296:	2300      	movs	r3, #0
 8006298:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800629a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800629e:	f113 0f0d 	cmn.w	r3, #13
 80062a2:	f000 80b9 	beq.w	8006418 <tcp_input+0x5c4>
              goto aborted;
            }
          }
          recv_acked = 0;
 80062a6:	4b22      	ldr	r3, [pc, #136]	@ (8006330 <tcp_input+0x4dc>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	801a      	strh	r2, [r3, #0]
        }
        if (recv_flags & TF_CLOSED) {
 80062ac:	4b1f      	ldr	r3, [pc, #124]	@ (800632c <tcp_input+0x4d8>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01c      	beq.n	80062f2 <tcp_input+0x49e>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	7e9b      	ldrb	r3, [r3, #26]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <tcp_input+0x48c>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <tcp_input+0x48c>
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	6912      	ldr	r2, [r2, #16]
 80062d8:	f06f 010e 	mvn.w	r1, #14
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	4817      	ldr	r0, [pc, #92]	@ (8006340 <tcp_input+0x4ec>)
 80062e4:	f7ff fccf 	bl	8005c86 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 80062e8:	69f9      	ldr	r1, [r7, #28]
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7fd ff94 	bl	8004218 <memp_free>
          goto aborted;
 80062f0:	e097      	b.n	8006422 <tcp_input+0x5ce>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <tcp_input+0x4d4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d04c      	beq.n	8006394 <tcp_input+0x540>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	7e9b      	ldrb	r3, [r3, #26]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01e      	beq.n	8006344 <tcp_input+0x4f0>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006306:	4b08      	ldr	r3, [pc, #32]	@ (8006328 <tcp_input+0x4d4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe fb88 	bl	8004a20 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006310:	69f8      	ldr	r0, [r7, #28]
 8006312:	f7fe ff4f 	bl	80051b4 <tcp_abort>
            goto aborted;
 8006316:	e084      	b.n	8006422 <tcp_input+0x5ce>
 8006318:	20006724 	.word	0x20006724
 800631c:	200031a0 	.word	0x200031a0
 8006320:	20006704 	.word	0x20006704
 8006324:	20006714 	.word	0x20006714
 8006328:	20006744 	.word	0x20006744
 800632c:	20006741 	.word	0x20006741
 8006330:	2000673c 	.word	0x2000673c
 8006334:	20006740 	.word	0x20006740
 8006338:	2000673e 	.word	0x2000673e
 800633c:	20006748 	.word	0x20006748
 8006340:	20006708 	.word	0x20006708
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <tcp_input+0x514>
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	6918      	ldr	r0, [r3, #16]
 8006358:	4b56      	ldr	r3, [pc, #344]	@ (80064b4 <tcp_input+0x660>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	69f9      	ldr	r1, [r7, #28]
 8006360:	47a0      	blx	r4
 8006362:	4603      	mov	r3, r0
 8006364:	74fb      	strb	r3, [r7, #19]
 8006366:	e008      	b.n	800637a <tcp_input+0x526>
 8006368:	4b52      	ldr	r3, [pc, #328]	@ (80064b4 <tcp_input+0x660>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	2300      	movs	r3, #0
 800636e:	69f9      	ldr	r1, [r7, #28]
 8006370:	2000      	movs	r0, #0
 8006372:	f7ff faef 	bl	8005954 <tcp_recv_null>
 8006376:	4603      	mov	r3, r0
 8006378:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800637a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800637e:	f113 0f0d 	cmn.w	r3, #13
 8006382:	d04b      	beq.n	800641c <tcp_input+0x5c8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <tcp_input+0x540>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800638c:	4b49      	ldr	r3, [pc, #292]	@ (80064b4 <tcp_input+0x660>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006394:	4b48      	ldr	r3, [pc, #288]	@ (80064b8 <tcp_input+0x664>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d030      	beq.n	8006402 <tcp_input+0x5ae>
          if (pcb->refused_data != NULL) {
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <tcp_input+0x568>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ac:	7b5a      	ldrb	r2, [r3, #13]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b2:	f042 0220 	orr.w	r2, r2, #32
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	735a      	strb	r2, [r3, #13]
 80063ba:	e022      	b.n	8006402 <tcp_input+0x5ae>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80063c4:	d005      	beq.n	80063d2 <tcp_input+0x57e>
              pcb->rcv_wnd++;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ca:	3301      	adds	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <tcp_input+0x5a0>
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	6918      	ldr	r0, [r3, #16]
 80063e6:	2300      	movs	r3, #0
 80063e8:	2200      	movs	r2, #0
 80063ea:	69f9      	ldr	r1, [r7, #28]
 80063ec:	47a0      	blx	r4
 80063ee:	4603      	mov	r3, r0
 80063f0:	74fb      	strb	r3, [r7, #19]
 80063f2:	e001      	b.n	80063f8 <tcp_input+0x5a4>
 80063f4:	2300      	movs	r3, #0
 80063f6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80063f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063fc:	f113 0f0d 	cmn.w	r3, #13
 8006400:	d00e      	beq.n	8006420 <tcp_input+0x5cc>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006402:	4b2e      	ldr	r3, [pc, #184]	@ (80064bc <tcp_input+0x668>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
 8006408:	69f8      	ldr	r0, [r7, #28]
 800640a:	f001 ff53 	bl	80082b4 <tcp_output>
 800640e:	e008      	b.n	8006422 <tcp_input+0x5ce>
        goto aborted;
 8006410:	bf00      	nop
 8006412:	e006      	b.n	8006422 <tcp_input+0x5ce>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006414:	bf00      	nop
 8006416:	e004      	b.n	8006422 <tcp_input+0x5ce>
              goto aborted;
 8006418:	bf00      	nop
 800641a:	e002      	b.n	8006422 <tcp_input+0x5ce>
            goto aborted;
 800641c:	bf00      	nop
 800641e:	e000      	b.n	8006422 <tcp_input+0x5ce>
              goto aborted;
 8006420:	bf00      	nop
    tcp_input_pcb = NULL;
 8006422:	4b26      	ldr	r3, [pc, #152]	@ (80064bc <tcp_input+0x668>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006428:	4b22      	ldr	r3, [pc, #136]	@ (80064b4 <tcp_input+0x660>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800642e:	4b24      	ldr	r3, [pc, #144]	@ (80064c0 <tcp_input+0x66c>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d039      	beq.n	80064aa <tcp_input+0x656>
    {
      pbuf_free(inseg.p);
 8006436:	4b22      	ldr	r3, [pc, #136]	@ (80064c0 <tcp_input+0x66c>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe faf0 	bl	8004a20 <pbuf_free>
      inseg.p = NULL;
 8006440:	4b1f      	ldr	r3, [pc, #124]	@ (80064c0 <tcp_input+0x66c>)
 8006442:	2200      	movs	r2, #0
 8006444:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006446:	e030      	b.n	80064aa <tcp_input+0x656>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006448:	4b1e      	ldr	r3, [pc, #120]	@ (80064c4 <tcp_input+0x670>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	899b      	ldrh	r3, [r3, #12]
 800644e:	b29b      	uxth	r3, r3
 8006450:	4618      	mov	r0, r3
 8006452:	f7fd fbe4 	bl	8003c1e <lwip_htons>
 8006456:	4603      	mov	r3, r0
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d115      	bne.n	800648c <tcp_input+0x638>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006460:	4b19      	ldr	r3, [pc, #100]	@ (80064c8 <tcp_input+0x674>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	4b19      	ldr	r3, [pc, #100]	@ (80064cc <tcp_input+0x678>)
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <tcp_input+0x67c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006470:	4b14      	ldr	r3, [pc, #80]	@ (80064c4 <tcp_input+0x670>)
 8006472:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006474:	885b      	ldrh	r3, [r3, #2]
 8006476:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006478:	4a12      	ldr	r2, [pc, #72]	@ (80064c4 <tcp_input+0x670>)
 800647a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800647c:	8812      	ldrh	r2, [r2, #0]
 800647e:	b292      	uxth	r2, r2
 8006480:	9201      	str	r2, [sp, #4]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <tcp_input+0x680>)
 8006486:	4a14      	ldr	r2, [pc, #80]	@ (80064d8 <tcp_input+0x684>)
 8006488:	f002 f942 	bl	8008710 <tcp_rst>
    pbuf_free(p);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fe fac7 	bl	8004a20 <pbuf_free>
  return;
 8006492:	e00a      	b.n	80064aa <tcp_input+0x656>
    goto dropped;
 8006494:	bf00      	nop
 8006496:	e004      	b.n	80064a2 <tcp_input+0x64e>
    goto dropped;
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <tcp_input+0x64e>
    goto dropped;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <tcp_input+0x64e>
      goto dropped;
 80064a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fe fabc 	bl	8004a20 <pbuf_free>
 80064a8:	e000      	b.n	80064ac <tcp_input+0x658>
  return;
 80064aa:	bf00      	nop
}
 80064ac:	3724      	adds	r7, #36	@ 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd90      	pop	{r4, r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20006744 	.word	0x20006744
 80064b8:	20006741 	.word	0x20006741
 80064bc:	20006748 	.word	0x20006748
 80064c0:	20006714 	.word	0x20006714
 80064c4:	20006724 	.word	0x20006724
 80064c8:	20006738 	.word	0x20006738
 80064cc:	2000673e 	.word	0x2000673e
 80064d0:	20006734 	.word	0x20006734
 80064d4:	200031b0 	.word	0x200031b0
 80064d8:	200031b4 	.word	0x200031b4

080064dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 80064e4:	4b60      	ldr	r3, [pc, #384]	@ (8006668 <tcp_listen_input+0x18c>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 80b4 	bne.w	800665a <tcp_listen_input+0x17e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80064f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006668 <tcp_listen_input+0x18c>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 0310 	and.w	r3, r3, #16
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d016      	beq.n	800652c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80064fe:	4b5b      	ldr	r3, [pc, #364]	@ (800666c <tcp_listen_input+0x190>)
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	4b5b      	ldr	r3, [pc, #364]	@ (8006670 <tcp_listen_input+0x194>)
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	4b5a      	ldr	r3, [pc, #360]	@ (8006674 <tcp_listen_input+0x198>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800650e:	4b5a      	ldr	r3, [pc, #360]	@ (8006678 <tcp_listen_input+0x19c>)
 8006510:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006512:	885b      	ldrh	r3, [r3, #2]
 8006514:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006516:	4a58      	ldr	r2, [pc, #352]	@ (8006678 <tcp_listen_input+0x19c>)
 8006518:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800651a:	8812      	ldrh	r2, [r2, #0]
 800651c:	b292      	uxth	r2, r2
 800651e:	9201      	str	r2, [sp, #4]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	4b56      	ldr	r3, [pc, #344]	@ (800667c <tcp_listen_input+0x1a0>)
 8006524:	4a56      	ldr	r2, [pc, #344]	@ (8006680 <tcp_listen_input+0x1a4>)
 8006526:	f002 f8f3 	bl	8008710 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800652a:	e098      	b.n	800665e <tcp_listen_input+0x182>
  } else if (flags & TCP_SYN) {
 800652c:	4b4e      	ldr	r3, [pc, #312]	@ (8006668 <tcp_listen_input+0x18c>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8092 	beq.w	800665e <tcp_listen_input+0x182>
    npcb = tcp_alloc(pcb->prio);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7d5b      	ldrb	r3, [r3, #21]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fad4 	bl	8005aec <tcp_alloc>
 8006544:	60f8      	str	r0, [r7, #12]
    if (npcb == NULL) {
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d114      	bne.n	8006576 <tcp_listen_input+0x9a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00e      	beq.n	8006570 <tcp_listen_input+0x94>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <tcp_listen_input+0x94>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6910      	ldr	r0, [r2, #16]
 8006562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006566:	2100      	movs	r1, #0
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
 800656c:	72bb      	strb	r3, [r7, #10]
      return;
 800656e:	e077      	b.n	8006660 <tcp_listen_input+0x184>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006570:	23f0      	movs	r3, #240	@ 0xf0
 8006572:	72bb      	strb	r3, [r7, #10]
      return;
 8006574:	e074      	b.n	8006660 <tcp_listen_input+0x184>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006576:	4b43      	ldr	r3, [pc, #268]	@ (8006684 <tcp_listen_input+0x1a8>)
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800657e:	4b41      	ldr	r3, [pc, #260]	@ (8006684 <tcp_listen_input+0x1a8>)
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	8ada      	ldrh	r2, [r3, #22]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800658e:	4b3a      	ldr	r3, [pc, #232]	@ (8006678 <tcp_listen_input+0x19c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2203      	movs	r2, #3
 800659e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80065a0:	4b34      	ldr	r3, [pc, #208]	@ (8006674 <tcp_listen_input+0x198>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80065b2:	4b30      	ldr	r3, [pc, #192]	@ (8006674 <tcp_listen_input+0x198>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1e5a      	subs	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	7a1b      	ldrb	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80065d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006688 <tcp_listen_input+0x1ac>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <tcp_listen_input+0x1ac>)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	f002 fac7 	bl	8008b78 <tcp_timer_needed>
 80065ea:	4b28      	ldr	r3, [pc, #160]	@ (800668c <tcp_listen_input+0x1b0>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f001 fbc9 	bl	8007d88 <tcp_parseopt>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 80065f6:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <tcp_listen_input+0x19c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	89db      	ldrh	r3, [r3, #14]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7ff fb8e 	bl	8005d48 <tcp_eff_send_mss_impl>
 800662c:	4603      	mov	r3, r0
 800662e:	461a      	mov	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006634:	2112      	movs	r1, #18
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f001 fd37 	bl	80080aa <tcp_enqueue_flags>
 800663c:	4603      	mov	r3, r0
 800663e:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8006640:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <tcp_listen_input+0x176>
      tcp_abandon(npcb, 0);
 8006648:	2100      	movs	r1, #0
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7fe fd14 	bl	8005078 <tcp_abandon>
      return;
 8006650:	e006      	b.n	8006660 <tcp_listen_input+0x184>
    tcp_output(npcb);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 fe2e 	bl	80082b4 <tcp_output>
  return;
 8006658:	e001      	b.n	800665e <tcp_listen_input+0x182>
    return;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <tcp_listen_input+0x184>
  return;
 800665e:	bf00      	nop
}
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20006740 	.word	0x20006740
 800666c:	20006738 	.word	0x20006738
 8006670:	2000673e 	.word	0x2000673e
 8006674:	20006734 	.word	0x20006734
 8006678:	20006724 	.word	0x20006724
 800667c:	200031b0 	.word	0x200031b0
 8006680:	200031b4 	.word	0x200031b4
 8006684:	200031a0 	.word	0x200031a0
 8006688:	20006708 	.word	0x20006708
 800668c:	20006710 	.word	0x20006710

08006690 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006698:	4b29      	ldr	r3, [pc, #164]	@ (8006740 <tcp_timewait_input+0xb0>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d146      	bne.n	8006732 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80066a4:	4b26      	ldr	r3, [pc, #152]	@ (8006740 <tcp_timewait_input+0xb0>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d027      	beq.n	8006700 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80066b0:	4b24      	ldr	r3, [pc, #144]	@ (8006744 <tcp_timewait_input+0xb4>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	db2a      	blt.n	8006714 <tcp_timewait_input+0x84>
 80066be:	4b21      	ldr	r3, [pc, #132]	@ (8006744 <tcp_timewait_input+0xb4>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80066ca:	440b      	add	r3, r1
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dc20      	bgt.n	8006714 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80066d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <tcp_timewait_input+0xb8>)
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	4b1d      	ldr	r3, [pc, #116]	@ (800674c <tcp_timewait_input+0xbc>)
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	4b19      	ldr	r3, [pc, #100]	@ (8006744 <tcp_timewait_input+0xb4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <tcp_timewait_input+0xc0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80066e6:	885b      	ldrh	r3, [r3, #2]
 80066e8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80066ea:	4a19      	ldr	r2, [pc, #100]	@ (8006750 <tcp_timewait_input+0xc0>)
 80066ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80066ee:	8812      	ldrh	r2, [r2, #0]
 80066f0:	b292      	uxth	r2, r2
 80066f2:	9201      	str	r2, [sp, #4]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4b17      	ldr	r3, [pc, #92]	@ (8006754 <tcp_timewait_input+0xc4>)
 80066f8:	4a17      	ldr	r2, [pc, #92]	@ (8006758 <tcp_timewait_input+0xc8>)
 80066fa:	f002 f809 	bl	8008710 <tcp_rst>
      return;
 80066fe:	e01b      	b.n	8006738 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8006700:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <tcp_timewait_input+0xb0>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800670c:	4b13      	ldr	r3, [pc, #76]	@ (800675c <tcp_timewait_input+0xcc>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006714:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <tcp_timewait_input+0xbc>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00c      	beq.n	8006736 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7e9b      	ldrb	r3, [r3, #26]
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	b2da      	uxtb	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 fdc2 	bl	80082b4 <tcp_output>
  }
  return;
 8006730:	e001      	b.n	8006736 <tcp_timewait_input+0xa6>
    return;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <tcp_timewait_input+0xa8>
  return;
 8006736:	bf00      	nop
}
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20006740 	.word	0x20006740
 8006744:	20006734 	.word	0x20006734
 8006748:	20006738 	.word	0x20006738
 800674c:	2000673e 	.word	0x2000673e
 8006750:	20006724 	.word	0x20006724
 8006754:	200031b0 	.word	0x200031b0
 8006758:	200031b4 	.word	0x200031b4
 800675c:	200066fc 	.word	0x200066fc

08006760 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	@ 0x28
 8006764:	af02      	add	r7, sp, #8
 8006766:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8006770:	4b9b      	ldr	r3, [pc, #620]	@ (80069e0 <tcp_process+0x280>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d043      	beq.n	8006804 <tcp_process+0xa4>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7d1b      	ldrb	r3, [r3, #20]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d108      	bne.n	8006796 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006788:	4b96      	ldr	r3, [pc, #600]	@ (80069e4 <tcp_process+0x284>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d123      	bne.n	80067d8 <tcp_process+0x78>
        acceptable = 1;
 8006790:	2301      	movs	r3, #1
 8006792:	76fb      	strb	r3, [r7, #27]
 8006794:	e020      	b.n	80067d8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800679a:	4b93      	ldr	r3, [pc, #588]	@ (80069e8 <tcp_process+0x288>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d102      	bne.n	80067a8 <tcp_process+0x48>
        acceptable = 1;
 80067a2:	2301      	movs	r3, #1
 80067a4:	76fb      	strb	r3, [r7, #27]
 80067a6:	e017      	b.n	80067d8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80067a8:	4b8f      	ldr	r3, [pc, #572]	@ (80069e8 <tcp_process+0x288>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	db10      	blt.n	80067d8 <tcp_process+0x78>
 80067b6:	4b8c      	ldr	r3, [pc, #560]	@ (80069e8 <tcp_process+0x288>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80067c2:	440b      	add	r3, r1
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	dc06      	bgt.n	80067d8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7e9b      	ldrb	r3, [r3, #26]
 80067ce:	f043 0302 	orr.w	r3, r3, #2
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80067d8:	7efb      	ldrb	r3, [r7, #27]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <tcp_process+0xa0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 80067de:	4b83      	ldr	r3, [pc, #524]	@ (80069ec <tcp_process+0x28c>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	f043 0308 	orr.w	r3, r3, #8
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	4b80      	ldr	r3, [pc, #512]	@ (80069ec <tcp_process+0x28c>)
 80067ea:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7e9b      	ldrb	r3, [r3, #26]
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80067fa:	f06f 030d 	mvn.w	r3, #13
 80067fe:	e322      	b.n	8006e46 <tcp_process+0x6e6>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	e320      	b.n	8006e46 <tcp_process+0x6e6>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006804:	4b76      	ldr	r3, [pc, #472]	@ (80069e0 <tcp_process+0x280>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <tcp_process+0xd2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	7d1b      	ldrb	r3, [r3, #20]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d00c      	beq.n	8006832 <tcp_process+0xd2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7d1b      	ldrb	r3, [r3, #20]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d008      	beq.n	8006832 <tcp_process+0xd2>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	7e9b      	ldrb	r3, [r3, #26]
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e309      	b.n	8006e46 <tcp_process+0x6e6>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7e9b      	ldrb	r3, [r3, #26]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <tcp_process+0xe6>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800683e:	4b6c      	ldr	r3, [pc, #432]	@ (80069f0 <tcp_process+0x290>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fa9a 	bl	8007d88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7d1b      	ldrb	r3, [r3, #20]
 8006858:	3b02      	subs	r3, #2
 800685a:	2b07      	cmp	r3, #7
 800685c:	f200 82e3 	bhi.w	8006e26 <tcp_process+0x6c6>
 8006860:	a201      	add	r2, pc, #4	@ (adr r2, 8006868 <tcp_process+0x108>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006889 	.word	0x08006889
 800686c:	08006a41 	.word	0x08006a41
 8006870:	08006b8d 	.word	0x08006b8d
 8006874:	08006bb7 	.word	0x08006bb7
 8006878:	08006cd5 	.word	0x08006cd5
 800687c:	08006b8d 	.word	0x08006b8d
 8006880:	08006d61 	.word	0x08006d61
 8006884:	08006df1 	.word	0x08006df1
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006888:	4b55      	ldr	r3, [pc, #340]	@ (80069e0 <tcp_process+0x280>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80b1 	beq.w	80069f8 <tcp_process+0x298>
 8006896:	4b52      	ldr	r3, [pc, #328]	@ (80069e0 <tcp_process+0x280>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80aa 	beq.w	80069f8 <tcp_process+0x298>
        && (ackno == pcb->lastack + 1)) {
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	4b4e      	ldr	r3, [pc, #312]	@ (80069e4 <tcp_process+0x284>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	f040 80a2 	bne.w	80069f8 <tcp_process+0x298>
      pcb->rcv_nxt = seqno + 1;
 80068b4:	4b4c      	ldr	r3, [pc, #304]	@ (80069e8 <tcp_process+0x288>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 80068c6:	4b47      	ldr	r3, [pc, #284]	@ (80069e4 <tcp_process+0x284>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80068ce:	4b49      	ldr	r3, [pc, #292]	@ (80069f4 <tcp_process+0x294>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	89db      	ldrh	r3, [r3, #14]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80068e8:	4b3f      	ldr	r3, [pc, #252]	@ (80069e8 <tcp_process+0x288>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	1e5a      	subs	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2204      	movs	r2, #4
 80068f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7ff fa20 	bl	8005d48 <tcp_eff_send_mss_impl>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	f241 121c 	movw	r2, #4380	@ 0x111c
 8006926:	429a      	cmp	r2, r3
 8006928:	bf38      	it	cc
 800692a:	461a      	movcc	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4293      	cmp	r3, r2
 8006934:	bf28      	it	cs
 8006936:	4613      	movcs	r3, r2
 8006938:	b29a      	uxth	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006954:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <tcp_process+0x20c>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006960:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
        pcb->unsent = rseg->next;
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	669a      	str	r2, [r3, #104]	@ 0x68
 800696a:	e003      	b.n	8006974 <tcp_process+0x214>
      } else {
        pcb->unacked = rseg->next;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8006974:	69f8      	ldr	r0, [r7, #28]
 8006976:	f7fe ffb9 	bl	80058ec <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <tcp_process+0x22c>
        pcb->rtime = -1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006988:	861a      	strh	r2, [r3, #48]	@ 0x30
 800698a:	e006      	b.n	800699a <tcp_process+0x23a>
      } else {
        pcb->rtime = 0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <tcp_process+0x25a>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6910      	ldr	r0, [r2, #16]
 80069ae:	2200      	movs	r2, #0
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	4798      	blx	r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	76bb      	strb	r3, [r7, #26]
 80069b8:	e001      	b.n	80069be <tcp_process+0x25e>
 80069ba:	2300      	movs	r3, #0
 80069bc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80069be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80069c2:	f113 0f0d 	cmn.w	r3, #13
 80069c6:	d102      	bne.n	80069ce <tcp_process+0x26e>
        return ERR_ABRT;
 80069c8:	f06f 030c 	mvn.w	r3, #12
 80069cc:	e23b      	b.n	8006e46 <tcp_process+0x6e6>
      }
      tcp_ack_now(pcb);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7e9b      	ldrb	r3, [r3, #26]
 80069d2:	f043 0302 	orr.w	r3, r3, #2
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	769a      	strb	r2, [r3, #26]
      /* Resend SYN immediately (don't wait for rto timeout) to establish
        connection faster */
      pcb->rtime = 0;
      tcp_rexmit_rto(pcb);
    }
    break;
 80069dc:	e225      	b.n	8006e2a <tcp_process+0x6ca>
 80069de:	bf00      	nop
 80069e0:	20006740 	.word	0x20006740
 80069e4:	20006738 	.word	0x20006738
 80069e8:	20006734 	.word	0x20006734
 80069ec:	20006741 	.word	0x20006741
 80069f0:	200066fc 	.word	0x200066fc
 80069f4:	20006724 	.word	0x20006724
    else if (flags & TCP_ACK) {
 80069f8:	4b99      	ldr	r3, [pc, #612]	@ (8006c60 <tcp_process+0x500>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8212 	beq.w	8006e2a <tcp_process+0x6ca>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a06:	4b97      	ldr	r3, [pc, #604]	@ (8006c64 <tcp_process+0x504>)
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	4b97      	ldr	r3, [pc, #604]	@ (8006c68 <tcp_process+0x508>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b96      	ldr	r3, [pc, #600]	@ (8006c6c <tcp_process+0x50c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006a16:	4b96      	ldr	r3, [pc, #600]	@ (8006c70 <tcp_process+0x510>)
 8006a18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a1a:	885b      	ldrh	r3, [r3, #2]
 8006a1c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006a1e:	4a94      	ldr	r2, [pc, #592]	@ (8006c70 <tcp_process+0x510>)
 8006a20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a22:	8812      	ldrh	r2, [r2, #0]
 8006a24:	b292      	uxth	r2, r2
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	4b92      	ldr	r3, [pc, #584]	@ (8006c74 <tcp_process+0x514>)
 8006a2c:	4a92      	ldr	r2, [pc, #584]	@ (8006c78 <tcp_process+0x518>)
 8006a2e:	f001 fe6f 	bl	8008710 <tcp_rst>
      pcb->rtime = 0;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	861a      	strh	r2, [r3, #48]	@ 0x30
      tcp_rexmit_rto(pcb);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fece 	bl	80087da <tcp_rexmit_rto>
    break;
 8006a3e:	e1f4      	b.n	8006e2a <tcp_process+0x6ca>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8006a40:	4b87      	ldr	r3, [pc, #540]	@ (8006c60 <tcp_process+0x500>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 808b 	beq.w	8006b64 <tcp_process+0x404>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006a4e:	4b85      	ldr	r3, [pc, #532]	@ (8006c64 <tcp_process+0x504>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	db6b      	blt.n	8006b36 <tcp_process+0x3d6>
 8006a5e:	4b81      	ldr	r3, [pc, #516]	@ (8006c64 <tcp_process+0x504>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dc64      	bgt.n	8006b36 <tcp_process+0x3d6>
        pcb->state = ESTABLISHED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
        if (pcb->listener == NULL) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <tcp_process+0x320>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8006a7a:	23fa      	movs	r3, #250	@ 0xfa
 8006a7c:	76bb      	strb	r3, [r7, #26]
 8006a7e:	e015      	b.n	8006aac <tcp_process+0x34c>
        } else
#endif
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00f      	beq.n	8006aa8 <tcp_process+0x348>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <tcp_process+0x348>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6910      	ldr	r0, [r2, #16]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	76bb      	strb	r3, [r7, #26]
 8006aa6:	e001      	b.n	8006aac <tcp_process+0x34c>
 8006aa8:	23f0      	movs	r3, #240	@ 0xf0
 8006aaa:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8006aac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <tcp_process+0x36a>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8006ab4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006ab8:	f113 0f0d 	cmn.w	r3, #13
 8006abc:	d002      	beq.n	8006ac4 <tcp_process+0x364>
            tcp_abort(pcb);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fe fb78 	bl	80051b4 <tcp_abort>
          }
          return ERR_ABRT;
 8006ac4:	f06f 030c 	mvn.w	r3, #12
 8006ac8:	e1bd      	b.n	8006e46 <tcp_process+0x6e6>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa42 	bl	8006f54 <tcp_receive>

        /* passive open: update initial ssthresh now that the correct window is
           known: if the remote side supports window scaling, the window sent
           with the initial SYN can be smaller than the one used later */
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8006adc:	4b67      	ldr	r3, [pc, #412]	@ (8006c7c <tcp_process+0x51c>)
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <tcp_process+0x390>
          recv_acked--;
 8006ae4:	4b65      	ldr	r3, [pc, #404]	@ (8006c7c <tcp_process+0x51c>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	4b63      	ldr	r3, [pc, #396]	@ (8006c7c <tcp_process+0x51c>)
 8006aee:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	bf38      	it	cc
 8006afe:	461a      	movcc	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4293      	cmp	r3, r2
 8006b08:	bf28      	it	cs
 8006b0a:	4613      	movcs	r3, r2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8006b14:	4b5a      	ldr	r3, [pc, #360]	@ (8006c80 <tcp_process+0x520>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d034      	beq.n	8006b8a <tcp_process+0x42a>
          tcp_ack_now(pcb);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	7e9b      	ldrb	r3, [r3, #26]
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2207      	movs	r2, #7
 8006b32:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8006b34:	e029      	b.n	8006b8a <tcp_process+0x42a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b36:	4b4b      	ldr	r3, [pc, #300]	@ (8006c64 <tcp_process+0x504>)
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c68 <tcp_process+0x508>)
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b4a      	ldr	r3, [pc, #296]	@ (8006c6c <tcp_process+0x50c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006b46:	4b4a      	ldr	r3, [pc, #296]	@ (8006c70 <tcp_process+0x510>)
 8006b48:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b4a:	885b      	ldrh	r3, [r3, #2]
 8006b4c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006b4e:	4a48      	ldr	r2, [pc, #288]	@ (8006c70 <tcp_process+0x510>)
 8006b50:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	b292      	uxth	r2, r2
 8006b56:	9201      	str	r2, [sp, #4]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4b46      	ldr	r3, [pc, #280]	@ (8006c74 <tcp_process+0x514>)
 8006b5c:	4a46      	ldr	r2, [pc, #280]	@ (8006c78 <tcp_process+0x518>)
 8006b5e:	f001 fdd7 	bl	8008710 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8006b62:	e164      	b.n	8006e2e <tcp_process+0x6ce>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006b64:	4b3e      	ldr	r3, [pc, #248]	@ (8006c60 <tcp_process+0x500>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 815e 	beq.w	8006e2e <tcp_process+0x6ce>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b76:	1e5a      	subs	r2, r3, #1
 8006b78:	4b3c      	ldr	r3, [pc, #240]	@ (8006c6c <tcp_process+0x50c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	f040 8156 	bne.w	8006e2e <tcp_process+0x6ce>
      tcp_rexmit(pcb);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fe5a 	bl	800883c <tcp_rexmit>
    break;
 8006b88:	e151      	b.n	8006e2e <tcp_process+0x6ce>
 8006b8a:	e150      	b.n	8006e2e <tcp_process+0x6ce>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f9e1 	bl	8006f54 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006b92:	4b3b      	ldr	r3, [pc, #236]	@ (8006c80 <tcp_process+0x520>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 8149 	beq.w	8006e32 <tcp_process+0x6d2>
      tcp_ack_now(pcb);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7e9b      	ldrb	r3, [r3, #26]
 8006ba4:	f043 0302 	orr.w	r3, r3, #2
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006bb4:	e13d      	b.n	8006e32 <tcp_process+0x6d2>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9cc 	bl	8006f54 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006bbc:	4b30      	ldr	r3, [pc, #192]	@ (8006c80 <tcp_process+0x520>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d06e      	beq.n	8006ca6 <tcp_process+0x546>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006bc8:	4b25      	ldr	r3, [pc, #148]	@ (8006c60 <tcp_process+0x500>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05d      	beq.n	8006c90 <tcp_process+0x530>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bd8:	4b22      	ldr	r3, [pc, #136]	@ (8006c64 <tcp_process+0x504>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d157      	bne.n	8006c90 <tcp_process+0x530>
          pcb->unsent == NULL) {
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d153      	bne.n	8006c90 <tcp_process+0x530>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7e9b      	ldrb	r3, [r3, #26]
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff f804 	bl	8005c04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006bfc:	4b21      	ldr	r3, [pc, #132]	@ (8006c84 <tcp_process+0x524>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d105      	bne.n	8006c12 <tcp_process+0x4b2>
 8006c06:	4b1f      	ldr	r3, [pc, #124]	@ (8006c84 <tcp_process+0x524>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <tcp_process+0x524>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e013      	b.n	8006c3a <tcp_process+0x4da>
 8006c12:	4b1c      	ldr	r3, [pc, #112]	@ (8006c84 <tcp_process+0x524>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e00c      	b.n	8006c34 <tcp_process+0x4d4>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d104      	bne.n	8006c2e <tcp_process+0x4ce>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	e005      	b.n	8006c3a <tcp_process+0x4da>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1ef      	bne.n	8006c1a <tcp_process+0x4ba>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	4b11      	ldr	r3, [pc, #68]	@ (8006c88 <tcp_process+0x528>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220a      	movs	r2, #10
 8006c4a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c8c <tcp_process+0x52c>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60da      	str	r2, [r3, #12]
 8006c54:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <tcp_process+0x52c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	f001 ff8d 	bl	8008b78 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8006c5e:	e0ea      	b.n	8006e36 <tcp_process+0x6d6>
 8006c60:	20006740 	.word	0x20006740
 8006c64:	20006738 	.word	0x20006738
 8006c68:	2000673e 	.word	0x2000673e
 8006c6c:	20006734 	.word	0x20006734
 8006c70:	20006724 	.word	0x20006724
 8006c74:	200031b0 	.word	0x200031b0
 8006c78:	200031b4 	.word	0x200031b4
 8006c7c:	2000673c 	.word	0x2000673c
 8006c80:	20006741 	.word	0x20006741
 8006c84:	20006708 	.word	0x20006708
 8006c88:	20006710 	.word	0x20006710
 8006c8c:	2000670c 	.word	0x2000670c
        tcp_ack_now(pcb);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7e9b      	ldrb	r3, [r3, #26]
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	751a      	strb	r2, [r3, #20]
    break;
 8006ca4:	e0c7      	b.n	8006e36 <tcp_process+0x6d6>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e50 <tcp_process+0x6f0>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80c1 	beq.w	8006e36 <tcp_process+0x6d6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cb8:	4b66      	ldr	r3, [pc, #408]	@ (8006e54 <tcp_process+0x6f4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f040 80ba 	bne.w	8006e36 <tcp_process+0x6d6>
               pcb->unsent == NULL) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 80b5 	bne.w	8006e36 <tcp_process+0x6d6>
      pcb->state = FIN_WAIT_2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2206      	movs	r2, #6
 8006cd0:	751a      	strb	r2, [r3, #20]
    break;
 8006cd2:	e0b0      	b.n	8006e36 <tcp_process+0x6d6>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f93d 	bl	8006f54 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006cda:	4b5f      	ldr	r3, [pc, #380]	@ (8006e58 <tcp_process+0x6f8>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80a9 	beq.w	8006e3a <tcp_process+0x6da>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7e9b      	ldrb	r3, [r3, #26]
 8006cec:	f043 0302 	orr.w	r3, r3, #2
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fe ff84 	bl	8005c04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006cfc:	4b57      	ldr	r3, [pc, #348]	@ (8006e5c <tcp_process+0x6fc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d105      	bne.n	8006d12 <tcp_process+0x5b2>
 8006d06:	4b55      	ldr	r3, [pc, #340]	@ (8006e5c <tcp_process+0x6fc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a53      	ldr	r2, [pc, #332]	@ (8006e5c <tcp_process+0x6fc>)
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e013      	b.n	8006d3a <tcp_process+0x5da>
 8006d12:	4b52      	ldr	r3, [pc, #328]	@ (8006e5c <tcp_process+0x6fc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	e00c      	b.n	8006d34 <tcp_process+0x5d4>
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d104      	bne.n	8006d2e <tcp_process+0x5ce>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	60da      	str	r2, [r3, #12]
 8006d2c:	e005      	b.n	8006d3a <tcp_process+0x5da>
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1ef      	bne.n	8006d1a <tcp_process+0x5ba>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	60da      	str	r2, [r3, #12]
 8006d40:	4b47      	ldr	r3, [pc, #284]	@ (8006e60 <tcp_process+0x700>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	220a      	movs	r2, #10
 8006d4a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006d4c:	4b45      	ldr	r3, [pc, #276]	@ (8006e64 <tcp_process+0x704>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]
 8006d54:	4a43      	ldr	r2, [pc, #268]	@ (8006e64 <tcp_process+0x704>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	f001 ff0d 	bl	8008b78 <tcp_timer_needed>
    }
    break;
 8006d5e:	e06c      	b.n	8006e3a <tcp_process+0x6da>
  case CLOSING:
    tcp_receive(pcb);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8f7 	bl	8006f54 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006d66:	4b3a      	ldr	r3, [pc, #232]	@ (8006e50 <tcp_process+0x6f0>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d065      	beq.n	8006e3e <tcp_process+0x6de>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d76:	4b37      	ldr	r3, [pc, #220]	@ (8006e54 <tcp_process+0x6f4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d15f      	bne.n	8006e3e <tcp_process+0x6de>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d15b      	bne.n	8006e3e <tcp_process+0x6de>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fe ff3c 	bl	8005c04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006d8c:	4b33      	ldr	r3, [pc, #204]	@ (8006e5c <tcp_process+0x6fc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d105      	bne.n	8006da2 <tcp_process+0x642>
 8006d96:	4b31      	ldr	r3, [pc, #196]	@ (8006e5c <tcp_process+0x6fc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e5c <tcp_process+0x6fc>)
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	e013      	b.n	8006dca <tcp_process+0x66a>
 8006da2:	4b2e      	ldr	r3, [pc, #184]	@ (8006e5c <tcp_process+0x6fc>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e00c      	b.n	8006dc4 <tcp_process+0x664>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d104      	bne.n	8006dbe <tcp_process+0x65e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	60da      	str	r2, [r3, #12]
 8006dbc:	e005      	b.n	8006dca <tcp_process+0x66a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1ef      	bne.n	8006daa <tcp_process+0x64a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	60da      	str	r2, [r3, #12]
 8006dd0:	4b23      	ldr	r3, [pc, #140]	@ (8006e60 <tcp_process+0x700>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	220a      	movs	r2, #10
 8006dda:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006ddc:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <tcp_process+0x704>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
 8006de4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e64 <tcp_process+0x704>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	f001 fec5 	bl	8008b78 <tcp_timer_needed>
    }
    break;
 8006dee:	e026      	b.n	8006e3e <tcp_process+0x6de>
  case LAST_ACK:
    tcp_receive(pcb);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f8af 	bl	8006f54 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006df6:	4b16      	ldr	r3, [pc, #88]	@ (8006e50 <tcp_process+0x6f0>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01f      	beq.n	8006e42 <tcp_process+0x6e2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <tcp_process+0x6f4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d119      	bne.n	8006e42 <tcp_process+0x6e2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d115      	bne.n	8006e42 <tcp_process+0x6e2>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8006e16:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <tcp_process+0x6f8>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f043 0310 	orr.w	r3, r3, #16
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	4b0d      	ldr	r3, [pc, #52]	@ (8006e58 <tcp_process+0x6f8>)
 8006e22:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006e24:	e00d      	b.n	8006e42 <tcp_process+0x6e2>
  default:
    break;
 8006e26:	bf00      	nop
 8006e28:	e00c      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e2a:	bf00      	nop
 8006e2c:	e00a      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e2e:	bf00      	nop
 8006e30:	e008      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e32:	bf00      	nop
 8006e34:	e006      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e36:	bf00      	nop
 8006e38:	e004      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e3a:	bf00      	nop
 8006e3c:	e002      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <tcp_process+0x6e4>
    break;
 8006e42:	bf00      	nop
  }
  return ERR_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20006740 	.word	0x20006740
 8006e54:	20006738 	.word	0x20006738
 8006e58:	20006741 	.word	0x20006741
 8006e5c:	20006708 	.word	0x20006708
 8006e60:	20006710 	.word	0x20006710
 8006e64:	2000670c 	.word	0x2000670c

08006e68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	899b      	ldrh	r3, [r3, #12]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fc fecf 	bl	8003c1e <lwip_htons>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d027      	beq.n	8006eda <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8006e8a:	6838      	ldr	r0, [r7, #0]
 8006e8c:	f7fe fd19 	bl	80058c2 <tcp_segs_free>
    next = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	e055      	b.n	8006f42 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	899b      	ldrh	r3, [r3, #12]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fc febd 	bl	8003c1e <lwip_htons>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	899b      	ldrh	r3, [r3, #12]
 8006eb4:	b29c      	uxth	r4, r3
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f7fc feb1 	bl	8003c1e <lwip_htons>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4322      	orrs	r2, r4
 8006ec6:	b292      	uxth	r2, r2
 8006ec8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7fe fd09 	bl	80058ec <tcp_seg_free>
    while (next &&
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00e      	beq.n	8006efe <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	891b      	ldrh	r3, [r3, #8]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <tcp_oos_insert_segment+0xe8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	441a      	add	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	8909      	ldrh	r1, [r1, #8]
 8006ef6:	440b      	add	r3, r1
 8006ef8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dacb      	bge.n	8006e96 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01e      	beq.n	8006f42 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	891b      	ldrh	r3, [r3, #8]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <tcp_oos_insert_segment+0xe8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	441a      	add	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	1ad3      	subs	r3, r2, r3
    if (next &&
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dd12      	ble.n	8006f42 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <tcp_oos_insert_segment+0xe8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	891b      	ldrh	r3, [r3, #8]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7fd fc6b 	bl	8004818 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	601a      	str	r2, [r3, #0]
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd90      	pop	{r4, r7, pc}
 8006f50:	20006734 	.word	0x20006734

08006f54 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8006f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f56:	b08d      	sub	sp, #52	@ 0x34
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61fb      	str	r3, [r7, #28]
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8006f60:	4b94      	ldr	r3, [pc, #592]	@ (80071b4 <tcp_receive+0x260>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 826f 	beq.w	800744c <tcp_receive+0x4f8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	4413      	add	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f82:	4b8d      	ldr	r3, [pc, #564]	@ (80071b8 <tcp_receive+0x264>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	db1b      	blt.n	8006fc4 <tcp_receive+0x70>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f90:	4b89      	ldr	r3, [pc, #548]	@ (80071b8 <tcp_receive+0x264>)
 8006f92:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d106      	bne.n	8006fa6 <tcp_receive+0x52>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f9c:	4b87      	ldr	r3, [pc, #540]	@ (80071bc <tcp_receive+0x268>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	db0e      	blt.n	8006fc4 <tcp_receive+0x70>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006faa:	4b84      	ldr	r3, [pc, #528]	@ (80071bc <tcp_receive+0x268>)
 8006fac:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d141      	bne.n	8007036 <tcp_receive+0xe2>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006fb2:	4b83      	ldr	r3, [pc, #524]	@ (80071c0 <tcp_receive+0x26c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	89db      	ldrh	r3, [r3, #14]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d938      	bls.n	8007036 <tcp_receive+0xe2>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80071c0 <tcp_receive+0x26c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	89db      	ldrh	r3, [r3, #14]
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d205      	bcs.n	8006fee <tcp_receive+0x9a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 8006fee:	4b72      	ldr	r3, [pc, #456]	@ (80071b8 <tcp_receive+0x264>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8006ff6:	4b71      	ldr	r3, [pc, #452]	@ (80071bc <tcp_receive+0x268>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10d      	bne.n	8007024 <tcp_receive+0xd0>
        if (pcb->persist_backoff == 0) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800700e:	2b00      	cmp	r3, #0
 8007010:	d111      	bne.n	8007036 <tcp_receive+0xe2>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8007022:	e008      	b.n	8007036 <tcp_receive+0xe2>
        }
      } else if (pcb->persist_backoff > 0) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <tcp_receive+0xe2>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007036:	4b61      	ldr	r3, [pc, #388]	@ (80071bc <tcp_receive+0x268>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc53      	bgt.n	80070ec <tcp_receive+0x198>
      /* Clause 2 */
      if (tcplen == 0) {
 8007044:	4b5f      	ldr	r3, [pc, #380]	@ (80071c4 <tcp_receive+0x270>)
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d146      	bne.n	80070da <tcp_receive+0x186>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007056:	4413      	add	r3, r2
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	429a      	cmp	r2, r3
 800705c:	d13d      	bne.n	80070da <tcp_receive+0x186>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007064:	2b00      	cmp	r3, #0
 8007066:	db38      	blt.n	80070da <tcp_receive+0x186>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706c:	4b53      	ldr	r3, [pc, #332]	@ (80071bc <tcp_receive+0x268>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d132      	bne.n	80070da <tcp_receive+0x186>
              found_dupack = 1;
 8007074:	2301      	movs	r3, #1
 8007076:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800707e:	2bff      	cmp	r3, #255	@ 0xff
 8007080:	d007      	beq.n	8007092 <tcp_receive+0x13e>
                ++pcb->dupacks;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007088:	3301      	adds	r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007098:	2b03      	cmp	r3, #3
 800709a:	d916      	bls.n	80070ca <tcp_receive+0x176>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070a6:	4413      	add	r3, r2
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d912      	bls.n	80070da <tcp_receive+0x186>
                  pcb->cwnd += pcb->mss;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070be:	4413      	add	r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80070c8:	e007      	b.n	80070da <tcp_receive+0x186>
                }
              } else if (pcb->dupacks == 3) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d102      	bne.n	80070da <tcp_receive+0x186>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 fbfc 	bl	80088d2 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8121 	bne.w	8007324 <tcp_receive+0x3d0>
        pcb->dupacks = 0;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070ea:	e11b      	b.n	8007324 <tcp_receive+0x3d0>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80070ec:	4b33      	ldr	r3, [pc, #204]	@ (80071bc <tcp_receive+0x268>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f2c0 80e0 	blt.w	80072be <tcp_receive+0x36a>
 80070fe:	4b2f      	ldr	r3, [pc, #188]	@ (80071bc <tcp_receive+0x268>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	f300 80d8 	bgt.w	80072be <tcp_receive+0x36a>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7e9b      	ldrb	r3, [r3, #26]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00c      	beq.n	8007134 <tcp_receive+0x1e0>
        pcb->flags &= ~TF_INFR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7e9b      	ldrb	r3, [r3, #26]
 800711e:	f023 0304 	bic.w	r3, r3, #4
 8007122:	b2da      	uxtb	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007142:	10db      	asrs	r3, r3, #3
 8007144:	b21b      	sxth	r3, r3
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800714e:	b29b      	uxth	r3, r3
 8007150:	4413      	add	r3, r2
 8007152:	b29b      	uxth	r3, r3
 8007154:	b21a      	sxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8007164:	4b15      	ldr	r3, [pc, #84]	@ (80071bc <tcp_receive+0x268>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7d1b      	ldrb	r3, [r3, #20]
 8007170:	2b03      	cmp	r3, #3
 8007172:	d96d      	bls.n	8007250 <tcp_receive+0x2fc>
        if (pcb->cwnd < pcb->ssthresh) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007180:	429a      	cmp	r2, r3
 8007182:	d221      	bcs.n	80071c8 <tcp_receive+0x274>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800718e:	4413      	add	r3, r2
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007198:	429a      	cmp	r2, r3
 800719a:	d959      	bls.n	8007250 <tcp_receive+0x2fc>
            pcb->cwnd += pcb->mss;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071a6:	4413      	add	r3, r2
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80071b0:	e04e      	b.n	8007250 <tcp_receive+0x2fc>
 80071b2:	bf00      	nop
 80071b4:	20006740 	.word	0x20006740
 80071b8:	20006734 	.word	0x20006734
 80071bc:	20006738 	.word	0x20006738
 80071c0:	20006724 	.word	0x20006724
 80071c4:	2000673e 	.word	0x2000673e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071d2:	4619      	mov	r1, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 80071e2:	fb93 f3f1 	sdiv	r3, r3, r1
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4413      	add	r3, r2
 80071ea:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80071f2:	8a7a      	ldrh	r2, [r7, #18]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d92b      	bls.n	8007250 <tcp_receive+0x2fc>
            pcb->cwnd = new_cwnd;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8a7a      	ldrh	r2, [r7, #18]
 80071fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8007200:	e026      	b.n	8007250 <tcp_receive+0x2fc>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4618      	mov	r0, r3
 8007218:	f7fd fc53 	bl	8004ac2 <pbuf_clen>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4618      	mov	r0, r3
 8007222:	f7fd fc4e 	bl	8004ac2 <pbuf_clen>
 8007226:	4603      	mov	r3, r0
 8007228:	461a      	mov	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	b29a      	uxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 800723a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723c:	891a      	ldrh	r2, [r3, #8]
 800723e:	4b4a      	ldr	r3, [pc, #296]	@ (8007368 <tcp_receive+0x414>)
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	4413      	add	r3, r2
 8007244:	b29a      	uxth	r2, r3
 8007246:	4b48      	ldr	r3, [pc, #288]	@ (8007368 <tcp_receive+0x414>)
 8007248:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800724a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800724c:	f7fe fb4e 	bl	80058ec <tcp_seg_free>
      while (pcb->unacked != NULL &&
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d022      	beq.n	800729e <tcp_receive+0x34a>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	f7fc fcf1 	bl	8003c48 <lwip_htonl>
 8007266:	4604      	mov	r4, r0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726c:	891b      	ldrh	r3, [r3, #8]
 800726e:	461d      	mov	r5, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	899b      	ldrh	r3, [r3, #12]
 8007278:	b29b      	uxth	r3, r3
 800727a:	4618      	mov	r0, r3
 800727c:	f7fc fccf 	bl	8003c1e <lwip_htons>
 8007280:	4603      	mov	r3, r0
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <tcp_receive+0x33a>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <tcp_receive+0x33c>
 800728e:	2300      	movs	r3, #0
 8007290:	442b      	add	r3, r5
 8007292:	18e2      	adds	r2, r4, r3
 8007294:	4b35      	ldr	r3, [pc, #212]	@ (800736c <tcp_receive+0x418>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800729a:	2b00      	cmp	r3, #0
 800729c:	ddb1      	ble.n	8007202 <tcp_receive+0x2ae>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d104      	bne.n	80072b0 <tcp_receive+0x35c>
        pcb->rtime = -1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072ac:	861a      	strh	r2, [r3, #48]	@ 0x30
 80072ae:	e002      	b.n	80072b6 <tcp_receive+0x362>
      } else {
        pcb->rtime = 0;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	76da      	strb	r2, [r3, #27]
 80072bc:	e002      	b.n	80072c4 <tcp_receive+0x370>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 ff9b 	bl	80081fa <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80072c4:	e02e      	b.n	8007324 <tcp_receive+0x3d0>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <tcp_receive+0x392>
        pcb->unsent_oversize = 0;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd fbe9 	bl	8004ac2 <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fd fbe4 	bl	8004ac2 <pbuf_clen>
 80072fa:	4603      	mov	r3, r0
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	891a      	ldrh	r2, [r3, #8]
 8007312:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <tcp_receive+0x414>)
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	4413      	add	r3, r2
 8007318:	b29a      	uxth	r2, r3
 800731a:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <tcp_receive+0x414>)
 800731c:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800731e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007320:	f7fe fae4 	bl	80058ec <tcp_seg_free>
    while (pcb->unsent != NULL &&
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007328:	2b00      	cmp	r3, #0
 800732a:	d02e      	beq.n	800738a <tcp_receive+0x436>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <tcp_receive+0x418>)
 800732e:	681c      	ldr	r4, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	f7fc fc85 	bl	8003c48 <lwip_htonl>
 800733e:	4605      	mov	r5, r0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007344:	891b      	ldrh	r3, [r3, #8]
 8007346:	461e      	mov	r6, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	899b      	ldrh	r3, [r3, #12]
 8007350:	b29b      	uxth	r3, r3
 8007352:	4618      	mov	r0, r3
 8007354:	f7fc fc63 	bl	8003c1e <lwip_htons>
 8007358:	4603      	mov	r3, r0
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d006      	beq.n	8007370 <tcp_receive+0x41c>
 8007362:	2301      	movs	r3, #1
 8007364:	e005      	b.n	8007372 <tcp_receive+0x41e>
 8007366:	bf00      	nop
 8007368:	2000673c 	.word	0x2000673c
 800736c:	20006738 	.word	0x20006738
 8007370:	2300      	movs	r3, #0
 8007372:	4433      	add	r3, r6
 8007374:	442b      	add	r3, r5
 8007376:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007378:	2b00      	cmp	r3, #0
 800737a:	db06      	blt.n	800738a <tcp_receive+0x436>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800737c:	4b8c      	ldr	r3, [pc, #560]	@ (80075b0 <tcp_receive+0x65c>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	dd9d      	ble.n	80072c6 <tcp_receive+0x372>
      if (pcb->snd_queuelen != 0) {
        LWIP_ASSERT("tcp_receive: valid queue length",
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007390:	4b88      	ldr	r3, [pc, #544]	@ (80075b4 <tcp_receive+0x660>)
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	4413      	add	r3, r2
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d052      	beq.n	800744c <tcp_receive+0x4f8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073aa:	4b81      	ldr	r3, [pc, #516]	@ (80075b0 <tcp_receive+0x65c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da4b      	bge.n	800744c <tcp_receive+0x4f8>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80073b4:	4b80      	ldr	r3, [pc, #512]	@ (80075b8 <tcp_receive+0x664>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073be:	b29b      	uxth	r3, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80073c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80073ce:	10db      	asrs	r3, r3, #3
 80073d0:	b21b      	sxth	r3, r3
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073e4:	4413      	add	r3, r2
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	b21a      	sxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80073ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da03      	bge.n	80073fe <tcp_receive+0x4aa>
        m = -m;
 80073f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073f8:	425b      	negs	r3, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 80073fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007406:	109b      	asrs	r3, r3, #2
 8007408:	b21b      	sxth	r3, r3
 800740a:	b29b      	uxth	r3, r3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	b29b      	uxth	r3, r3
 8007410:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007418:	b29a      	uxth	r2, r3
 800741a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800741c:	4413      	add	r3, r2
 800741e:	b29b      	uxth	r3, r3
 8007420:	b21a      	sxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800742c:	10db      	asrs	r3, r3, #3
 800742e:	b21b      	sxth	r3, r3
 8007430:	b29a      	uxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007438:	b29b      	uxth	r3, r3
 800743a:	4413      	add	r3, r2
 800743c:	b29b      	uxth	r3, r3
 800743e:	b21a      	sxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800744c:	4b5b      	ldr	r3, [pc, #364]	@ (80075bc <tcp_receive+0x668>)
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 843d 	beq.w	8007cd0 <tcp_receive+0xd7c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7d1b      	ldrb	r3, [r3, #20]
 800745a:	2b06      	cmp	r3, #6
 800745c:	f200 8438 	bhi.w	8007cd0 <tcp_receive+0xd7c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007464:	4b56      	ldr	r3, [pc, #344]	@ (80075c0 <tcp_receive+0x66c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	db65      	blt.n	800753c <tcp_receive+0x5e8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007474:	4b51      	ldr	r3, [pc, #324]	@ (80075bc <tcp_receive+0x668>)
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	4619      	mov	r1, r3
 800747a:	4b51      	ldr	r3, [pc, #324]	@ (80075c0 <tcp_receive+0x66c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	440b      	add	r3, r1
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	3301      	adds	r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	dc59      	bgt.n	800753c <tcp_receive+0x5e8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007488:	4b4e      	ldr	r3, [pc, #312]	@ (80075c4 <tcp_receive+0x670>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007492:	4b4b      	ldr	r3, [pc, #300]	@ (80075c0 <tcp_receive+0x66c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 800749a:	4b4a      	ldr	r3, [pc, #296]	@ (80075c4 <tcp_receive+0x670>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	895b      	ldrh	r3, [r3, #10]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	4293      	cmp	r3, r2
 80074a6:	dd26      	ble.n	80074f6 <tcp_receive+0x5a2>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80074a8:	4b46      	ldr	r3, [pc, #280]	@ (80075c4 <tcp_receive+0x670>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	891a      	ldrh	r2, [r3, #8]
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80074b6:	e00e      	b.n	80074d6 <tcp_receive+0x582>
          off -= p->len;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	895b      	ldrh	r3, [r3, #10]
 80074bc:	461a      	mov	r2, r3
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	8a3a      	ldrh	r2, [r7, #16]
 80074c8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2200      	movs	r2, #0
 80074ce:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	895b      	ldrh	r3, [r3, #10]
 80074da:	461a      	mov	r2, r3
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	4293      	cmp	r3, r2
 80074e0:	dcea      	bgt.n	80074b8 <tcp_receive+0x564>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	425b      	negs	r3, r3
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	b21b      	sxth	r3, r3
 80074ec:	4619      	mov	r1, r3
 80074ee:	69b8      	ldr	r0, [r7, #24]
 80074f0:	f7fd fa72 	bl	80049d8 <pbuf_header>
 80074f4:	e00a      	b.n	800750c <tcp_receive+0x5b8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80074f6:	4b33      	ldr	r3, [pc, #204]	@ (80075c4 <tcp_receive+0x670>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fc:	b292      	uxth	r2, r2
 80074fe:	4252      	negs	r2, r2
 8007500:	b292      	uxth	r2, r2
 8007502:	b212      	sxth	r2, r2
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd fa66 	bl	80049d8 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800750c:	4b2d      	ldr	r3, [pc, #180]	@ (80075c4 <tcp_receive+0x670>)
 800750e:	891a      	ldrh	r2, [r3, #8]
 8007510:	4b2b      	ldr	r3, [pc, #172]	@ (80075c0 <tcp_receive+0x66c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	b299      	uxth	r1, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	b29b      	uxth	r3, r3
 800751c:	1acb      	subs	r3, r1, r3
 800751e:	b29b      	uxth	r3, r3
 8007520:	4413      	add	r3, r2
 8007522:	b29a      	uxth	r2, r3
 8007524:	4b27      	ldr	r3, [pc, #156]	@ (80075c4 <tcp_receive+0x670>)
 8007526:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752c:	4a24      	ldr	r2, [pc, #144]	@ (80075c0 <tcp_receive+0x66c>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	4b24      	ldr	r3, [pc, #144]	@ (80075c4 <tcp_receive+0x670>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4a22      	ldr	r2, [pc, #136]	@ (80075c0 <tcp_receive+0x66c>)
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800753a:	e00d      	b.n	8007558 <tcp_receive+0x604>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800753c:	4b20      	ldr	r3, [pc, #128]	@ (80075c0 <tcp_receive+0x66c>)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	da06      	bge.n	8007558 <tcp_receive+0x604>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	7e9b      	ldrb	r3, [r3, #26]
 800754e:	f043 0302 	orr.w	r3, r3, #2
 8007552:	b2da      	uxtb	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007558:	4b19      	ldr	r3, [pc, #100]	@ (80075c0 <tcp_receive+0x66c>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	f2c0 83a8 	blt.w	8007cb8 <tcp_receive+0xd64>
 8007568:	4b15      	ldr	r3, [pc, #84]	@ (80075c0 <tcp_receive+0x66c>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007574:	440b      	add	r3, r1
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	3301      	adds	r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	f300 839c 	bgt.w	8007cb8 <tcp_receive+0xd64>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007584:	4b0e      	ldr	r3, [pc, #56]	@ (80075c0 <tcp_receive+0x66c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	f040 8232 	bne.w	80079f2 <tcp_receive+0xa9e>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <tcp_receive+0x670>)
 8007590:	891c      	ldrh	r4, [r3, #8]
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <tcp_receive+0x670>)
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	899b      	ldrh	r3, [r3, #12]
 8007598:	b29b      	uxth	r3, r3
 800759a:	4618      	mov	r0, r3
 800759c:	f7fc fb3f 	bl	8003c1e <lwip_htons>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <tcp_receive+0x674>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e00d      	b.n	80075ca <tcp_receive+0x676>
 80075ae:	bf00      	nop
 80075b0:	20006738 	.word	0x20006738
 80075b4:	2000673c 	.word	0x2000673c
 80075b8:	200066fc 	.word	0x200066fc
 80075bc:	2000673e 	.word	0x2000673e
 80075c0:	20006734 	.word	0x20006734
 80075c4:	20006714 	.word	0x20006714
 80075c8:	2300      	movs	r3, #0
 80075ca:	4423      	add	r3, r4
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	4b91      	ldr	r3, [pc, #580]	@ (8007814 <tcp_receive+0x8c0>)
 80075d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80075d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007814 <tcp_receive+0x8c0>)
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d25a      	bcs.n	8007694 <tcp_receive+0x740>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80075de:	4b8e      	ldr	r3, [pc, #568]	@ (8007818 <tcp_receive+0x8c4>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	899b      	ldrh	r3, [r3, #12]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fc fb19 	bl	8003c1e <lwip_htons>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01b      	beq.n	800762e <tcp_receive+0x6da>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80075f6:	4b88      	ldr	r3, [pc, #544]	@ (8007818 <tcp_receive+0x8c4>)
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	899b      	ldrh	r3, [r3, #12]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007602:	b29c      	uxth	r4, r3
 8007604:	4b84      	ldr	r3, [pc, #528]	@ (8007818 <tcp_receive+0x8c4>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	899b      	ldrh	r3, [r3, #12]
 800760a:	b29b      	uxth	r3, r3
 800760c:	4618      	mov	r0, r3
 800760e:	f7fc fb06 	bl	8003c1e <lwip_htons>
 8007612:	4603      	mov	r3, r0
 8007614:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	4618      	mov	r0, r3
 800761c:	f7fc faff 	bl	8003c1e <lwip_htons>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	4b7c      	ldr	r3, [pc, #496]	@ (8007818 <tcp_receive+0x8c4>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4322      	orrs	r2, r4
 800762a:	b292      	uxth	r2, r2
 800762c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007632:	4b79      	ldr	r3, [pc, #484]	@ (8007818 <tcp_receive+0x8c4>)
 8007634:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007636:	4b78      	ldr	r3, [pc, #480]	@ (8007818 <tcp_receive+0x8c4>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	899b      	ldrh	r3, [r3, #12]
 800763c:	b29b      	uxth	r3, r3
 800763e:	4618      	mov	r0, r3
 8007640:	f7fc faed 	bl	8003c1e <lwip_htons>
 8007644:	4603      	mov	r3, r0
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <tcp_receive+0x706>
            inseg.len -= 1;
 800764e:	4b72      	ldr	r3, [pc, #456]	@ (8007818 <tcp_receive+0x8c4>)
 8007650:	891b      	ldrh	r3, [r3, #8]
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	4b70      	ldr	r3, [pc, #448]	@ (8007818 <tcp_receive+0x8c4>)
 8007658:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800765a:	4b6f      	ldr	r3, [pc, #444]	@ (8007818 <tcp_receive+0x8c4>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4a6e      	ldr	r2, [pc, #440]	@ (8007818 <tcp_receive+0x8c4>)
 8007660:	8912      	ldrh	r2, [r2, #8]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd f8d7 	bl	8004818 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800766a:	4b6b      	ldr	r3, [pc, #428]	@ (8007818 <tcp_receive+0x8c4>)
 800766c:	891c      	ldrh	r4, [r3, #8]
 800766e:	4b6a      	ldr	r3, [pc, #424]	@ (8007818 <tcp_receive+0x8c4>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	899b      	ldrh	r3, [r3, #12]
 8007674:	b29b      	uxth	r3, r3
 8007676:	4618      	mov	r0, r3
 8007678:	f7fc fad1 	bl	8003c1e <lwip_htons>
 800767c:	4603      	mov	r3, r0
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <tcp_receive+0x736>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <tcp_receive+0x738>
 800768a:	2300      	movs	r3, #0
 800768c:	4423      	add	r3, r4
 800768e:	b29a      	uxth	r2, r3
 8007690:	4b60      	ldr	r3, [pc, #384]	@ (8007814 <tcp_receive+0x8c0>)
 8007692:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80c9 	beq.w	8007830 <tcp_receive+0x8dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800769e:	4b5e      	ldr	r3, [pc, #376]	@ (8007818 <tcp_receive+0x8c4>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	899b      	ldrh	r3, [r3, #12]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fc fab9 	bl	8003c1e <lwip_htons>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d010      	beq.n	80076d8 <tcp_receive+0x784>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80076b6:	e00a      	b.n	80076ce <tcp_receive+0x77a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076bc:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 80076c8:	68b8      	ldr	r0, [r7, #8]
 80076ca:	f7fe f90f 	bl	80058ec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f0      	bne.n	80076b8 <tcp_receive+0x764>
 80076d6:	e0ab      	b.n	8007830 <tcp_receive+0x8dc>
            }
          } else {
            next = pcb->ooseq;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80076de:	e042      	b.n	8007766 <tcp_receive+0x812>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	899b      	ldrh	r3, [r3, #12]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fc fa98 	bl	8003c1e <lwip_htons>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02e      	beq.n	8007756 <tcp_receive+0x802>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80076f8:	4b47      	ldr	r3, [pc, #284]	@ (8007818 <tcp_receive+0x8c4>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4618      	mov	r0, r3
 8007702:	f7fc fa8c 	bl	8003c1e <lwip_htons>
 8007706:	4603      	mov	r3, r0
 8007708:	f003 0302 	and.w	r3, r3, #2
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 800770c:	2b00      	cmp	r3, #0
 800770e:	d122      	bne.n	8007756 <tcp_receive+0x802>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007710:	4b41      	ldr	r3, [pc, #260]	@ (8007818 <tcp_receive+0x8c4>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	899b      	ldrh	r3, [r3, #12]
 8007716:	b29c      	uxth	r4, r3
 8007718:	2001      	movs	r0, #1
 800771a:	f7fc fa80 	bl	8003c1e <lwip_htons>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	4b3d      	ldr	r3, [pc, #244]	@ (8007818 <tcp_receive+0x8c4>)
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	4322      	orrs	r2, r4
 8007728:	b292      	uxth	r2, r2
 800772a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800772c:	4b3a      	ldr	r3, [pc, #232]	@ (8007818 <tcp_receive+0x8c4>)
 800772e:	891c      	ldrh	r4, [r3, #8]
 8007730:	4b39      	ldr	r3, [pc, #228]	@ (8007818 <tcp_receive+0x8c4>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	899b      	ldrh	r3, [r3, #12]
 8007736:	b29b      	uxth	r3, r3
 8007738:	4618      	mov	r0, r3
 800773a:	f7fc fa70 	bl	8003c1e <lwip_htons>
 800773e:	4603      	mov	r3, r0
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <tcp_receive+0x7f8>
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <tcp_receive+0x7fa>
 800774c:	2300      	movs	r3, #0
 800774e:	4423      	add	r3, r4
 8007750:	b29a      	uxth	r2, r3
 8007752:	4b30      	ldr	r3, [pc, #192]	@ (8007814 <tcp_receive+0x8c0>)
 8007754:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8007756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8007760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007762:	f7fe f8c3 	bl	80058ec <tcp_seg_free>
            while (next &&
 8007766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00e      	beq.n	800778a <tcp_receive+0x836>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800776c:	4b29      	ldr	r3, [pc, #164]	@ (8007814 <tcp_receive+0x8c0>)
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	4b2a      	ldr	r3, [pc, #168]	@ (800781c <tcp_receive+0x8c8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	441a      	add	r2, r3
 8007778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007780:	8909      	ldrh	r1, [r1, #8]
 8007782:	440b      	add	r3, r1
 8007784:	1ad3      	subs	r3, r2, r3
            while (next &&
 8007786:	2b00      	cmp	r3, #0
 8007788:	daaa      	bge.n	80076e0 <tcp_receive+0x78c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d04c      	beq.n	800782a <tcp_receive+0x8d6>
                TCP_SEQ_GT(seqno + tcplen,
 8007790:	4b20      	ldr	r3, [pc, #128]	@ (8007814 <tcp_receive+0x8c0>)
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	4b21      	ldr	r3, [pc, #132]	@ (800781c <tcp_receive+0x8c8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	441a      	add	r2, r3
 800779c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd40      	ble.n	800782a <tcp_receive+0x8d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	4b1a      	ldr	r3, [pc, #104]	@ (800781c <tcp_receive+0x8c8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	4b17      	ldr	r3, [pc, #92]	@ (8007818 <tcp_receive+0x8c4>)
 80077bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80077be:	4b16      	ldr	r3, [pc, #88]	@ (8007818 <tcp_receive+0x8c4>)
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	899b      	ldrh	r3, [r3, #12]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc fa29 	bl	8003c1e <lwip_htons>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <tcp_receive+0x88e>
                inseg.len -= 1;
 80077d6:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <tcp_receive+0x8c4>)
 80077d8:	891b      	ldrh	r3, [r3, #8]
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <tcp_receive+0x8c4>)
 80077e0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80077e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <tcp_receive+0x8c4>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007818 <tcp_receive+0x8c4>)
 80077e8:	8912      	ldrh	r2, [r2, #8]
 80077ea:	4611      	mov	r1, r2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd f813 	bl	8004818 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <tcp_receive+0x8c4>)
 80077f4:	891c      	ldrh	r4, [r3, #8]
 80077f6:	4b08      	ldr	r3, [pc, #32]	@ (8007818 <tcp_receive+0x8c4>)
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	899b      	ldrh	r3, [r3, #12]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fc fa0d 	bl	8003c1e <lwip_htons>
 8007804:	4603      	mov	r3, r0
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <tcp_receive+0x8cc>
 800780e:	2301      	movs	r3, #1
 8007810:	e007      	b.n	8007822 <tcp_receive+0x8ce>
 8007812:	bf00      	nop
 8007814:	2000673e 	.word	0x2000673e
 8007818:	20006714 	.word	0x20006714
 800781c:	20006734 	.word	0x20006734
 8007820:	2300      	movs	r3, #0
 8007822:	4423      	add	r3, r4
 8007824:	b29a      	uxth	r2, r3
 8007826:	4b8f      	ldr	r3, [pc, #572]	@ (8007a64 <tcp_receive+0xb10>)
 8007828:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782e:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007830:	4b8c      	ldr	r3, [pc, #560]	@ (8007a64 <tcp_receive+0xb10>)
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	4b8c      	ldr	r3, [pc, #560]	@ (8007a68 <tcp_receive+0xb14>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	441a      	add	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007844:	4b87      	ldr	r3, [pc, #540]	@ (8007a64 <tcp_receive+0xb10>)
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fd fcbb 	bl	80051cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007856:	4b85      	ldr	r3, [pc, #532]	@ (8007a6c <tcp_receive+0xb18>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	891b      	ldrh	r3, [r3, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <tcp_receive+0x91a>
          recv_data = inseg.p;
 8007860:	4b82      	ldr	r3, [pc, #520]	@ (8007a6c <tcp_receive+0xb18>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a82      	ldr	r2, [pc, #520]	@ (8007a70 <tcp_receive+0xb1c>)
 8007866:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007868:	4b80      	ldr	r3, [pc, #512]	@ (8007a6c <tcp_receive+0xb18>)
 800786a:	2200      	movs	r2, #0
 800786c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800786e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a6c <tcp_receive+0xb18>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	899b      	ldrh	r3, [r3, #12]
 8007874:	b29b      	uxth	r3, r3
 8007876:	4618      	mov	r0, r3
 8007878:	f7fc f9d1 	bl	8003c1e <lwip_htons>
 800787c:	4603      	mov	r3, r0
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 808b 	beq.w	800799e <tcp_receive+0xa4a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007888:	4b7a      	ldr	r3, [pc, #488]	@ (8007a74 <tcp_receive+0xb20>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f043 0320 	orr.w	r3, r3, #32
 8007890:	b2da      	uxtb	r2, r3
 8007892:	4b78      	ldr	r3, [pc, #480]	@ (8007a74 <tcp_receive+0xb20>)
 8007894:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007896:	e082      	b.n	800799e <tcp_receive+0xa4a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	4a70      	ldr	r2, [pc, #448]	@ (8007a68 <tcp_receive+0xb14>)
 80078a8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	891b      	ldrh	r3, [r3, #8]
 80078ae:	461c      	mov	r4, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	899b      	ldrh	r3, [r3, #12]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fc f9b0 	bl	8003c1e <lwip_htons>
 80078be:	4603      	mov	r3, r0
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <tcp_receive+0x978>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <tcp_receive+0x97a>
 80078cc:	2300      	movs	r3, #0
 80078ce:	191a      	adds	r2, r3, r4
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	899b      	ldrh	r3, [r3, #12]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fc f99b 	bl	8003c1e <lwip_htons>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	2b00      	cmp	r3, #0
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	891b      	ldrh	r3, [r3, #8]
 80078f4:	461c      	mov	r4, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	899b      	ldrh	r3, [r3, #12]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc f98d 	bl	8003c1e <lwip_htons>
 8007904:	4603      	mov	r3, r0
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <tcp_receive+0x9be>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <tcp_receive+0x9c0>
 8007912:	2300      	movs	r3, #0
 8007914:	1919      	adds	r1, r3, r4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800791a:	b28b      	uxth	r3, r1
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fd fc51 	bl	80051cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	891b      	ldrh	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <tcp_receive+0xa08>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007934:	4b4e      	ldr	r3, [pc, #312]	@ (8007a70 <tcp_receive+0xb1c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <tcp_receive+0x9fa>
              pbuf_cat(recv_data, cseg->p);
 800793c:	4b4c      	ldr	r3, [pc, #304]	@ (8007a70 <tcp_receive+0xb1c>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fd f8e5 	bl	8004b16 <pbuf_cat>
 800794c:	e003      	b.n	8007956 <tcp_receive+0xa02>
            } else {
              recv_data = cseg->p;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4a47      	ldr	r2, [pc, #284]	@ (8007a70 <tcp_receive+0xb1c>)
 8007954:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	899b      	ldrh	r3, [r3, #12]
 8007962:	b29b      	uxth	r3, r3
 8007964:	4618      	mov	r0, r3
 8007966:	f7fc f95a 	bl	8003c1e <lwip_htons>
 800796a:	4603      	mov	r3, r0
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00d      	beq.n	8007990 <tcp_receive+0xa3c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007974:	4b3f      	ldr	r3, [pc, #252]	@ (8007a74 <tcp_receive+0xb20>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f043 0320 	orr.w	r3, r3, #32
 800797c:	b2da      	uxtb	r2, r3
 800797e:	4b3d      	ldr	r3, [pc, #244]	@ (8007a74 <tcp_receive+0xb20>)
 8007980:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7d1b      	ldrb	r3, [r3, #20]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d102      	bne.n	8007990 <tcp_receive+0xa3c>
              pcb->state = CLOSE_WAIT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2207      	movs	r2, #7
 800798e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7fd ffa7 	bl	80058ec <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <tcp_receive+0xa64>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80079b2:	429a      	cmp	r2, r3
 80079b4:	f43f af70 	beq.w	8007898 <tcp_receive+0x944>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7e9b      	ldrb	r3, [r3, #26]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00e      	beq.n	80079e2 <tcp_receive+0xa8e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7e9b      	ldrb	r3, [r3, #26]
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	769a      	strb	r2, [r3, #26]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7e9b      	ldrb	r3, [r3, #26]
 80079d6:	f043 0302 	orr.w	r3, r3, #2
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80079e0:	e16e      	b.n	8007cc0 <tcp_receive+0xd6c>
        tcp_ack(pcb);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7e9b      	ldrb	r3, [r3, #26]
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80079f0:	e166      	b.n	8007cc0 <tcp_receive+0xd6c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc01 	bl	80081fa <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <tcp_receive+0xaba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007a00:	481a      	ldr	r0, [pc, #104]	@ (8007a6c <tcp_receive+0xb18>)
 8007a02:	f7fd ff8b 	bl	800591c <tcp_seg_copy>
 8007a06:	4602      	mov	r2, r0
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 8007a0c:	e158      	b.n	8007cc0 <tcp_receive+0xd6c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a18:	e13d      	b.n	8007c96 <tcp_receive+0xd42>
            if (seqno == next->tcphdr->seqno) {
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	4b11      	ldr	r3, [pc, #68]	@ (8007a68 <tcp_receive+0xb14>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d127      	bne.n	8007a78 <tcp_receive+0xb24>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007a28:	4b10      	ldr	r3, [pc, #64]	@ (8007a6c <tcp_receive+0xb18>)
 8007a2a:	891a      	ldrh	r2, [r3, #8]
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	891b      	ldrh	r3, [r3, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	f240 8135 	bls.w	8007ca0 <tcp_receive+0xd4c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007a36:	480d      	ldr	r0, [pc, #52]	@ (8007a6c <tcp_receive+0xb18>)
 8007a38:	f7fd ff70 	bl	800591c <tcp_seg_copy>
 8007a3c:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 812f 	beq.w	8007ca4 <tcp_receive+0xd50>
                  if (prev != NULL) {
 8007a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <tcp_receive+0xb00>
                    prev->next = cseg;
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <tcp_receive+0xb06>
                  } else {
                    pcb->ooseq = cseg;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007a5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff fa03 	bl	8006e68 <tcp_oos_insert_segment>
                }
                break;
 8007a62:	e11f      	b.n	8007ca4 <tcp_receive+0xd50>
 8007a64:	2000673e 	.word	0x2000673e
 8007a68:	20006734 	.word	0x20006734
 8007a6c:	20006714 	.word	0x20006714
 8007a70:	20006744 	.word	0x20006744
 8007a74:	20006741 	.word	0x20006741
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d117      	bne.n	8007aae <tcp_receive+0xb5a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007a7e:	4b91      	ldr	r3, [pc, #580]	@ (8007cc4 <tcp_receive+0xd70>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da4f      	bge.n	8007b2e <tcp_receive+0xbda>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8007a8e:	488e      	ldr	r0, [pc, #568]	@ (8007cc8 <tcp_receive+0xd74>)
 8007a90:	f7fd ff44 	bl	800591c <tcp_seg_copy>
 8007a94:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8105 	beq.w	8007ca8 <tcp_receive+0xd54>
                    pcb->ooseq = cseg;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8007aa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7ff f9de 	bl	8006e68 <tcp_oos_insert_segment>
                  }
                  break;
 8007aac:	e0fc      	b.n	8007ca8 <tcp_receive+0xd54>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007aae:	4b85      	ldr	r3, [pc, #532]	@ (8007cc4 <tcp_receive+0xd70>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db36      	blt.n	8007b2e <tcp_receive+0xbda>
 8007ac0:	4b80      	ldr	r3, [pc, #512]	@ (8007cc4 <tcp_receive+0xd70>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	3301      	adds	r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dc2d      	bgt.n	8007b2e <tcp_receive+0xbda>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8007ad2:	487d      	ldr	r0, [pc, #500]	@ (8007cc8 <tcp_receive+0xd74>)
 8007ad4:	f7fd ff22 	bl	800591c <tcp_seg_copy>
 8007ad8:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80e5 	beq.w	8007cac <tcp_receive+0xd58>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aea:	8912      	ldrh	r2, [r2, #8]
 8007aec:	441a      	add	r2, r3
 8007aee:	4b75      	ldr	r3, [pc, #468]	@ (8007cc4 <tcp_receive+0xd70>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd12      	ble.n	8007b1e <tcp_receive+0xbca>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007af8:	4b72      	ldr	r3, [pc, #456]	@ (8007cc4 <tcp_receive+0xd70>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b14:	891b      	ldrh	r3, [r3, #8]
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fc fe7d 	bl	8004818 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8007b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff f99e 	bl	8006e68 <tcp_oos_insert_segment>
                  }
                  break;
 8007b2c:	e0be      	b.n	8007cac <tcp_receive+0xd58>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8007b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f040 80aa 	bne.w	8007c8c <tcp_receive+0xd38>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007b38:	4b62      	ldr	r3, [pc, #392]	@ (8007cc4 <tcp_receive+0xd70>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f340 80a1 	ble.w	8007c8c <tcp_receive+0xd38>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	899b      	ldrh	r3, [r3, #12]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fc f863 	bl	8003c1e <lwip_htons>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 80a6 	bne.w	8007cb0 <tcp_receive+0xd5c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8007b64:	4858      	ldr	r0, [pc, #352]	@ (8007cc8 <tcp_receive+0xd74>)
 8007b66:	f7fd fed9 	bl	800591c <tcp_seg_copy>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 809d 	beq.w	8007cb4 <tcp_receive+0xd60>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b82:	8912      	ldrh	r2, [r2, #8]
 8007b84:	441a      	add	r2, r3
 8007b86:	4b4f      	ldr	r3, [pc, #316]	@ (8007cc4 <tcp_receive+0xd70>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd12      	ble.n	8007bb6 <tcp_receive+0xc62>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007b90:	4b4c      	ldr	r3, [pc, #304]	@ (8007cc4 <tcp_receive+0xd70>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	891b      	ldrh	r3, [r3, #8]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fc fe31 	bl	8004818 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007bb6:	4b45      	ldr	r3, [pc, #276]	@ (8007ccc <tcp_receive+0xd78>)
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	4b41      	ldr	r3, [pc, #260]	@ (8007cc4 <tcp_receive+0xd70>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007bca:	440b      	add	r3, r1
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd70      	ble.n	8007cb4 <tcp_receive+0xd60>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	899b      	ldrh	r3, [r3, #12]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fc f81e 	bl	8003c1e <lwip_htons>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01e      	beq.n	8007c2a <tcp_receive+0xcd6>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	899b      	ldrh	r3, [r3, #12]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007bfa:	b29c      	uxth	r4, r3
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	899b      	ldrh	r3, [r3, #12]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fc f809 	bl	8003c1e <lwip_htons>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fc f802 	bl	8003c1e <lwip_htons>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4322      	orrs	r2, r4
 8007c26:	b292      	uxth	r2, r2
 8007c28:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c34:	4413      	add	r3, r2
 8007c36:	b299      	uxth	r1, r3
 8007c38:	4b22      	ldr	r3, [pc, #136]	@ (8007cc4 <tcp_receive+0xd70>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	1a8a      	subs	r2, r1, r2
 8007c44:	b292      	uxth	r2, r2
 8007c46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	891b      	ldrh	r3, [r3, #8]
 8007c54:	4619      	mov	r1, r3
 8007c56:	4610      	mov	r0, r2
 8007c58:	f7fc fdde 	bl	8004818 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	891c      	ldrh	r4, [r3, #8]
 8007c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	899b      	ldrh	r3, [r3, #12]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fb ffd6 	bl	8003c1e <lwip_htons>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f003 0303 	and.w	r3, r3, #3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <tcp_receive+0xd2c>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <tcp_receive+0xd2e>
 8007c80:	2300      	movs	r3, #0
 8007c82:	4423      	add	r3, r4
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <tcp_receive+0xd78>)
 8007c88:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8007c8a:	e013      	b.n	8007cb4 <tcp_receive+0xd60>
              }
            }
            prev = next;
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f47f aebe 	bne.w	8007a1a <tcp_receive+0xac6>
      if (pcb->rcv_nxt == seqno) {
 8007c9e:	e00f      	b.n	8007cc0 <tcp_receive+0xd6c>
                break;
 8007ca0:	bf00      	nop
 8007ca2:	e00d      	b.n	8007cc0 <tcp_receive+0xd6c>
                break;
 8007ca4:	bf00      	nop
 8007ca6:	e00b      	b.n	8007cc0 <tcp_receive+0xd6c>
                  break;
 8007ca8:	bf00      	nop
 8007caa:	e009      	b.n	8007cc0 <tcp_receive+0xd6c>
                  break;
 8007cac:	bf00      	nop
 8007cae:	e007      	b.n	8007cc0 <tcp_receive+0xd6c>
                  break;
 8007cb0:	bf00      	nop
 8007cb2:	e005      	b.n	8007cc0 <tcp_receive+0xd6c>
                break;
 8007cb4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8007cb6:	e003      	b.n	8007cc0 <tcp_receive+0xd6c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa9e 	bl	80081fa <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007cbe:	e021      	b.n	8007d04 <tcp_receive+0xdb0>
 8007cc0:	e020      	b.n	8007d04 <tcp_receive+0xdb0>
 8007cc2:	bf00      	nop
 8007cc4:	20006734 	.word	0x20006734
 8007cc8:	20006714 	.word	0x20006714
 8007ccc:	2000673e 	.word	0x2000673e
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <tcp_receive+0xdb8>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	db0a      	blt.n	8007cf4 <tcp_receive+0xda0>
 8007cde:	4b0b      	ldr	r3, [pc, #44]	@ (8007d0c <tcp_receive+0xdb8>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007cea:	440b      	add	r3, r1
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	3301      	adds	r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dd07      	ble.n	8007d04 <tcp_receive+0xdb0>
      tcp_ack_now(pcb);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7e9b      	ldrb	r3, [r3, #26]
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8007d02:	e7ff      	b.n	8007d04 <tcp_receive+0xdb0>
 8007d04:	bf00      	nop
 8007d06:	3734      	adds	r7, #52	@ 0x34
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0c:	20006734 	.word	0x20006734

08007d10 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007d16:	4b18      	ldr	r3, [pc, #96]	@ (8007d78 <tcp_getoptbyte+0x68>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <tcp_getoptbyte+0x1a>
 8007d1e:	4b17      	ldr	r3, [pc, #92]	@ (8007d7c <tcp_getoptbyte+0x6c>)
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	4b17      	ldr	r3, [pc, #92]	@ (8007d80 <tcp_getoptbyte+0x70>)
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d20e      	bcs.n	8007d48 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007d2a:	4b16      	ldr	r3, [pc, #88]	@ (8007d84 <tcp_getoptbyte+0x74>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3314      	adds	r3, #20
 8007d30:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8007d32:	4b12      	ldr	r3, [pc, #72]	@ (8007d7c <tcp_getoptbyte+0x6c>)
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	b291      	uxth	r1, r2
 8007d3a:	4a10      	ldr	r2, [pc, #64]	@ (8007d7c <tcp_getoptbyte+0x6c>)
 8007d3c:	8011      	strh	r1, [r2, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	4413      	add	r3, r2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	e010      	b.n	8007d6a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007d48:	4b0c      	ldr	r3, [pc, #48]	@ (8007d7c <tcp_getoptbyte+0x6c>)
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	b291      	uxth	r1, r2
 8007d50:	4a0a      	ldr	r2, [pc, #40]	@ (8007d7c <tcp_getoptbyte+0x6c>)
 8007d52:	8011      	strh	r1, [r2, #0]
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <tcp_getoptbyte+0x70>)
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8007d60:	4b05      	ldr	r3, [pc, #20]	@ (8007d78 <tcp_getoptbyte+0x68>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	4413      	add	r3, r2
 8007d68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000672c 	.word	0x2000672c
 8007d7c:	20006730 	.word	0x20006730
 8007d80:	2000672a 	.word	0x2000672a
 8007d84:	20006724 	.word	0x20006724

08007d88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007d90:	4b2e      	ldr	r3, [pc, #184]	@ (8007e4c <tcp_parseopt+0xc4>)
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d056      	beq.n	8007e46 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007d98:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <tcp_parseopt+0xc8>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	e046      	b.n	8007e2e <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 8007da0:	f7ff ffb6 	bl	8007d10 <tcp_getoptbyte>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d006      	beq.n	8007dbc <tcp_parseopt+0x34>
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	dc2a      	bgt.n	8007e08 <tcp_parseopt+0x80>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d042      	beq.n	8007e3c <tcp_parseopt+0xb4>
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d038      	beq.n	8007e2c <tcp_parseopt+0xa4>
 8007dba:	e025      	b.n	8007e08 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007dbc:	f7ff ffa8 	bl	8007d10 <tcp_getoptbyte>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d13c      	bne.n	8007e40 <tcp_parseopt+0xb8>
 8007dc6:	4b22      	ldr	r3, [pc, #136]	@ (8007e50 <tcp_parseopt+0xc8>)
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8007e4c <tcp_parseopt+0xc4>)
 8007dce:	8812      	ldrh	r2, [r2, #0]
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	da35      	bge.n	8007e40 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8007dd4:	f7ff ff9c 	bl	8007d10 <tcp_getoptbyte>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8007dde:	f7ff ff97 	bl	8007d10 <tcp_getoptbyte>
 8007de2:	4603      	mov	r3, r0
 8007de4:	461a      	mov	r2, r3
 8007de6:	89bb      	ldrh	r3, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007dec:	89bb      	ldrh	r3, [r7, #12]
 8007dee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007df2:	d804      	bhi.n	8007dfe <tcp_parseopt+0x76>
 8007df4:	89bb      	ldrh	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <tcp_parseopt+0x76>
 8007dfa:	89ba      	ldrh	r2, [r7, #12]
 8007dfc:	e001      	b.n	8007e02 <tcp_parseopt+0x7a>
 8007dfe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8007e06:	e012      	b.n	8007e2e <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007e08:	f7ff ff82 	bl	8007d10 <tcp_getoptbyte>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d916      	bls.n	8007e44 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <tcp_parseopt+0xc8>)
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	4413      	add	r3, r2
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b02      	subs	r3, #2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	4b0a      	ldr	r3, [pc, #40]	@ (8007e50 <tcp_parseopt+0xc8>)
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	e000      	b.n	8007e2e <tcp_parseopt+0xa6>
        break;
 8007e2c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007e2e:	4b08      	ldr	r3, [pc, #32]	@ (8007e50 <tcp_parseopt+0xc8>)
 8007e30:	881a      	ldrh	r2, [r3, #0]
 8007e32:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <tcp_parseopt+0xc4>)
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3b2      	bcc.n	8007da0 <tcp_parseopt+0x18>
 8007e3a:	e004      	b.n	8007e46 <tcp_parseopt+0xbe>
        return;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <tcp_parseopt+0xbe>
          return;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <tcp_parseopt+0xbe>
          return;
 8007e44:	bf00      	nop
      }
    }
  }
}
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20006728 	.word	0x20006728
 8007e50:	20006730 	.word	0x20006730

08007e54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8007e58:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <tcp_trigger_input_pcb_close+0x1c>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f043 0310 	orr.w	r3, r3, #16
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4b03      	ldr	r3, [pc, #12]	@ (8007e70 <tcp_trigger_input_pcb_close+0x1c>)
 8007e64:	701a      	strb	r2, [r3, #0]
}
 8007e66:	bf00      	nop
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20006741 	.word	0x20006741

08007e74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	817b      	strh	r3, [r7, #10]
 8007e82:	4613      	mov	r3, r2
 8007e84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007e86:	897a      	ldrh	r2, [r7, #10]
 8007e88:	893b      	ldrh	r3, [r7, #8]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3314      	adds	r3, #20
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	4619      	mov	r1, r3
 8007e96:	2001      	movs	r0, #1
 8007e98:	f7fc fb5a 	bl	8004550 <pbuf_alloc>
 8007e9c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d04a      	beq.n	8007f3a <tcp_output_alloc_header+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8adb      	ldrh	r3, [r3, #22]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fb feb5 	bl	8003c1e <lwip_htons>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8b1b      	ldrh	r3, [r3, #24]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fb feac 	bl	8003c1e <lwip_htons>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	461a      	mov	r2, r3
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fb feb5 	bl	8003c48 <lwip_htonl>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8007ee4:	897b      	ldrh	r3, [r7, #10]
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3305      	adds	r3, #5
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	031b      	lsls	r3, r3, #12
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f043 0310 	orr.w	r3, r3, #16
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fb fe90 	bl	8003c1e <lwip_htons>
 8007efe:	4603      	mov	r3, r0
 8007f00:	461a      	mov	r2, r3
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fb fe87 	bl	8003c1e <lwip_htons>
 8007f10:	4603      	mov	r3, r0
 8007f12:	461a      	mov	r2, r3
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	741a      	strb	r2, [r3, #16]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2200      	movs	r2, #0
 8007f26:	749a      	strb	r2, [r3, #18]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8007f34:	441a      	add	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8007f3a:	697b      	ldr	r3, [r7, #20]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d02d      	beq.n	8007fb0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e002      	b.n	8007f62 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f8      	bne.n	8007f5c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	899b      	ldrh	r3, [r3, #12]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fb fe53 	bl	8003c1e <lwip_htons>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d116      	bne.n	8007fb0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	899b      	ldrh	r3, [r3, #12]
 8007f88:	b29c      	uxth	r4, r3
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	f7fb fe47 	bl	8003c1e <lwip_htons>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	4322      	orrs	r2, r4
 8007f9a:	b292      	uxth	r2, r2
 8007f9c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	7e9b      	ldrb	r3, [r3, #26]
 8007fa2:	f043 0320 	orr.w	r3, r3, #32
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e004      	b.n	8007fba <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f879 	bl	80080aa <tcp_enqueue_flags>
 8007fb8:	4603      	mov	r3, r0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd90      	pop	{r4, r7, pc}

08007fc2 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8007fc2:	b590      	push	{r4, r7, lr}
 8007fc4:	b087      	sub	sp, #28
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	603b      	str	r3, [r7, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8007fe0:	2003      	movs	r0, #3
 8007fe2:	f7fc f8e9 	bl	80041b8 <memp_malloc>
 8007fe6:	6138      	str	r0, [r7, #16]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8007fee:	68b8      	ldr	r0, [r7, #8]
 8007ff0:	f7fc fd16 	bl	8004a20 <pbuf_free>
    return NULL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	e054      	b.n	80080a2 <tcp_create_segment+0xe0>
  }
  seg->flags = optflags;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007ffe:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	891a      	ldrh	r2, [r3, #8]
 8008010:	7dfb      	ldrb	r3, [r7, #23]
 8008012:	b29b      	uxth	r3, r3
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	b29a      	uxth	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800801c:	2114      	movs	r1, #20
 800801e:	68b8      	ldr	r0, [r7, #8]
 8008020:	f7fc fcda 	bl	80049d8 <pbuf_header>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <tcp_create_segment+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f7fd fc5e 	bl	80058ec <tcp_seg_free>
    return NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	e036      	b.n	80080a2 <tcp_create_segment+0xe0>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8ada      	ldrh	r2, [r3, #22]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	68dc      	ldr	r4, [r3, #12]
 8008046:	4610      	mov	r0, r2
 8008048:	f7fb fde9 	bl	8003c1e <lwip_htons>
 800804c:	4603      	mov	r3, r0
 800804e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8b1a      	ldrh	r2, [r3, #24]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	68dc      	ldr	r4, [r3, #12]
 8008058:	4610      	mov	r0, r2
 800805a:	f7fb fde0 	bl	8003c1e <lwip_htons>
 800805e:	4603      	mov	r3, r0
 8008060:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	68dc      	ldr	r4, [r3, #12]
 8008066:	6838      	ldr	r0, [r7, #0]
 8008068:	f7fb fdee 	bl	8003c48 <lwip_htonl>
 800806c:	4603      	mov	r3, r0
 800806e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	089b      	lsrs	r3, r3, #2
 8008074:	b2db      	uxtb	r3, r3
 8008076:	3305      	adds	r3, #5
 8008078:	031b      	lsls	r3, r3, #12
 800807a:	b21a      	sxth	r2, r3
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	b21b      	sxth	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b21b      	sxth	r3, r3
 8008084:	b29a      	uxth	r2, r3
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	68dc      	ldr	r4, [r3, #12]
 800808a:	4610      	mov	r0, r2
 800808c:	f7fb fdc7 	bl	8003c1e <lwip_htons>
 8008090:	4603      	mov	r3, r0
 8008092:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	749a      	strb	r2, [r3, #18]
 800809c:	2200      	movs	r2, #0
 800809e:	74da      	strb	r2, [r3, #19]
  return seg;
 80080a0:	693b      	ldr	r3, [r7, #16]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd90      	pop	{r4, r7, pc}

080080aa <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b08a      	sub	sp, #40	@ 0x28
 80080ae:	af02      	add	r7, sp, #8
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d806      	bhi.n	80080d6 <tcp_enqueue_flags+0x2c>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80080ce:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d90e      	bls.n	80080f4 <tcp_enqueue_flags+0x4a>
      ((flags & TCP_FIN) == 0)) {
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d109      	bne.n	80080f4 <tcp_enqueue_flags+0x4a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7e9b      	ldrb	r3, [r3, #26]
 80080e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080f2:	e07e      	b.n	80081f2 <tcp_enqueue_flags+0x148>
  }

  if (flags & TCP_SYN) {
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <tcp_enqueue_flags+0x58>
    optflags = TF_SEG_OPTS_MSS;
 80080fe:	2301      	movs	r3, #1
 8008100:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008102:	7ffb      	ldrb	r3, [r7, #31]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	b29b      	uxth	r3, r3
 8008112:	2200      	movs	r2, #0
 8008114:	4619      	mov	r1, r3
 8008116:	2000      	movs	r0, #0
 8008118:	f7fc fa1a 	bl	8004550 <pbuf_alloc>
 800811c:	6138      	str	r0, [r7, #16]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d109      	bne.n	8008138 <tcp_enqueue_flags+0x8e>
    pcb->flags |= TF_NAGLEMEMERR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7e9b      	ldrb	r3, [r3, #26]
 8008128:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800812c:	b2da      	uxtb	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008136:	e05c      	b.n	80081f2 <tcp_enqueue_flags+0x148>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	7ffb      	ldrb	r3, [r7, #31]
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	460b      	mov	r3, r1
 8008144:	6939      	ldr	r1, [r7, #16]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff ff3b 	bl	8007fc2 <tcp_create_segment>
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d109      	bne.n	8008168 <tcp_enqueue_flags+0xbe>
    pcb->flags |= TF_NAGLEMEMERR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7e9b      	ldrb	r3, [r3, #26]
 8008158:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800815c:	b2da      	uxtb	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008166:	e044      	b.n	80081f2 <tcp_enqueue_flags+0x148>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <tcp_enqueue_flags+0xce>
    pcb->unsent = seg;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	669a      	str	r2, [r3, #104]	@ 0x68
 8008176:	e00d      	b.n	8008194 <tcp_enqueue_flags+0xea>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	e002      	b.n	8008186 <tcp_enqueue_flags+0xdc>
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f8      	bne.n	8008180 <tcp_enqueue_flags+0xd6>
    useg->next = seg;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <tcp_enqueue_flags+0x106>
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <tcp_enqueue_flags+0x110>
    pcb->snd_lbb++;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <tcp_enqueue_flags+0x128>
    pcb->flags |= TF_FIN;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7e9b      	ldrb	r3, [r3, #26]
 80081c8:	f043 0320 	orr.w	r3, r3, #32
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fc fc73 	bl	8004ac2 <pbuf_clen>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081e6:	4413      	add	r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80081fa:	b590      	push	{r4, r7, lr}
 80081fc:	b08b      	sub	sp, #44	@ 0x2c
 80081fe:	af04      	add	r7, sp, #16
 8008200:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008206:	7dbb      	ldrb	r3, [r7, #22]
 8008208:	b29c      	uxth	r4, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820e:	4618      	mov	r0, r3
 8008210:	f7fb fd1a 	bl	8003c48 <lwip_htonl>
 8008214:	4603      	mov	r3, r0
 8008216:	2200      	movs	r2, #0
 8008218:	4621      	mov	r1, r4
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fe2a 	bl	8007e74 <tcp_output_alloc_header>
 8008220:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7e9b      	ldrb	r3, [r3, #26]
 800822c:	f043 0303 	orr.w	r3, r3, #3
 8008230:	b2da      	uxtb	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008236:	f06f 0301 	mvn.w	r3, #1
 800823a:	e036      	b.n	80082aa <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3304      	adds	r3, #4
 8008240:	4618      	mov	r0, r3
 8008242:	f001 ffa7 	bl	800a194 <ip4_route>
 8008246:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800824e:	23fc      	movs	r3, #252	@ 0xfc
 8008250:	75fb      	strb	r3, [r7, #23]
 8008252:	e012      	b.n	800827a <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	1d18      	adds	r0, r3, #4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7a9c      	ldrb	r4, [r3, #10]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7a5b      	ldrb	r3, [r3, #9]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	9202      	str	r2, [sp, #8]
 8008266:	2206      	movs	r2, #6
 8008268:	9201      	str	r2, [sp, #4]
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	4623      	mov	r3, r4
 800826e:	4602      	mov	r2, r0
 8008270:	6938      	ldr	r0, [r7, #16]
 8008272:	f002 f92f 	bl	800a4d4 <ip4_output_if>
 8008276:	4603      	mov	r3, r0
 8008278:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800827a:	6938      	ldr	r0, [r7, #16]
 800827c:	f7fc fbd0 	bl	8004a20 <pbuf_free>

  if (err != ERR_OK) {
 8008280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7e9b      	ldrb	r3, [r3, #26]
 800828c:	f043 0303 	orr.w	r3, r3, #3
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	769a      	strb	r2, [r3, #26]
 8008296:	e006      	b.n	80082a6 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7e9b      	ldrb	r3, [r3, #26]
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80082a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd90      	pop	{r4, r7, pc}
	...

080082b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b08a      	sub	sp, #40	@ 0x28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80082bc:	4b98      	ldr	r3, [pc, #608]	@ (8008520 <tcp_output+0x26c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d101      	bne.n	80082ca <tcp_output+0x16>
    return ERR_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	e180      	b.n	80085cc <tcp_output+0x318>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082d6:	4293      	cmp	r3, r2
 80082d8:	bf28      	it	cs
 80082da:	4613      	movcs	r3, r2
 80082dc:	b29b      	uxth	r3, r3
 80082de:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7e9b      	ldrb	r3, [r3, #26]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d017      	beq.n	8008322 <tcp_output+0x6e>
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00f      	beq.n	8008318 <tcp_output+0x64>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fb fca2 	bl	8003c48 <lwip_htonl>
 8008304:	4602      	mov	r2, r0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800830e:	8912      	ldrh	r2, [r2, #8]
 8008310:	4413      	add	r3, r2
     (seg == NULL ||
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d204      	bcs.n	8008322 <tcp_output+0x6e>
     return tcp_send_empty_ack(pcb);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff ff6e 	bl	80081fa <tcp_send_empty_ack>
 800831e:	4603      	mov	r3, r0
 8008320:	e154      	b.n	80085cc <tcp_output+0x318>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008326:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <tcp_output+0x8a>
    for (; useg->next != NULL; useg = useg->next);
 800832e:	e002      	b.n	8008336 <tcp_output+0x82>
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	623b      	str	r3, [r7, #32]
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f8      	bne.n	8008330 <tcp_output+0x7c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3304      	adds	r3, #4
 8008342:	4618      	mov	r0, r3
 8008344:	f001 ff26 	bl	800a194 <ip4_route>
 8008348:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <tcp_output+0xa2>
    return ERR_RTE;
 8008350:	f06f 0303 	mvn.w	r3, #3
 8008354:	e13a      	b.n	80085cc <tcp_output+0x318>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d004      	beq.n	8008366 <tcp_output+0xb2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 810d 	bne.w	8008580 <tcp_output+0x2cc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <tcp_output+0xbe>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	3304      	adds	r3, #4
 8008370:	e000      	b.n	8008374 <tcp_output+0xc0>
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <tcp_output+0xce>
      return ERR_RTE;
 800837c:	f06f 0303 	mvn.w	r3, #3
 8008380:	e124      	b.n	80085cc <tcp_output+0x318>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	601a      	str	r2, [r3, #0]
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800838a:	e0f9      	b.n	8008580 <tcp_output+0x2cc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	899b      	ldrh	r3, [r3, #12]
 8008392:	b29b      	uxth	r3, r3
 8008394:	4618      	mov	r0, r3
 8008396:	f7fb fc42 	bl	8003c1e <lwip_htons>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01f      	beq.n	80083e2 <tcp_output+0x12e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7e9b      	ldrb	r3, [r3, #26]
 80083a6:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d119      	bne.n	80083e2 <tcp_output+0x12e>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <tcp_output+0x11a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d110      	bne.n	80083e2 <tcp_output+0x12e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083c4:	891a      	ldrh	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d209      	bcs.n	80083e2 <tcp_output+0x12e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <tcp_output+0x12e>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083de:	2b08      	cmp	r3, #8
 80083e0:	d901      	bls.n	80083e6 <tcp_output+0x132>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <tcp_output+0x134>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <tcp_output+0x146>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	7e9b      	ldrb	r3, [r3, #26]
 80083f0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80d8 	beq.w	80085aa <tcp_output+0x2f6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d00d      	beq.n	800841e <tcp_output+0x16a>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	899b      	ldrh	r3, [r3, #12]
 8008408:	b29c      	uxth	r4, r3
 800840a:	2010      	movs	r0, #16
 800840c:	f7fb fc07 	bl	8003c1e <lwip_htons>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	4322      	orrs	r2, r4
 800841a:	b292      	uxth	r2, r2
 800841c:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008424:	f000 f8d6 	bl	80085d4 <tcp_output_segment>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800842c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d009      	beq.n	8008448 <tcp_output+0x194>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	7e9b      	ldrb	r3, [r3, #26]
 8008438:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800843c:	b2da      	uxtb	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	769a      	strb	r2, [r3, #26]
      return err;
 8008442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008446:	e0c1      	b.n	80085cc <tcp_output+0x318>
    }
    pcb->unsent = seg->next;
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d006      	beq.n	8008466 <tcp_output+0x1b2>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7e9b      	ldrb	r3, [r3, #26]
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	b2da      	uxtb	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4618      	mov	r0, r3
 800846e:	f7fb fbeb 	bl	8003c48 <lwip_htonl>
 8008472:	4604      	mov	r4, r0
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	891b      	ldrh	r3, [r3, #8]
 8008478:	461d      	mov	r5, r3
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	899b      	ldrh	r3, [r3, #12]
 8008480:	b29b      	uxth	r3, r3
 8008482:	4618      	mov	r0, r3
 8008484:	f7fb fbcb 	bl	8003c1e <lwip_htons>
 8008488:	4603      	mov	r3, r0
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <tcp_output+0x1e2>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <tcp_output+0x1e4>
 8008496:	2300      	movs	r3, #0
 8008498:	442b      	add	r3, r5
 800849a:	4423      	add	r3, r4
 800849c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da02      	bge.n	80084b0 <tcp_output+0x1fc>
      pcb->snd_nxt = snd_nxt;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	891b      	ldrh	r3, [r3, #8]
 80084b4:	461c      	mov	r4, r3
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	899b      	ldrh	r3, [r3, #12]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fb fbad 	bl	8003c1e <lwip_htons>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <tcp_output+0x21e>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <tcp_output+0x220>
 80084d2:	2300      	movs	r3, #0
 80084d4:	4423      	add	r3, r4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d04c      	beq.n	8008574 <tcp_output+0x2c0>
      seg->next = NULL;
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <tcp_output+0x240>
        pcb->unacked = seg;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	623b      	str	r3, [r7, #32]
 80084f2:	e042      	b.n	800857a <tcp_output+0x2c6>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fb fba4 	bl	8003c48 <lwip_htonl>
 8008500:	4604      	mov	r4, r0
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	f7fb fb9d 	bl	8003c48 <lwip_htonl>
 800850e:	4603      	mov	r3, r0
 8008510:	1ae3      	subs	r3, r4, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	da27      	bge.n	8008566 <tcp_output+0x2b2>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	336c      	adds	r3, #108	@ 0x6c
 800851a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800851c:	e005      	b.n	800852a <tcp_output+0x276>
 800851e:	bf00      	nop
 8008520:	20006748 	.word	0x20006748
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d011      	beq.n	8008556 <tcp_output+0x2a2>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	4618      	mov	r0, r3
 800853c:	f7fb fb84 	bl	8003c48 <lwip_htonl>
 8008540:	4604      	mov	r4, r0
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	f7fb fb7d 	bl	8003c48 <lwip_htonl>
 800854e:	4603      	mov	r3, r0
 8008550:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008552:	2b00      	cmp	r3, #0
 8008554:	dbe6      	blt.n	8008524 <tcp_output+0x270>
          }
          seg->next = (*cur_seg);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e009      	b.n	800857a <tcp_output+0x2c6>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	623b      	str	r3, [r7, #32]
 8008572:	e002      	b.n	800857a <tcp_output+0x2c6>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008576:	f7fd f9b9 	bl	80058ec <tcp_seg_free>
    }
    seg = pcb->unsent;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800857e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	d012      	beq.n	80085ac <tcp_output+0x2f8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	f7fb fb5b 	bl	8003c48 <lwip_htonl>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859c:	8912      	ldrh	r2, [r2, #8]
 800859e:	4413      	add	r3, r2
  while (seg != NULL &&
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	f4bf aef2 	bcs.w	800838c <tcp_output+0xd8>
 80085a8:	e000      	b.n	80085ac <tcp_output+0x2f8>
      break;
 80085aa:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d103      	bne.n	80085bc <tcp_output+0x308>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7e9b      	ldrb	r3, [r3, #26]
 80085c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3728      	adds	r7, #40	@ 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bdb0      	pop	{r4, r5, r7, pc}

080085d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80085d4:	b5b0      	push	{r4, r5, r7, lr}
 80085d6:	b08c      	sub	sp, #48	@ 0x30
 80085d8:	af04      	add	r7, sp, #16
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	89db      	ldrh	r3, [r3, #14]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d001      	beq.n	80085ee <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	e08a      	b.n	8008704 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68dc      	ldr	r4, [r3, #12]
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7fb fb26 	bl	8003c48 <lwip_htonl>
 80085fc:	4603      	mov	r3, r0
 80085fe:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68dc      	ldr	r4, [r3, #12]
 8008608:	4610      	mov	r0, r2
 800860a:	f7fb fb08 	bl	8003c1e <lwip_htons>
 800860e:	4603      	mov	r3, r0
 8008610:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800861a:	441a      	add	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	3314      	adds	r3, #20
 8008626:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	7a9b      	ldrb	r3, [r3, #10]
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d014      	beq.n	800865e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3304      	adds	r3, #4
 8008638:	4619      	mov	r1, r3
 800863a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800863e:	f7fd fb83 	bl	8005d48 <tcp_eff_send_mss_impl>
 8008642:	4603      	mov	r3, r0
 8008644:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008646:	8b7b      	ldrh	r3, [r7, #26]
 8008648:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800864c:	4618      	mov	r0, r3
 800864e:	f7fb fafb 	bl	8003c48 <lwip_htonl>
 8008652:	4602      	mov	r2, r0
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3304      	adds	r3, #4
 800865c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008664:	2b00      	cmp	r3, #0
 8008666:	da02      	bge.n	800866e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10c      	bne.n	8008690 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8008676:	4b25      	ldr	r3, [pc, #148]	@ (800870c <tcp_output_segment+0x138>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4618      	mov	r0, r3
 8008686:	f7fb fadf 	bl	8003c48 <lwip_htonl>
 800868a:	4602      	mov	r2, r0
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	8959      	ldrh	r1, [r3, #10]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	8b3a      	ldrh	r2, [r7, #24]
 80086aa:	1a8a      	subs	r2, r1, r2
 80086ac:	b292      	uxth	r2, r2
 80086ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	8919      	ldrh	r1, [r3, #8]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	8b3a      	ldrh	r2, [r7, #24]
 80086bc:	1a8a      	subs	r2, r1, r2
 80086be:	b292      	uxth	r2, r2
 80086c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	68d2      	ldr	r2, [r2, #12]
 80086ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	741a      	strb	r2, [r3, #16]
 80086d4:	2200      	movs	r2, #0
 80086d6:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6858      	ldr	r0, [r3, #4]
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	1d1c      	adds	r4, r3, #4
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	7a9d      	ldrb	r5, [r3, #10]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	7a5b      	ldrb	r3, [r3, #9]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	9202      	str	r2, [sp, #8]
 80086ee:	2206      	movs	r2, #6
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	462b      	mov	r3, r5
 80086f6:	4622      	mov	r2, r4
 80086f8:	f001 feec 	bl	800a4d4 <ip4_output_if>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8008700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bdb0      	pop	{r4, r5, r7, pc}
 800870c:	200066fc 	.word	0x200066fc

08008710 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08c      	sub	sp, #48	@ 0x30
 8008714:	af04      	add	r7, sp, #16
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800871e:	2200      	movs	r2, #0
 8008720:	2114      	movs	r1, #20
 8008722:	2001      	movs	r0, #1
 8008724:	f7fb ff14 	bl	8004550 <pbuf_alloc>
 8008728:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d050      	beq.n	80087d2 <tcp_rst+0xc2>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8008736:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008738:	4618      	mov	r0, r3
 800873a:	f7fb fa70 	bl	8003c1e <lwip_htons>
 800873e:	4603      	mov	r3, r0
 8008740:	461a      	mov	r2, r3
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8008746:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008748:	4618      	mov	r0, r3
 800874a:	f7fb fa68 	bl	8003c1e <lwip_htons>
 800874e:	4603      	mov	r3, r0
 8008750:	461a      	mov	r2, r3
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7fb fa76 	bl	8003c48 <lwip_htonl>
 800875c:	4602      	mov	r2, r0
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008762:	68b8      	ldr	r0, [r7, #8]
 8008764:	f7fb fa70 	bl	8003c48 <lwip_htonl>
 8008768:	4602      	mov	r2, r0
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800876e:	f245 0014 	movw	r0, #20500	@ 0x5014
 8008772:	f7fb fa54 	bl	8003c1e <lwip_htons>
 8008776:	4603      	mov	r3, r0
 8008778:	461a      	mov	r2, r3
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2200      	movs	r2, #0
 8008782:	f042 0208 	orr.w	r2, r2, #8
 8008786:	739a      	strb	r2, [r3, #14]
 8008788:	2200      	movs	r2, #0
 800878a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800878e:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	2200      	movs	r2, #0
 8008794:	741a      	strb	r2, [r3, #16]
 8008796:	2200      	movs	r2, #0
 8008798:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2200      	movs	r2, #0
 800879e:	749a      	strb	r2, [r3, #18]
 80087a0:	2200      	movs	r2, #0
 80087a2:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80087a4:	6838      	ldr	r0, [r7, #0]
 80087a6:	f001 fcf5 	bl	800a194 <ip4_route>
 80087aa:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <tcp_rst+0xba>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	2306      	movs	r3, #6
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	23ff      	movs	r3, #255	@ 0xff
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	69f8      	ldr	r0, [r7, #28]
 80087c6:	f001 fe85 	bl	800a4d4 <ip4_output_if>
  }
  pbuf_free(p);
 80087ca:	69f8      	ldr	r0, [r7, #28]
 80087cc:	f7fc f928 	bl	8004a20 <pbuf_free>
 80087d0:	e000      	b.n	80087d4 <tcp_rst+0xc4>
    return;
 80087d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d024      	beq.n	8008834 <tcp_rexmit_rto+0x5a>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e002      	b.n	80087f8 <tcp_rexmit_rto+0x1e>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1f8      	bne.n	80087f2 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  ++pcb->nrtx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800881c:	3301      	adds	r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fd41 	bl	80082b4 <tcp_output>
 8008832:	e000      	b.n	8008836 <tcp_rexmit_rto+0x5c>
    return;
 8008834:	bf00      	nop
}
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d03e      	beq.n	80088ca <tcp_rexmit+0x8e>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008850:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3368      	adds	r3, #104	@ 0x68
 800885e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008860:	e002      	b.n	8008868 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d011      	beq.n	8008894 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	f7fb f9e5 	bl	8003c48 <lwip_htonl>
 800887e:	4604      	mov	r4, r0
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	4618      	mov	r0, r3
 8008888:	f7fb f9de 	bl	8003c48 <lwip_htonl>
 800888c:	4603      	mov	r3, r0
 800888e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008890:	2b00      	cmp	r3, #0
 8008892:	dbe6      	blt.n	8008862 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d103      	bne.n	80088b2 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088b8:	3301      	adds	r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80088c8:	e000      	b.n	80088cc <tcp_rexmit+0x90>
    return;
 80088ca:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd90      	pop	{r4, r7, pc}

080088d2 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d049      	beq.n	8008976 <tcp_rexmit_fast+0xa4>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7e9b      	ldrb	r3, [r3, #26]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d143      	bne.n	8008976 <tcp_rexmit_fast+0xa4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff ffa4 	bl	800883c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008900:	429a      	cmp	r2, r3
 8008902:	d908      	bls.n	8008916 <tcp_rexmit_fast+0x44>
      pcb->ssthresh = pcb->snd_wnd / 2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8008914:	e007      	b.n	8008926 <tcp_rexmit_fast+0x54>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800891c:	085b      	lsrs	r3, r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800892c:	461a      	mov	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	429a      	cmp	r2, r3
 8008936:	d206      	bcs.n	8008946 <tcp_rexmit_fast+0x74>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008950:	4619      	mov	r1, r3
 8008952:	0049      	lsls	r1, r1, #1
 8008954:	440b      	add	r3, r1
 8008956:	b29b      	uxth	r3, r3
 8008958:	4413      	add	r3, r2
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7e9b      	ldrb	r3, [r3, #26]
 8008966:	f043 0304 	orr.w	r3, r3, #4
 800896a:	b2da      	uxtb	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08a      	sub	sp, #40	@ 0x28
 8008982:	af04      	add	r7, sp, #16
 8008984:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800898a:	3b01      	subs	r3, #1
 800898c:	4618      	mov	r0, r3
 800898e:	f7fb f95b 	bl	8003c48 <lwip_htonl>
 8008992:	4603      	mov	r3, r0
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff fa6b 	bl	8007e74 <tcp_output_alloc_header>
 800899e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80089a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089aa:	e021      	b.n	80089f0 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fbef 	bl	800a194 <ip4_route>
 80089b6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80089be:	23fc      	movs	r3, #252	@ 0xfc
 80089c0:	75fb      	strb	r3, [r7, #23]
 80089c2:	e010      	b.n	80089e6 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7a98      	ldrb	r0, [r3, #10]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	2306      	movs	r3, #6
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	4603      	mov	r3, r0
 80089dc:	6938      	ldr	r0, [r7, #16]
 80089de:	f001 fd79 	bl	800a4d4 <ip4_output_if>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80089e6:	6938      	ldr	r0, [r7, #16]
 80089e8:	f7fc f81a 	bl	8004a20 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80089ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80089f8:	b590      	push	{r4, r7, lr}
 80089fa:	b08f      	sub	sp, #60	@ 0x3c
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a04:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a10:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e085      	b.n	8008b28 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	899b      	ldrh	r3, [r3, #12]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fb f8fa 	bl	8003c1e <lwip_htons>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <tcp_zero_window_probe+0x48>
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	891b      	ldrh	r3, [r3, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <tcp_zero_window_probe+0x48>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <tcp_zero_window_probe+0x4a>
 8008a40:	2300      	movs	r3, #0
 8008a42:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8008a44:	7ffb      	ldrb	r3, [r7, #31]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bf0c      	ite	eq
 8008a4a:	2301      	moveq	r3, #1
 8008a4c:	2300      	movne	r3, #0
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	8bba      	ldrh	r2, [r7, #28]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fa09 	bl	8007e74 <tcp_output_alloc_header>
 8008a62:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8008a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a6e:	e05b      	b.n	8008b28 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8008a76:	7ffb      	ldrb	r3, [r7, #31]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00e      	beq.n	8008a9a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	899b      	ldrh	r3, [r3, #12]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a86:	b29c      	uxth	r4, r3
 8008a88:	2011      	movs	r0, #17
 8008a8a:	f7fb f8c8 	bl	8003c1e <lwip_htons>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4323      	orrs	r3, r4
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	819a      	strh	r2, [r3, #12]
 8008a98:	e010      	b.n	8008abc <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	3314      	adds	r3, #20
 8008aa0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	6858      	ldr	r0, [r3, #4]
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	891a      	ldrh	r2, [r3, #8]
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	891b      	ldrh	r3, [r3, #8]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	6939      	ldr	r1, [r7, #16]
 8008ab8:	f7fc f8e2 	bl	8004c80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fb f8c0 	bl	8003c48 <lwip_htonl>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da02      	bge.n	8008ae0 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 fb55 	bl	800a194 <ip4_route>
 8008aea:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8008af2:	23fc      	movs	r3, #252	@ 0xfc
 8008af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008af8:	e011      	b.n	8008b1e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7a98      	ldrb	r0, [r3, #10]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	9302      	str	r3, [sp, #8]
 8008b08:	2306      	movs	r3, #6
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	4603      	mov	r3, r0
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f001 fcde 	bl	800a4d4 <ip4_output_if>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008b1e:	69b8      	ldr	r0, [r7, #24]
 8008b20:	f7fb ff7e 	bl	8004a20 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8008b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	372c      	adds	r7, #44	@ 0x2c
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd90      	pop	{r4, r7, pc}

08008b30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8008b38:	f7fc f90e 	bl	8004d58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b68 <tcpip_tcp_timer+0x38>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <tcpip_tcp_timer+0x1c>
 8008b44:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <tcpip_tcp_timer+0x3c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4908      	ldr	r1, [pc, #32]	@ (8008b70 <tcpip_tcp_timer+0x40>)
 8008b50:	20fa      	movs	r0, #250	@ 0xfa
 8008b52:	f000 f86f 	bl	8008c34 <sys_timeout>
 8008b56:	e003      	b.n	8008b60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8008b58:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <tcpip_tcp_timer+0x44>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
  }
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20006708 	.word	0x20006708
 8008b6c:	2000670c 	.word	0x2000670c
 8008b70:	08008b31 	.word	0x08008b31
 8008b74:	20006754 	.word	0x20006754

08008b78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <tcp_timer_needed+0x30>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10f      	bne.n	8008ba4 <tcp_timer_needed+0x2c>
 8008b84:	4b09      	ldr	r3, [pc, #36]	@ (8008bac <tcp_timer_needed+0x34>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d103      	bne.n	8008b94 <tcp_timer_needed+0x1c>
 8008b8c:	4b08      	ldr	r3, [pc, #32]	@ (8008bb0 <tcp_timer_needed+0x38>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8008b94:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <tcp_timer_needed+0x30>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4905      	ldr	r1, [pc, #20]	@ (8008bb4 <tcp_timer_needed+0x3c>)
 8008b9e:	20fa      	movs	r0, #250	@ 0xfa
 8008ba0:	f000 f848 	bl	8008c34 <sys_timeout>
  }
}
 8008ba4:	bf00      	nop
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20006754 	.word	0x20006754
 8008bac:	20006708 	.word	0x20006708
 8008bb0:	2000670c 	.word	0x2000670c
 8008bb4:	08008b31 	.word	0x08008b31

08008bb8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4903      	ldr	r1, [pc, #12]	@ (8008be0 <cyclic_timer+0x28>)
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f82e 	bl	8008c34 <sys_timeout>
}
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	08008bb9 	.word	0x08008bb9

08008be4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008bea:	2301      	movs	r3, #1
 8008bec:	607b      	str	r3, [r7, #4]
 8008bee:	e00e      	b.n	8008c0e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, (void*)(size_t)&lwip_cyclic_timers[i]);
 8008bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8008c28 <sys_timeouts_init+0x44>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008c28 <sys_timeouts_init+0x44>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	461a      	mov	r2, r3
 8008c02:	490a      	ldr	r1, [pc, #40]	@ (8008c2c <sys_timeouts_init+0x48>)
 8008c04:	f000 f816 	bl	8008c34 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	607b      	str	r3, [r7, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d9ed      	bls.n	8008bf0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8008c14:	f7fa fffc 	bl	8003c10 <sys_now>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4a05      	ldr	r2, [pc, #20]	@ (8008c30 <sys_timeouts_init+0x4c>)
 8008c1c:	6013      	str	r3, [r2, #0]
}
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	0800b334 	.word	0x0800b334
 8008c2c:	08008bb9 	.word	0x08008bb9
 8008c30:	20006750 	.word	0x20006750

08008c34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008c40:	2006      	movs	r0, #6
 8008c42:	f7fb fab9 	bl	80041b8 <memp_malloc>
 8008c46:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d07c      	beq.n	8008d48 <sys_timeout+0x114>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 8008c4e:	f7fa ffdf 	bl	8003c10 <sys_now>
 8008c52:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8008c54:	4b3e      	ldr	r3, [pc, #248]	@ (8008d50 <sys_timeout+0x11c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d105      	bne.n	8008c68 <sys_timeout+0x34>
    diff = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8008c60:	4a3c      	ldr	r2, [pc, #240]	@ (8008d54 <sys_timeout+0x120>)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	e004      	b.n	8008c72 <sys_timeout+0x3e>
  } else {
    diff = now - timeouts_last_time;
 8008c68:	4b3a      	ldr	r3, [pc, #232]	@ (8008d54 <sys_timeout+0x120>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	441a      	add	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8008c8e:	4b30      	ldr	r3, [pc, #192]	@ (8008d50 <sys_timeout+0x11c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <sys_timeout+0x6a>
    next_timeout = timeout;
 8008c96:	4a2e      	ldr	r2, [pc, #184]	@ (8008d50 <sys_timeout+0x11c>)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	6013      	str	r3, [r2, #0]
    return;
 8008c9c:	e055      	b.n	8008d4a <sys_timeout+0x116>
  }

  if (next_timeout->time > msecs) {
 8008c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d50 <sys_timeout+0x11c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d20f      	bcs.n	8008cca <sys_timeout+0x96>
    next_timeout->time -= msecs;
 8008caa:	4b29      	ldr	r3, [pc, #164]	@ (8008d50 <sys_timeout+0x11c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6859      	ldr	r1, [r3, #4]
 8008cb0:	4b27      	ldr	r3, [pc, #156]	@ (8008d50 <sys_timeout+0x11c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	1a8a      	subs	r2, r1, r2
 8008cb8:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8008cba:	4b25      	ldr	r3, [pc, #148]	@ (8008d50 <sys_timeout+0x11c>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8008cc2:	4a23      	ldr	r2, [pc, #140]	@ (8008d50 <sys_timeout+0x11c>)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	e03f      	b.n	8008d4a <sys_timeout+0x116>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8008cca:	4b21      	ldr	r3, [pc, #132]	@ (8008d50 <sys_timeout+0x11c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	e036      	b.n	8008d40 <sys_timeout+0x10c>
      timeout->time -= t->time;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	1ad2      	subs	r2, r2, r3
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <sys_timeout+0xc2>
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d921      	bls.n	8008d3a <sys_timeout+0x106>
        if (t->next != NULL) {
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <sys_timeout+0xde>
          t->next->time -= timeout->time;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6859      	ldr	r1, [r3, #4]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	1a8a      	subs	r2, r1, r2
 8008d0e:	605a      	str	r2, [r3, #4]
 8008d10:	e00b      	b.n	8008d2a <sys_timeout+0xf6>
        } else if (timeout->time > msecs) {
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d206      	bcs.n	8008d2a <sys_timeout+0xf6>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <sys_timeout+0x11c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	441a      	add	r2, r3
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	601a      	str	r2, [r3, #0]
        break;
 8008d38:	e007      	b.n	8008d4a <sys_timeout+0x116>
    for (t = next_timeout; t != NULL; t = t->next) {
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	61fb      	str	r3, [r7, #28]
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1c5      	bne.n	8008cd2 <sys_timeout+0x9e>
 8008d46:	e000      	b.n	8008d4a <sys_timeout+0x116>
    return;
 8008d48:	bf00      	nop
      }
    }
  }
}
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2000674c 	.word	0x2000674c
 8008d54:	20006750 	.word	0x20006750

08008d58 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8008d5e:	4b24      	ldr	r3, [pc, #144]	@ (8008df0 <sys_check_timeouts+0x98>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d040      	beq.n	8008de8 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8008d66:	f7fa ff53 	bl	8003c10 <sys_now>
 8008d6a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8008d6c:	4b21      	ldr	r3, [pc, #132]	@ (8008df4 <sys_check_timeouts+0x9c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8008d76:	4b20      	ldr	r3, [pc, #128]	@ (8008df8 <sys_check_timeouts+0xa0>)
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <sys_check_timeouts+0x2c>
 8008d80:	f7fb fbb6 	bl	80044f0 <pbuf_free_ooseq>
      had_one = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8008d88:	4b19      	ldr	r3, [pc, #100]	@ (8008df0 <sys_check_timeouts+0x98>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d026      	beq.n	8008de2 <sys_check_timeouts+0x8a>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d321      	bcc.n	8008de2 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <sys_check_timeouts+0x9c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4413      	add	r3, r2
 8008dac:	4a11      	ldr	r2, [pc, #68]	@ (8008df4 <sys_check_timeouts+0x9c>)
 8008dae:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008df0 <sys_check_timeouts+0x98>)
 8008dc0:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	2006      	movs	r0, #6
 8008dd2:	f7fb fa21 	bl	8004218 <memp_free>
        if (handler != NULL) {
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6838      	ldr	r0, [r7, #0]
 8008de0:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8008de2:	7cfb      	ldrb	r3, [r7, #19]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1c6      	bne.n	8008d76 <sys_check_timeouts+0x1e>
  }
}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2000674c 	.word	0x2000674c
 8008df4:	20006750 	.word	0x20006750
 8008df8:	200066f9 	.word	0x200066f9

08008dfc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008e00:	bf00      	nop
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008e16:	4b17      	ldr	r3, [pc, #92]	@ (8008e74 <udp_new_port+0x68>)
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	b291      	uxth	r1, r2
 8008e1e:	4a15      	ldr	r2, [pc, #84]	@ (8008e74 <udp_new_port+0x68>)
 8008e20:	8011      	strh	r1, [r2, #0]
 8008e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d103      	bne.n	8008e32 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008e2a:	4b12      	ldr	r3, [pc, #72]	@ (8008e74 <udp_new_port+0x68>)
 8008e2c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008e30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e32:	4b11      	ldr	r3, [pc, #68]	@ (8008e78 <udp_new_port+0x6c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	e011      	b.n	8008e5e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	8a5a      	ldrh	r2, [r3, #18]
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <udp_new_port+0x68>)
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d108      	bne.n	8008e58 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	80fb      	strh	r3, [r7, #6]
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e52:	d3e0      	bcc.n	8008e16 <udp_new_port+0xa>
        return 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e007      	b.n	8008e68 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1ea      	bne.n	8008e3a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8008e64:	4b03      	ldr	r3, [pc, #12]	@ (8008e74 <udp_new_port+0x68>)
 8008e66:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000008 	.word	0x20000008
 8008e78:	20006758 	.word	0x20006758

08008e7c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d018      	beq.n	8008ec2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d013      	beq.n	8008ebe <udp_input_local_match+0x42>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00f      	beq.n	8008ebe <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008e9e:	4b14      	ldr	r3, [pc, #80]	@ (8008ef0 <udp_input_local_match+0x74>)
 8008ea0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ea6:	d00a      	beq.n	8008ebe <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	4b10      	ldr	r3, [pc, #64]	@ (8008ef0 <udp_input_local_match+0x74>)
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	405a      	eors	r2, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d110      	bne.n	8008ee0 <udp_input_local_match+0x64>
          return 1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e00f      	b.n	8008ee2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all, multicast or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d009      	beq.n	8008edc <udp_input_local_match+0x60>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <udp_input_local_match+0x60>
       (ip_current_is_v6() && ip6_addr_ismulticast(ip6_current_dest_addr())) ||
#endif /* LWIP_IPV6_MLD */
#if LWIP_IGMP
       (!ip_current_is_v6() && ip4_addr_ismulticast(ip4_current_dest_addr())) ||
#endif /* LWIP_IGMP */
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <udp_input_local_match+0x74>)
 8008ed6:	695b      	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d101      	bne.n	8008ee0 <udp_input_local_match+0x64>
      return 1;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	200031a0 	.word	0x200031a0

08008ef4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b08d      	sub	sp, #52	@ 0x34
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	2b07      	cmp	r3, #7
 8008f08:	d803      	bhi.n	8008f12 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fb fd88 	bl	8004a20 <pbuf_free>
    goto end;
 8008f10:	e0bf      	b.n	8009092 <udp_input+0x19e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008f18:	4b60      	ldr	r3, [pc, #384]	@ (800909c <udp_input+0x1a8>)
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800909c <udp_input+0x1a8>)
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 fb8a 	bl	800a63c <ip4_addr_isbroadcast_u32>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fa fe73 	bl	8003c1e <lwip_htons>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fa fe6b 	bl	8003c1e <lwip_htons>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f58:	4b51      	ldr	r3, [pc, #324]	@ (80090a0 <udp_input+0x1ac>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5e:	e03b      	b.n	8008fd8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8008f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f62:	8a5b      	ldrh	r3, [r3, #18]
 8008f64:	89fa      	ldrh	r2, [r7, #14]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d131      	bne.n	8008fce <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8008f6a:	7cfb      	ldrb	r3, [r7, #19]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f72:	f7ff ff83 	bl	8008e7c <udp_input_local_match>
 8008f76:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d028      	beq.n	8008fce <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	7c1b      	ldrb	r3, [r3, #16]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <udp_input+0x9e>
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	8a9b      	ldrh	r3, [r3, #20]
 8008f96:	8a3a      	ldrh	r2, [r7, #16]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d118      	bne.n	8008fce <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d005      	beq.n	8008fb0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800909c <udp_input+0x1a8>)
 8008faa:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d10e      	bne.n	8008fce <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d014      	beq.n	8008fe0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8008fbe:	4b38      	ldr	r3, [pc, #224]	@ (80090a0 <udp_input+0x1ac>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8008fc6:	4a36      	ldr	r2, [pc, #216]	@ (80090a0 <udp_input+0x1ac>)
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8008fcc:	e008      	b.n	8008fe0 <udp_input+0xec>
      }
    }

    prev = pcb;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1c0      	bne.n	8008f60 <udp_input+0x6c>
 8008fde:	e000      	b.n	8008fe2 <udp_input+0xee>
        break;
 8008fe0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <udp_input+0xf8>
    pcb = uncon_pcb;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <udp_input+0x104>
    for_us = 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	76fb      	strb	r3, [r7, #27]
 8008ff6:	e00a      	b.n	800900e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b27      	ldr	r3, [pc, #156]	@ (800909c <udp_input+0x1a8>)
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	429a      	cmp	r2, r3
 8009004:	bf0c      	ite	eq
 8009006:	2301      	moveq	r3, #1
 8009008:	2300      	movne	r3, #0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800900e:	7efb      	ldrb	r3, [r7, #27]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d03b      	beq.n	800908c <udp_input+0x198>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8009014:	f06f 0107 	mvn.w	r1, #7
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7fb fcdd 	bl	80049d8 <pbuf_header>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <udp_input+0x138>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fb fcfb 	bl	8004a20 <pbuf_free>
      goto end;
 800902a:	e032      	b.n	8009092 <udp_input+0x19e>
    }

    if (pcb != NULL) {
 800902c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902e:	2b00      	cmp	r3, #0
 8009030:	d012      	beq.n	8009058 <udp_input+0x164>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <udp_input+0x15c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	699c      	ldr	r4, [r3, #24]
 800903e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009040:	69d8      	ldr	r0, [r3, #28]
 8009042:	8a3b      	ldrh	r3, [r7, #16]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4b17      	ldr	r3, [pc, #92]	@ (80090a4 <udp_input+0x1b0>)
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800904c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800904e:	e021      	b.n	8009094 <udp_input+0x1a0>
        pbuf_free(p);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7fb fce5 	bl	8004a20 <pbuf_free>
        goto end;
 8009056:	e01c      	b.n	8009092 <udp_input+0x19e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009058:	7cfb      	ldrb	r3, [r7, #19]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d112      	bne.n	8009084 <udp_input+0x190>
 800905e:	4b0f      	ldr	r3, [pc, #60]	@ (800909c <udp_input+0x1a8>)
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009066:	2be0      	cmp	r3, #224	@ 0xe0
 8009068:	d00c      	beq.n	8009084 <udp_input+0x190>
        pbuf_header_force(p, ip_current_header_tot_len() + UDP_HLEN);
 800906a:	4b0c      	ldr	r3, [pc, #48]	@ (800909c <udp_input+0x1a8>)
 800906c:	899b      	ldrh	r3, [r3, #12]
 800906e:	3308      	adds	r3, #8
 8009070:	b29b      	uxth	r3, r3
 8009072:	b21b      	sxth	r3, r3
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fb fcc0 	bl	80049fc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800907c:	2103      	movs	r1, #3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 f810 	bl	800a0a4 <icmp_dest_unreach>
      pbuf_free(p);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7fb fccb 	bl	8004a20 <pbuf_free>
  return;
 800908a:	e003      	b.n	8009094 <udp_input+0x1a0>
    pbuf_free(p);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7fb fcc7 	bl	8004a20 <pbuf_free>
  return;
 8009092:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009094:	372c      	adds	r7, #44	@ 0x2c
 8009096:	46bd      	mov	sp, r7
 8009098:	bd90      	pop	{r4, r7, pc}
 800909a:	bf00      	nop
 800909c:	200031a0 	.word	0x200031a0
 80090a0:	20006758 	.word	0x20006758
 80090a4:	200031b0 	.word	0x200031b0

080090a8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80090bc:	4b30      	ldr	r3, [pc, #192]	@ (8009180 <udp_bind+0xd8>)
 80090be:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ipaddr)) {
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <udp_bind+0x24>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <udp_bind+0x2a>
    return ERR_VAL;
 80090cc:	f06f 0305 	mvn.w	r3, #5
 80090d0:	e052      	b.n	8009178 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80090d6:	4b2b      	ldr	r3, [pc, #172]	@ (8009184 <udp_bind+0xdc>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e009      	b.n	80090f2 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d102      	bne.n	80090ec <udp_bind+0x44>
      rebind = 1;
 80090e6:	2301      	movs	r3, #1
 80090e8:	74fb      	strb	r3, [r7, #19]
      break;
 80090ea:	e005      	b.n	80090f8 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1f2      	bne.n	80090de <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <udp_bind+0x6a>
    port = udp_new_port();
 80090fe:	f7ff fe85 	bl	8008e0c <udp_new_port>
 8009102:	4603      	mov	r3, r0
 8009104:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d11e      	bne.n	800914a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800910c:	f06f 0307 	mvn.w	r3, #7
 8009110:	e032      	b.n	8009178 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009112:	4b1c      	ldr	r3, [pc, #112]	@ (8009184 <udp_bind+0xdc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	e014      	b.n	8009144 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	429a      	cmp	r2, r3
 8009120:	d00d      	beq.n	800913e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	8a5b      	ldrh	r3, [r3, #18]
 8009126:	88fa      	ldrh	r2, [r7, #6]
 8009128:	429a      	cmp	r2, r3
 800912a:	d108      	bne.n	800913e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8009134:	429a      	cmp	r2, r3
 8009136:	d102      	bne.n	800913e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8009138:	f06f 0307 	mvn.w	r3, #7
 800913c:	e01c      	b.n	8009178 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e7      	bne.n	800911a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <udp_bind+0xae>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	e000      	b.n	8009158 <udp_bind+0xb0>
 8009156:	2300      	movs	r3, #0
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	88fa      	ldrh	r2, [r7, #6]
 8009160:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8009162:	7cfb      	ldrb	r3, [r7, #19]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d106      	bne.n	8009176 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8009168:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <udp_bind+0xdc>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8009170:	4a04      	ldr	r2, [pc, #16]	@ (8009184 <udp_bind+0xdc>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	0800b34c 	.word	0x0800b34c
 8009184:	20006758 	.word	0x20006758

08009188 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	61da      	str	r2, [r3, #28]
}
 80091a0:	bf00      	nop
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80091b4:	4b15      	ldr	r3, [pc, #84]	@ (800920c <udp_remove+0x60>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d105      	bne.n	80091ca <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80091be:	4b13      	ldr	r3, [pc, #76]	@ (800920c <udp_remove+0x60>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	4a11      	ldr	r2, [pc, #68]	@ (800920c <udp_remove+0x60>)
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e017      	b.n	80091fa <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80091ca:	4b10      	ldr	r3, [pc, #64]	@ (800920c <udp_remove+0x60>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e010      	b.n	80091f4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <udp_remove+0x42>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d104      	bne.n	80091ee <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	60da      	str	r2, [r3, #12]
        break;
 80091ec:	e005      	b.n	80091fa <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1eb      	bne.n	80091d2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	2000      	movs	r0, #0
 80091fe:	f7fb f80b 	bl	8004218 <memp_free>
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20006758 	.word	0x20006758

08009210 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8009216:	2000      	movs	r0, #0
 8009218:	f7fa ffce 	bl	80041b8 <memp_malloc>
 800921c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d007      	beq.n	8009234 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8009224:	2220      	movs	r2, #32
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 ffb2 	bl	800b192 <memset>
    pcb->ttl = UDP_TTL;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	22ff      	movs	r2, #255	@ 0xff
 8009232:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8009234:	687b      	ldr	r3, [r7, #4]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01e      	beq.n	800928e <udp_netif_ip_addr_changed+0x4e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01a      	beq.n	800928e <udp_netif_ip_addr_changed+0x4e>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d017      	beq.n	800928e <udp_netif_ip_addr_changed+0x4e>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d013      	beq.n	800928e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <udp_netif_ip_addr_changed+0x5c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e00c      	b.n	8009288 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d103      	bne.n	8009282 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1ef      	bne.n	800926e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	20006758 	.word	0x20006758

080092a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80092a8:	4915      	ldr	r1, [pc, #84]	@ (8009300 <etharp_free_entry+0x60>)
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	440b      	add	r3, r1
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d013      	beq.n	80092e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80092bc:	4910      	ldr	r1, [pc, #64]	@ (8009300 <etharp_free_entry+0x60>)
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	4613      	mov	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	440b      	add	r3, r1
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fb fba7 	bl	8004a20 <pbuf_free>
    arp_table[i].q = NULL;
 80092d2:	490b      	ldr	r1, [pc, #44]	@ (8009300 <etharp_free_entry+0x60>)
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	4413      	add	r3, r2
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	440b      	add	r3, r1
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80092e4:	4906      	ldr	r1, [pc, #24]	@ (8009300 <etharp_free_entry+0x60>)
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	4413      	add	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	440b      	add	r3, r1
 80092f2:	3314      	adds	r3, #20
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	2000675c 	.word	0x2000675c

08009304 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800930a:	2300      	movs	r3, #0
 800930c:	71fb      	strb	r3, [r7, #7]
 800930e:	e096      	b.n	800943e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009310:	79fa      	ldrb	r2, [r7, #7]
 8009312:	494f      	ldr	r1, [pc, #316]	@ (8009450 <etharp_tmr+0x14c>)
 8009314:	4613      	mov	r3, r2
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	4413      	add	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	440b      	add	r3, r1
 800931e:	3314      	adds	r3, #20
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8009324:	79bb      	ldrb	r3, [r7, #6]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 8086 	beq.w	8009438 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800932c:	79fa      	ldrb	r2, [r7, #7]
 800932e:	4948      	ldr	r1, [pc, #288]	@ (8009450 <etharp_tmr+0x14c>)
 8009330:	4613      	mov	r3, r2
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	4413      	add	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	440b      	add	r3, r1
 800933a:	3312      	adds	r3, #18
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	3301      	adds	r3, #1
 8009340:	b298      	uxth	r0, r3
 8009342:	4943      	ldr	r1, [pc, #268]	@ (8009450 <etharp_tmr+0x14c>)
 8009344:	4613      	mov	r3, r2
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	4413      	add	r3, r2
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	440b      	add	r3, r1
 800934e:	3312      	adds	r3, #18
 8009350:	4602      	mov	r2, r0
 8009352:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009354:	79fa      	ldrb	r2, [r7, #7]
 8009356:	493e      	ldr	r1, [pc, #248]	@ (8009450 <etharp_tmr+0x14c>)
 8009358:	4613      	mov	r3, r2
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	4413      	add	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	440b      	add	r3, r1
 8009362:	3312      	adds	r3, #18
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800936a:	d215      	bcs.n	8009398 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800936c:	79fa      	ldrb	r2, [r7, #7]
 800936e:	4938      	ldr	r1, [pc, #224]	@ (8009450 <etharp_tmr+0x14c>)
 8009370:	4613      	mov	r3, r2
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	4413      	add	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	440b      	add	r3, r1
 800937a:	3314      	adds	r3, #20
 800937c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800937e:	2b01      	cmp	r3, #1
 8009380:	d10f      	bne.n	80093a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009382:	79fa      	ldrb	r2, [r7, #7]
 8009384:	4932      	ldr	r1, [pc, #200]	@ (8009450 <etharp_tmr+0x14c>)
 8009386:	4613      	mov	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4413      	add	r3, r2
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	440b      	add	r3, r1
 8009390:	3312      	adds	r3, #18
 8009392:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009394:	2b04      	cmp	r3, #4
 8009396:	d904      	bls.n	80093a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff ff80 	bl	80092a0 <etharp_free_entry>
 80093a0:	e04a      	b.n	8009438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80093a2:	79fa      	ldrb	r2, [r7, #7]
 80093a4:	492a      	ldr	r1, [pc, #168]	@ (8009450 <etharp_tmr+0x14c>)
 80093a6:	4613      	mov	r3, r2
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4413      	add	r3, r2
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	440b      	add	r3, r1
 80093b0:	3314      	adds	r3, #20
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d10a      	bne.n	80093ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80093b8:	79fa      	ldrb	r2, [r7, #7]
 80093ba:	4925      	ldr	r1, [pc, #148]	@ (8009450 <etharp_tmr+0x14c>)
 80093bc:	4613      	mov	r3, r2
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	4413      	add	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	440b      	add	r3, r1
 80093c6:	3314      	adds	r3, #20
 80093c8:	2204      	movs	r2, #4
 80093ca:	701a      	strb	r2, [r3, #0]
 80093cc:	e034      	b.n	8009438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80093ce:	79fa      	ldrb	r2, [r7, #7]
 80093d0:	491f      	ldr	r1, [pc, #124]	@ (8009450 <etharp_tmr+0x14c>)
 80093d2:	4613      	mov	r3, r2
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	4413      	add	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	440b      	add	r3, r1
 80093dc:	3314      	adds	r3, #20
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d10a      	bne.n	80093fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80093e4:	79fa      	ldrb	r2, [r7, #7]
 80093e6:	491a      	ldr	r1, [pc, #104]	@ (8009450 <etharp_tmr+0x14c>)
 80093e8:	4613      	mov	r3, r2
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	4413      	add	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	440b      	add	r3, r1
 80093f2:	3314      	adds	r3, #20
 80093f4:	2202      	movs	r2, #2
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	e01e      	b.n	8009438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80093fa:	79fa      	ldrb	r2, [r7, #7]
 80093fc:	4914      	ldr	r1, [pc, #80]	@ (8009450 <etharp_tmr+0x14c>)
 80093fe:	4613      	mov	r3, r2
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	4413      	add	r3, r2
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	440b      	add	r3, r1
 8009408:	3314      	adds	r3, #20
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d113      	bne.n	8009438 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009410:	79fa      	ldrb	r2, [r7, #7]
 8009412:	490f      	ldr	r1, [pc, #60]	@ (8009450 <etharp_tmr+0x14c>)
 8009414:	4613      	mov	r3, r2
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	4413      	add	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	440b      	add	r3, r1
 800941e:	3308      	adds	r3, #8
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	79fa      	ldrb	r2, [r7, #7]
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4a08      	ldr	r2, [pc, #32]	@ (8009450 <etharp_tmr+0x14c>)
 800942e:	4413      	add	r3, r2
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	f000 fd30 	bl	8009e98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	3301      	adds	r3, #1
 800943c:	71fb      	strb	r3, [r7, #7]
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	2b09      	cmp	r3, #9
 8009442:	f67f af65 	bls.w	8009310 <etharp_tmr+0xc>
      }
    }
  }
}
 8009446:	bf00      	nop
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	2000675c 	.word	0x2000675c

08009454 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	460b      	mov	r3, r1
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009462:	230a      	movs	r3, #10
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	230a      	movs	r3, #10
 8009468:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800946a:	230a      	movs	r3, #10
 800946c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8009472:	230a      	movs	r3, #10
 8009474:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	833b      	strh	r3, [r7, #24]
 800947a:	2300      	movs	r3, #0
 800947c:	82fb      	strh	r3, [r7, #22]
 800947e:	2300      	movs	r3, #0
 8009480:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009482:	2300      	movs	r3, #0
 8009484:	773b      	strb	r3, [r7, #28]
 8009486:	e086      	b.n	8009596 <etharp_find_entry+0x142>
    u8_t state = arp_table[i].state;
 8009488:	7f3a      	ldrb	r2, [r7, #28]
 800948a:	496e      	ldr	r1, [pc, #440]	@ (8009644 <etharp_find_entry+0x1f0>)
 800948c:	4613      	mov	r3, r2
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4413      	add	r3, r2
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	440b      	add	r3, r1
 8009496:	3314      	adds	r3, #20
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800949c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80094a0:	2b0a      	cmp	r3, #10
 80094a2:	d105      	bne.n	80094b0 <etharp_find_entry+0x5c>
 80094a4:	7cfb      	ldrb	r3, [r7, #19]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80094aa:	7f3b      	ldrb	r3, [r7, #28]
 80094ac:	777b      	strb	r3, [r7, #29]
 80094ae:	e06f      	b.n	8009590 <etharp_find_entry+0x13c>
    } else if (state != ETHARP_STATE_EMPTY) {
 80094b0:	7cfb      	ldrb	r3, [r7, #19]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d06c      	beq.n	8009590 <etharp_find_entry+0x13c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00f      	beq.n	80094dc <etharp_find_entry+0x88>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	7f3a      	ldrb	r2, [r7, #28]
 80094c2:	4860      	ldr	r0, [pc, #384]	@ (8009644 <etharp_find_entry+0x1f0>)
 80094c4:	4613      	mov	r3, r2
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	4413      	add	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	4403      	add	r3, r0
 80094ce:	3304      	adds	r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4299      	cmp	r1, r3
 80094d4:	d102      	bne.n	80094dc <etharp_find_entry+0x88>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80094d6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80094da:	e0ae      	b.n	800963a <etharp_find_entry+0x1e6>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80094dc:	7cfb      	ldrb	r3, [r7, #19]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d13b      	bne.n	800955a <etharp_find_entry+0x106>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80094e2:	7f3a      	ldrb	r2, [r7, #28]
 80094e4:	4957      	ldr	r1, [pc, #348]	@ (8009644 <etharp_find_entry+0x1f0>)
 80094e6:	4613      	mov	r3, r2
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	4413      	add	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	440b      	add	r3, r1
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d018      	beq.n	8009528 <etharp_find_entry+0xd4>
          if (arp_table[i].ctime >= age_queue) {
 80094f6:	7f3a      	ldrb	r2, [r7, #28]
 80094f8:	4952      	ldr	r1, [pc, #328]	@ (8009644 <etharp_find_entry+0x1f0>)
 80094fa:	4613      	mov	r3, r2
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	4413      	add	r3, r2
 8009500:	00db      	lsls	r3, r3, #3
 8009502:	440b      	add	r3, r1
 8009504:	3312      	adds	r3, #18
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	8b3a      	ldrh	r2, [r7, #24]
 800950a:	429a      	cmp	r2, r3
 800950c:	d840      	bhi.n	8009590 <etharp_find_entry+0x13c>
            old_queue = i;
 800950e:	7f3b      	ldrb	r3, [r7, #28]
 8009510:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8009512:	7f3a      	ldrb	r2, [r7, #28]
 8009514:	494b      	ldr	r1, [pc, #300]	@ (8009644 <etharp_find_entry+0x1f0>)
 8009516:	4613      	mov	r3, r2
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	4413      	add	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	440b      	add	r3, r1
 8009520:	3312      	adds	r3, #18
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	833b      	strh	r3, [r7, #24]
 8009526:	e033      	b.n	8009590 <etharp_find_entry+0x13c>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009528:	7f3a      	ldrb	r2, [r7, #28]
 800952a:	4946      	ldr	r1, [pc, #280]	@ (8009644 <etharp_find_entry+0x1f0>)
 800952c:	4613      	mov	r3, r2
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	4413      	add	r3, r2
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	440b      	add	r3, r1
 8009536:	3312      	adds	r3, #18
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	8afa      	ldrh	r2, [r7, #22]
 800953c:	429a      	cmp	r2, r3
 800953e:	d827      	bhi.n	8009590 <etharp_find_entry+0x13c>
            old_pending = i;
 8009540:	7f3b      	ldrb	r3, [r7, #28]
 8009542:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8009544:	7f3a      	ldrb	r2, [r7, #28]
 8009546:	493f      	ldr	r1, [pc, #252]	@ (8009644 <etharp_find_entry+0x1f0>)
 8009548:	4613      	mov	r3, r2
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	4413      	add	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	440b      	add	r3, r1
 8009552:	3312      	adds	r3, #18
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	82fb      	strh	r3, [r7, #22]
 8009558:	e01a      	b.n	8009590 <etharp_find_entry+0x13c>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800955a:	7cfb      	ldrb	r3, [r7, #19]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d917      	bls.n	8009590 <etharp_find_entry+0x13c>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009560:	7f3a      	ldrb	r2, [r7, #28]
 8009562:	4938      	ldr	r1, [pc, #224]	@ (8009644 <etharp_find_entry+0x1f0>)
 8009564:	4613      	mov	r3, r2
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	4413      	add	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	440b      	add	r3, r1
 800956e:	3312      	adds	r3, #18
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	8aba      	ldrh	r2, [r7, #20]
 8009574:	429a      	cmp	r2, r3
 8009576:	d80b      	bhi.n	8009590 <etharp_find_entry+0x13c>
            old_stable = i;
 8009578:	7f3b      	ldrb	r3, [r7, #28]
 800957a:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800957c:	7f3a      	ldrb	r2, [r7, #28]
 800957e:	4931      	ldr	r1, [pc, #196]	@ (8009644 <etharp_find_entry+0x1f0>)
 8009580:	4613      	mov	r3, r2
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	4413      	add	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	440b      	add	r3, r1
 800958a:	3312      	adds	r3, #18
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009590:	7f3b      	ldrb	r3, [r7, #28]
 8009592:	3301      	adds	r3, #1
 8009594:	773b      	strb	r3, [r7, #28]
 8009596:	7f3b      	ldrb	r3, [r7, #28]
 8009598:	2b09      	cmp	r3, #9
 800959a:	f67f af75 	bls.w	8009488 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800959e:	7afb      	ldrb	r3, [r7, #11]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d108      	bne.n	80095ba <etharp_find_entry+0x166>
 80095a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80095ac:	2b0a      	cmp	r3, #10
 80095ae:	d107      	bne.n	80095c0 <etharp_find_entry+0x16c>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <etharp_find_entry+0x16c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095be:	e03c      	b.n	800963a <etharp_find_entry+0x1e6>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80095c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	dc02      	bgt.n	80095ce <etharp_find_entry+0x17a>
    i = empty;
 80095c8:	7f7b      	ldrb	r3, [r7, #29]
 80095ca:	773b      	strb	r3, [r7, #28]
 80095cc:	e01b      	b.n	8009606 <etharp_find_entry+0x1b2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80095ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	dc02      	bgt.n	80095dc <etharp_find_entry+0x188>
      /* recycle oldest stable*/
      i = old_stable;
 80095d6:	7fbb      	ldrb	r3, [r7, #30]
 80095d8:	773b      	strb	r3, [r7, #28]
 80095da:	e010      	b.n	80095fe <etharp_find_entry+0x1aa>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80095dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	dc02      	bgt.n	80095ea <etharp_find_entry+0x196>
      /* recycle oldest pending */
      i = old_pending;
 80095e4:	7ffb      	ldrb	r3, [r7, #31]
 80095e6:	773b      	strb	r3, [r7, #28]
 80095e8:	e009      	b.n	80095fe <etharp_find_entry+0x1aa>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80095ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095ee:	2b09      	cmp	r3, #9
 80095f0:	dc02      	bgt.n	80095f8 <etharp_find_entry+0x1a4>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80095f2:	7efb      	ldrb	r3, [r7, #27]
 80095f4:	773b      	strb	r3, [r7, #28]
 80095f6:	e002      	b.n	80095fe <etharp_find_entry+0x1aa>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80095f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095fc:	e01d      	b.n	800963a <etharp_find_entry+0x1e6>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 80095fe:	7f3b      	ldrb	r3, [r7, #28]
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fe4d 	bl	80092a0 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00a      	beq.n	8009622 <etharp_find_entry+0x1ce>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800960c:	7f3a      	ldrb	r2, [r7, #28]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6819      	ldr	r1, [r3, #0]
 8009612:	480c      	ldr	r0, [pc, #48]	@ (8009644 <etharp_find_entry+0x1f0>)
 8009614:	4613      	mov	r3, r2
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	4413      	add	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4403      	add	r3, r0
 800961e:	3304      	adds	r3, #4
 8009620:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009622:	7f3a      	ldrb	r2, [r7, #28]
 8009624:	4907      	ldr	r1, [pc, #28]	@ (8009644 <etharp_find_entry+0x1f0>)
 8009626:	4613      	mov	r3, r2
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	4413      	add	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	440b      	add	r3, r1
 8009630:	3312      	adds	r3, #18
 8009632:	2200      	movs	r2, #0
 8009634:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8009636:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	2000675c 	.word	0x2000675c

08009648 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d012      	beq.n	8009682 <etharp_update_arp_entry+0x3a>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68f9      	ldr	r1, [r7, #12]
 800966a:	4618      	mov	r0, r3
 800966c:	f000 ffe6 	bl	800a63c <ip4_addr_isbroadcast_u32>
 8009670:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009672:	2b00      	cmp	r3, #0
 8009674:	d105      	bne.n	8009682 <etharp_update_arp_entry+0x3a>
      ip4_addr_ismulticast(ipaddr)) {
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800967e:	2be0      	cmp	r3, #224	@ 0xe0
 8009680:	d102      	bne.n	8009688 <etharp_update_arp_entry+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009682:	f06f 030f 	mvn.w	r3, #15
 8009686:	e06c      	b.n	8009762 <etharp_update_arp_entry+0x11a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4619      	mov	r1, r3
 800968e:	68b8      	ldr	r0, [r7, #8]
 8009690:	f7ff fee0 	bl	8009454 <etharp_find_entry>
 8009694:	4603      	mov	r3, r0
 8009696:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009698:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800969c:	2b00      	cmp	r3, #0
 800969e:	da02      	bge.n	80096a6 <etharp_update_arp_entry+0x5e>
    return (err_t)i;
 80096a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a4:	e05d      	b.n	8009762 <etharp_update_arp_entry+0x11a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80096a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80096aa:	4930      	ldr	r1, [pc, #192]	@ (800976c <etharp_update_arp_entry+0x124>)
 80096ac:	4613      	mov	r3, r2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4413      	add	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	440b      	add	r3, r1
 80096b6:	3314      	adds	r3, #20
 80096b8:	2202      	movs	r2, #2
 80096ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80096bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80096c0:	492a      	ldr	r1, [pc, #168]	@ (800976c <etharp_update_arp_entry+0x124>)
 80096c2:	4613      	mov	r3, r2
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	4413      	add	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	440b      	add	r3, r1
 80096cc:	3308      	adds	r3, #8
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80096d2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80096d6:	4613      	mov	r3, r2
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	4413      	add	r3, r2
 80096dc:	00db      	lsls	r3, r3, #3
 80096de:	3308      	adds	r3, #8
 80096e0:	4a22      	ldr	r2, [pc, #136]	@ (800976c <etharp_update_arp_entry+0x124>)
 80096e2:	4413      	add	r3, r2
 80096e4:	3304      	adds	r3, #4
 80096e6:	2206      	movs	r2, #6
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fd90 	bl	800b210 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80096f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80096f4:	491d      	ldr	r1, [pc, #116]	@ (800976c <etharp_update_arp_entry+0x124>)
 80096f6:	4613      	mov	r3, r2
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	4413      	add	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	440b      	add	r3, r1
 8009700:	3312      	adds	r3, #18
 8009702:	2200      	movs	r2, #0
 8009704:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009706:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800970a:	4918      	ldr	r1, [pc, #96]	@ (800976c <etharp_update_arp_entry+0x124>)
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	440b      	add	r3, r1
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d021      	beq.n	8009760 <etharp_update_arp_entry+0x118>
    struct pbuf *p = arp_table[i].q;
 800971c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009720:	4912      	ldr	r1, [pc, #72]	@ (800976c <etharp_update_arp_entry+0x124>)
 8009722:	4613      	mov	r3, r2
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	4413      	add	r3, r2
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	440b      	add	r3, r1
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009730:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009734:	490d      	ldr	r1, [pc, #52]	@ (800976c <etharp_update_arp_entry+0x124>)
 8009736:	4613      	mov	r3, r2
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	4413      	add	r3, r2
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	440b      	add	r3, r1
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 800974a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6939      	ldr	r1, [r7, #16]
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f001 fcd7 	bl	800b108 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800975a:	6938      	ldr	r0, [r7, #16]
 800975c:	f7fb f960 	bl	8004a20 <pbuf_free>
  }
  return ERR_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	2000675c 	.word	0x2000675c

08009770 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
 800977c:	e01f      	b.n	80097be <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800977e:	7bfa      	ldrb	r2, [r7, #15]
 8009780:	4913      	ldr	r1, [pc, #76]	@ (80097d0 <etharp_cleanup_netif+0x60>)
 8009782:	4613      	mov	r3, r2
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	4413      	add	r3, r2
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	440b      	add	r3, r1
 800978c:	3314      	adds	r3, #20
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00f      	beq.n	80097b8 <etharp_cleanup_netif+0x48>
 8009798:	7bfa      	ldrb	r2, [r7, #15]
 800979a:	490d      	ldr	r1, [pc, #52]	@ (80097d0 <etharp_cleanup_netif+0x60>)
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	440b      	add	r3, r1
 80097a6:	3308      	adds	r3, #8
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d103      	bne.n	80097b8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff fd74 	bl	80092a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	3301      	adds	r3, #1
 80097bc:	73fb      	strb	r3, [r7, #15]
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	2b09      	cmp	r3, #9
 80097c2:	d9dc      	bls.n	800977e <etharp_cleanup_netif+0xe>
    }
  }
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	2000675c 	.word	0x2000675c

080097d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af02      	add	r7, sp, #8
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 8087 	beq.w	80098f4 <etharp_input+0x120>

  hdr = (struct etharp_hdr *)p->payload;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097f6:	d10c      	bne.n	8009812 <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80097fc:	2b06      	cmp	r3, #6
 80097fe:	d108      	bne.n	8009812 <etharp_input+0x3e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009804:	2b04      	cmp	r3, #4
 8009806:	d104      	bne.n	8009812 <etharp_input+0x3e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	885b      	ldrh	r3, [r3, #2]
 800980c:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800980e:	2b08      	cmp	r3, #8
 8009810:	d003      	beq.n	800981a <etharp_input+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fb f904 	bl	8004a20 <pbuf_free>
    return;
 8009818:	e06c      	b.n	80098f4 <etharp_input+0x120>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	330e      	adds	r3, #14
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3318      	adds	r3, #24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	3304      	adds	r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d102      	bne.n	800983a <etharp_input+0x66>
    for_us = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
 8009838:	e009      	b.n	800984e <etharp_input+0x7a>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	3304      	adds	r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	bf0c      	ite	eq
 8009846:	2301      	moveq	r3, #1
 8009848:	2300      	movne	r3, #0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f103 0208 	add.w	r2, r3, #8
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <etharp_input+0x8a>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <etharp_input+0x8c>
 800985e:	2302      	movs	r3, #2
 8009860:	f107 010c 	add.w	r1, r7, #12
 8009864:	6838      	ldr	r0, [r7, #0]
 8009866:	f7ff feef 	bl	8009648 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	88db      	ldrh	r3, [r3, #6]
 800986e:	b29b      	uxth	r3, r3
 8009870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009874:	d003      	beq.n	800987e <etharp_input+0xaa>
 8009876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800987a:	d035      	beq.n	80098e8 <etharp_input+0x114>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800987c:	e037      	b.n	80098ee <etharp_input+0x11a>
    if (for_us) {
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d033      	beq.n	80098ec <etharp_input+0x118>
      hdr->opcode = lwip_htons(ARP_REPLY);
 8009884:	2002      	movs	r0, #2
 8009886:	f7fa f9ca 	bl	8003c1e <lwip_htons>
 800988a:	4603      	mov	r3, r0
 800988c:	461a      	mov	r2, r3
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	80da      	strh	r2, [r3, #6]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3318      	adds	r3, #24
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	320e      	adds	r2, #14
 800989a:	6812      	ldr	r2, [r2, #0]
 800989c:	601a      	str	r2, [r3, #0]
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	330e      	adds	r3, #14
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	3204      	adds	r2, #4
 80098a6:	6812      	ldr	r2, [r2, #0]
 80098a8:	601a      	str	r2, [r3, #0]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f103 0012 	add.w	r0, r3, #18
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	3308      	adds	r3, #8
 80098b4:	2206      	movs	r2, #6
 80098b6:	4619      	mov	r1, r3
 80098b8:	f001 fcaa 	bl	800b210 <memcpy>
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f103 0008 	add.w	r0, r3, #8
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	3325      	adds	r3, #37	@ 0x25
 80098c6:	2206      	movs	r2, #6
 80098c8:	4619      	mov	r1, r3
 80098ca:	f001 fca1 	bl	800b210 <memcpy>
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f103 0208 	add.w	r2, r3, #8
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3312      	adds	r3, #18
 80098d8:	f640 0106 	movw	r1, #2054	@ 0x806
 80098dc:	9100      	str	r1, [sp, #0]
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	6838      	ldr	r0, [r7, #0]
 80098e2:	f001 fc11 	bl	800b108 <ethernet_output>
    break;
 80098e6:	e001      	b.n	80098ec <etharp_input+0x118>
    break;
 80098e8:	bf00      	nop
 80098ea:	e000      	b.n	80098ee <etharp_input+0x11a>
    break;
 80098ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fb f896 	bl	8004a20 <pbuf_free>
}
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800990a:	79fa      	ldrb	r2, [r7, #7]
 800990c:	493b      	ldr	r1, [pc, #236]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 800990e:	4613      	mov	r3, r2
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4413      	add	r3, r2
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	440b      	add	r3, r1
 8009918:	3314      	adds	r3, #20
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d153      	bne.n	80099c8 <etharp_output_to_arp_index+0xcc>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009920:	79fa      	ldrb	r2, [r7, #7]
 8009922:	4936      	ldr	r1, [pc, #216]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 8009924:	4613      	mov	r3, r2
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	440b      	add	r3, r1
 800992e:	3312      	adds	r3, #18
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8009936:	d919      	bls.n	800996c <etharp_output_to_arp_index+0x70>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	4613      	mov	r3, r2
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4413      	add	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	4a2e      	ldr	r2, [pc, #184]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 8009944:	4413      	add	r3, r2
 8009946:	3304      	adds	r3, #4
 8009948:	4619      	mov	r1, r3
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 faa4 	bl	8009e98 <etharp_request>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d138      	bne.n	80099c8 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009956:	79fa      	ldrb	r2, [r7, #7]
 8009958:	4928      	ldr	r1, [pc, #160]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	440b      	add	r3, r1
 8009964:	3314      	adds	r3, #20
 8009966:	2203      	movs	r2, #3
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	e02d      	b.n	80099c8 <etharp_output_to_arp_index+0xcc>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800996c:	79fa      	ldrb	r2, [r7, #7]
 800996e:	4923      	ldr	r1, [pc, #140]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 8009970:	4613      	mov	r3, r2
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4413      	add	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	440b      	add	r3, r1
 800997a:	3312      	adds	r3, #18
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8009982:	d321      	bcc.n	80099c8 <etharp_output_to_arp_index+0xcc>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009984:	79fa      	ldrb	r2, [r7, #7]
 8009986:	4613      	mov	r3, r2
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	4413      	add	r3, r2
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	4a1b      	ldr	r2, [pc, #108]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 8009990:	4413      	add	r3, r2
 8009992:	1d19      	adds	r1, r3, #4
 8009994:	79fa      	ldrb	r2, [r7, #7]
 8009996:	4613      	mov	r3, r2
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4413      	add	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	3308      	adds	r3, #8
 80099a0:	4a16      	ldr	r2, [pc, #88]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 80099a2:	4413      	add	r3, r2
 80099a4:	3304      	adds	r3, #4
 80099a6:	461a      	mov	r2, r3
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 fa53 	bl	8009e54 <etharp_request_dst>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d109      	bne.n	80099c8 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80099b4:	79fa      	ldrb	r2, [r7, #7]
 80099b6:	4911      	ldr	r1, [pc, #68]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 80099b8:	4613      	mov	r3, r2
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	3314      	adds	r3, #20
 80099c4:	2203      	movs	r2, #3
 80099c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 80099ce:	79fa      	ldrb	r2, [r7, #7]
 80099d0:	4613      	mov	r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	4413      	add	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	3308      	adds	r3, #8
 80099da:	4a08      	ldr	r2, [pc, #32]	@ (80099fc <etharp_output_to_arp_index+0x100>)
 80099dc:	4413      	add	r3, r2
 80099de:	3304      	adds	r3, #4
 80099e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099e4:	9200      	str	r2, [sp, #0]
 80099e6:	460a      	mov	r2, r1
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f001 fb8c 	bl	800b108 <ethernet_output>
 80099f0:	4603      	mov	r3, r0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	2000675c 	.word	0x2000675c

08009a00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	@ 0x28
 8009a04:	af02      	add	r7, sp, #8
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	61bb      	str	r3, [r7, #24]

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68f9      	ldr	r1, [r7, #12]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fe10 	bl	800a63c <ip4_addr_isbroadcast_u32>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <etharp_output+0x28>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8009a22:	4b57      	ldr	r3, [pc, #348]	@ (8009b80 <etharp_output+0x180>)
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	e09b      	b.n	8009b60 <etharp_output+0x160>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a30:	2be0      	cmp	r3, #224	@ 0xe0
 8009a32:	d118      	bne.n	8009a66 <etharp_output+0x66>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009a34:	2301      	movs	r3, #1
 8009a36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009a3c:	235e      	movs	r3, #94	@ 0x5e
 8009a3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3301      	adds	r3, #1
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3302      	adds	r3, #2
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3303      	adds	r3, #3
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009a5e:	f107 0310 	add.w	r3, r7, #16
 8009a62:	61fb      	str	r3, [r7, #28]
 8009a64:	e07c      	b.n	8009b60 <etharp_output+0x160>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	405a      	eors	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3308      	adds	r3, #8
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d012      	beq.n	8009aa4 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009a84:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00b      	beq.n	8009aa4 <etharp_output+0xa4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	330c      	adds	r3, #12
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <etharp_output+0x9e>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	330c      	adds	r3, #12
 8009a9a:	61bb      	str	r3, [r7, #24]
 8009a9c:	e002      	b.n	8009aa4 <etharp_output+0xa4>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009a9e:	f06f 0303 	mvn.w	r3, #3
 8009aa2:	e069      	b.n	8009b78 <etharp_output+0x178>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009aa4:	4b37      	ldr	r3, [pc, #220]	@ (8009b84 <etharp_output+0x184>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4a37      	ldr	r2, [pc, #220]	@ (8009b88 <etharp_output+0x188>)
 8009aac:	460b      	mov	r3, r1
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	440b      	add	r3, r1
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3314      	adds	r3, #20
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d917      	bls.n	8009aee <etharp_output+0xee>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4b30      	ldr	r3, [pc, #192]	@ (8009b84 <etharp_output+0x184>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	492f      	ldr	r1, [pc, #188]	@ (8009b88 <etharp_output+0x188>)
 8009aca:	4603      	mov	r3, r0
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4403      	add	r3, r0
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	440b      	add	r3, r1
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d108      	bne.n	8009aee <etharp_output+0xee>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009adc:	4b29      	ldr	r3, [pc, #164]	@ (8009b84 <etharp_output+0x184>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff ff09 	bl	80098fc <etharp_output_to_arp_index>
 8009aea:	4603      	mov	r3, r0
 8009aec:	e044      	b.n	8009b78 <etharp_output+0x178>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
 8009af2:	e02a      	b.n	8009b4a <etharp_output+0x14a>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009af4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009af8:	4923      	ldr	r1, [pc, #140]	@ (8009b88 <etharp_output+0x188>)
 8009afa:	4613      	mov	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	440b      	add	r3, r1
 8009b04:	3314      	adds	r3, #20
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d918      	bls.n	8009b3e <etharp_output+0x13e>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009b14:	481c      	ldr	r0, [pc, #112]	@ (8009b88 <etharp_output+0x188>)
 8009b16:	4613      	mov	r3, r2
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	4413      	add	r3, r2
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	4403      	add	r3, r0
 8009b20:	3304      	adds	r3, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009b24:	4299      	cmp	r1, r3
 8009b26:	d10a      	bne.n	8009b3e <etharp_output+0x13e>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8009b28:	7dfa      	ldrb	r2, [r7, #23]
 8009b2a:	4b16      	ldr	r3, [pc, #88]	@ (8009b84 <etharp_output+0x184>)
 8009b2c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	461a      	mov	r2, r3
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff fee1 	bl	80098fc <etharp_output_to_arp_index>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	e01c      	b.n	8009b78 <etharp_output+0x178>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	3301      	adds	r3, #1
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	75fb      	strb	r3, [r7, #23]
 8009b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	ddd0      	ble.n	8009af4 <etharp_output+0xf4>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	69b9      	ldr	r1, [r7, #24]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f818 	bl	8009b8c <etharp_query>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	e00b      	b.n	8009b78 <etharp_output+0x178>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8009b66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	68b9      	ldr	r1, [r7, #8]
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f001 fac9 	bl	800b108 <ethernet_output>
 8009b76:	4603      	mov	r3, r0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3720      	adds	r7, #32
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	0800b350 	.word	0x0800b350
 8009b84:	2000684c 	.word	0x2000684c
 8009b88:	2000675c 	.word	0x2000675c

08009b8c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08c      	sub	sp, #48	@ 0x30
 8009b90:	af02      	add	r7, sp, #8
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3325      	adds	r3, #37	@ 0x25
 8009b9c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009b9e:	23ff      	movs	r3, #255	@ 0xff
 8009ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68f9      	ldr	r1, [r7, #12]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fd44 	bl	800a63c <ip4_addr_isbroadcast_u32>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009bc2:	2be0      	cmp	r3, #224	@ 0xe0
 8009bc4:	d006      	beq.n	8009bd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009bd4:	f06f 030f 	mvn.w	r3, #15
 8009bd8:	e0d4      	b.n	8009d84 <etharp_query+0x1f8>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	2101      	movs	r1, #1
 8009bde:	68b8      	ldr	r0, [r7, #8]
 8009be0:	f7ff fc38 	bl	8009454 <etharp_find_entry>
 8009be4:	4603      	mov	r3, r0
 8009be6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8009be8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	da02      	bge.n	8009bf6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8009bf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bf4:	e0c6      	b.n	8009d84 <etharp_query+0x1f8>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009bf6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bfa:	4964      	ldr	r1, [pc, #400]	@ (8009d8c <etharp_query+0x200>)
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	4413      	add	r3, r2
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	440b      	add	r3, r1
 8009c06:	3314      	adds	r3, #20
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d117      	bne.n	8009c3e <etharp_query+0xb2>
    is_new_entry = 1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009c12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c16:	495d      	ldr	r1, [pc, #372]	@ (8009d8c <etharp_query+0x200>)
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	440b      	add	r3, r1
 8009c22:	3314      	adds	r3, #20
 8009c24:	2201      	movs	r2, #1
 8009c26:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009c28:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c2c:	4957      	ldr	r1, [pc, #348]	@ (8009d8c <etharp_query+0x200>)
 8009c2e:	4613      	mov	r3, r2
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	4413      	add	r3, r2
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	440b      	add	r3, r1
 8009c38:	3308      	adds	r3, #8
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <etharp_query+0xbe>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10c      	bne.n	8009c64 <etharp_query+0xd8>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f923 	bl	8009e98 <etharp_request>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <etharp_query+0xd8>
      return result;
 8009c5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009c62:	e08f      	b.n	8009d84 <etharp_query+0x1f8>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009c64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c68:	4948      	ldr	r1, [pc, #288]	@ (8009d8c <etharp_query+0x200>)
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	4413      	add	r3, r2
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	440b      	add	r3, r1
 8009c74:	3314      	adds	r3, #20
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d918      	bls.n	8009cae <etharp_query+0x122>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8009c7c:	7cfa      	ldrb	r2, [r7, #19]
 8009c7e:	4b44      	ldr	r3, [pc, #272]	@ (8009d90 <etharp_query+0x204>)
 8009c80:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009c82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	3308      	adds	r3, #8
 8009c90:	4a3e      	ldr	r2, [pc, #248]	@ (8009d8c <etharp_query+0x200>)
 8009c92:	4413      	add	r3, r2
 8009c94:	3304      	adds	r3, #4
 8009c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c9a:	9200      	str	r2, [sp, #0]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f001 fa31 	bl	800b108 <ethernet_output>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009cac:	e068      	b.n	8009d80 <etharp_query+0x1f4>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009cae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cb2:	4936      	ldr	r1, [pc, #216]	@ (8009d8c <etharp_query+0x200>)
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	4413      	add	r3, r2
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	440b      	add	r3, r1
 8009cbe:	3314      	adds	r3, #20
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d15c      	bne.n	8009d80 <etharp_query+0x1f4>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009cce:	e009      	b.n	8009ce4 <etharp_query+0x158>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (p->type != PBUF_ROM) {
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	7b1b      	ldrb	r3, [r3, #12]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d002      	beq.n	8009cde <etharp_query+0x152>
        copy_needed = 1;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	61bb      	str	r3, [r7, #24]
        break;
 8009cdc:	e005      	b.n	8009cea <etharp_query+0x15e>
      }
      p = p->next;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1f2      	bne.n	8009cd0 <etharp_query+0x144>
    }
    if (copy_needed) {
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d017      	beq.n	8009d20 <etharp_query+0x194>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	891b      	ldrh	r3, [r3, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	2002      	movs	r0, #2
 8009cfa:	f7fa fc29 	bl	8004550 <pbuf_alloc>
 8009cfe:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d011      	beq.n	8009d2a <etharp_query+0x19e>
        if (pbuf_copy(p, q) != ERR_OK) {
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	69f8      	ldr	r0, [r7, #28]
 8009d0a:	f7fa ff31 	bl	8004b70 <pbuf_copy>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <etharp_query+0x19e>
          pbuf_free(p);
 8009d14:	69f8      	ldr	r0, [r7, #28]
 8009d16:	f7fa fe83 	bl	8004a20 <pbuf_free>
          p = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61fb      	str	r3, [r7, #28]
 8009d1e:	e004      	b.n	8009d2a <etharp_query+0x19e>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009d24:	69f8      	ldr	r0, [r7, #28]
 8009d26:	f7fa fee3 	bl	8004af0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d024      	beq.n	8009d7a <etharp_query+0x1ee>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009d30:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d34:	4915      	ldr	r1, [pc, #84]	@ (8009d8c <etharp_query+0x200>)
 8009d36:	4613      	mov	r3, r2
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	440b      	add	r3, r1
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <etharp_query+0x1d2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8009d46:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d4a:	4910      	ldr	r1, [pc, #64]	@ (8009d8c <etharp_query+0x200>)
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	4413      	add	r3, r2
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	440b      	add	r3, r1
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fa fe61 	bl	8004a20 <pbuf_free>
      }
      arp_table[i].q = p;
 8009d5e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d62:	490a      	ldr	r1, [pc, #40]	@ (8009d8c <etharp_query+0x200>)
 8009d64:	4613      	mov	r3, r2
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	4413      	add	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	440b      	add	r3, r1
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009d78:	e002      	b.n	8009d80 <etharp_query+0x1f4>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009d7a:	23ff      	movs	r3, #255	@ 0xff
 8009d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8009d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3728      	adds	r7, #40	@ 0x28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	2000675c 	.word	0x2000675c
 8009d90:	2000684c 	.word	0x2000684c

08009d94 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	@ 0x28
 8009d98:	af02      	add	r7, sp, #8
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009da6:	2200      	movs	r2, #0
 8009da8:	211c      	movs	r1, #28
 8009daa:	2002      	movs	r0, #2
 8009dac:	f7fa fbd0 	bl	8004550 <pbuf_alloc>
 8009db0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <etharp_raw+0x2a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dbc:	e046      	b.n	8009e4c <etharp_raw+0xb8>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009dc4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7f9 ff29 	bl	8003c1e <lwip_htons>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	2206      	movs	r2, #6
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 fa17 	bl	800b210 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	3312      	adds	r3, #18
 8009de6:	2206      	movs	r2, #6
 8009de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fa10 	bl	800b210 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	330e      	adds	r3, #14
 8009df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	3318      	adds	r3, #24
 8009dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f042 0201 	orr.w	r2, r2, #1
 8009e10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f042 0208 	orr.w	r2, r2, #8
 8009e1a:	709a      	strb	r2, [r3, #2]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2206      	movs	r2, #6
 8009e24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2204      	movs	r2, #4
 8009e2a:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009e2c:	f640 0306 	movw	r3, #2054	@ 0x806
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	69b9      	ldr	r1, [r7, #24]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f001 f965 	bl	800b108 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009e3e:	69b8      	ldr	r0, [r7, #24]
 8009e40:	f7fa fdee 	bl	8004a20 <pbuf_free>
  p = NULL;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009e48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af04      	add	r7, sp, #16
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f103 0125 	add.w	r1, r3, #37	@ 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f103 0025 	add.w	r0, r3, #37	@ 0x25
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009e70:	2201      	movs	r2, #1
 8009e72:	9203      	str	r2, [sp, #12]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	9202      	str	r2, [sp, #8]
 8009e78:	4a06      	ldr	r2, [pc, #24]	@ (8009e94 <etharp_request_dst+0x40>)
 8009e7a:	9201      	str	r2, [sp, #4]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4603      	mov	r3, r0
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff ff86 	bl	8009d94 <etharp_raw>
 8009e88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	0800b358 	.word	0x0800b358

08009e98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009ea2:	4a05      	ldr	r2, [pc, #20]	@ (8009eb8 <etharp_request+0x20>)
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff ffd4 	bl	8009e54 <etharp_request_dst>
 8009eac:	4603      	mov	r3, r0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800b350 	.word	0x0800b350

08009ebc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08e      	sub	sp, #56	@ 0x38
 8009ec0:	af04      	add	r7, sp, #16
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009ec6:	4b75      	ldr	r3, [pc, #468]	@ (800a09c <icmp_input+0x1e0>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 030f 	and.w	r3, r3, #15
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8009edc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009ee0:	2b13      	cmp	r3, #19
 8009ee2:	f340 80c4 	ble.w	800a06e <icmp_input+0x1b2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	895b      	ldrh	r3, [r3, #10]
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	f240 80c1 	bls.w	800a072 <icmp_input+0x1b6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009efa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80ae 	beq.w	800a060 <icmp_input+0x1a4>
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	f040 80ae 	bne.w	800a066 <icmp_input+0x1aa>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8009f0a:	4b65      	ldr	r3, [pc, #404]	@ (800a0a0 <icmp_input+0x1e4>)
 8009f0c:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009f0e:	4b63      	ldr	r3, [pc, #396]	@ (800a09c <icmp_input+0x1e0>)
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f16:	2be0      	cmp	r3, #224	@ 0xe0
 8009f18:	f000 80b2 	beq.w	800a080 <icmp_input+0x1c4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800a09c <icmp_input+0x1e0>)
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	4a5e      	ldr	r2, [pc, #376]	@ (800a09c <icmp_input+0x1e0>)
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fb88 	bl	800a63c <ip4_addr_isbroadcast_u32>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 80a8 	bne.w	800a084 <icmp_input+0x1c8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	891b      	ldrh	r3, [r3, #8]
 8009f38:	2b07      	cmp	r3, #7
 8009f3a:	f240 809c 	bls.w	800a076 <icmp_input+0x1ba>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009f3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009f40:	330e      	adds	r3, #14
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	b21b      	sxth	r3, r3
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7fa fd45 	bl	80049d8 <pbuf_header>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d042      	beq.n	8009fda <icmp_input+0x11e>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	891a      	ldrh	r2, [r3, #8]
 8009f58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009f5a:	4413      	add	r3, r2
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4619      	mov	r1, r3
 8009f62:	2002      	movs	r0, #2
 8009f64:	f7fa faf4 	bl	8004550 <pbuf_alloc>
 8009f68:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 808b 	beq.w	800a088 <icmp_input+0x1cc>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	895b      	ldrh	r3, [r3, #10]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d203      	bcs.n	8009f8a <icmp_input+0xce>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8009f82:	69b8      	ldr	r0, [r7, #24]
 8009f84:	f7fa fd4c 	bl	8004a20 <pbuf_free>
        goto icmperr;
 8009f88:	e081      	b.n	800a08e <icmp_input+0x1d2>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8009f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 f93b 	bl	800b210 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, -hlen)) {
 8009f9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	b21b      	sxth	r3, r3
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	69b8      	ldr	r0, [r7, #24]
 8009fa6:	f7fa fd17 	bl	80049d8 <pbuf_header>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <icmp_input+0xfc>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
        pbuf_free(r);
 8009fb0:	69b8      	ldr	r0, [r7, #24]
 8009fb2:	f7fa fd35 	bl	8004a20 <pbuf_free>
        goto icmperr;
 8009fb6:	e06a      	b.n	800a08e <icmp_input+0x1d2>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	69b8      	ldr	r0, [r7, #24]
 8009fbc:	f7fa fdd8 	bl	8004b70 <pbuf_copy>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <icmp_input+0x112>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8009fc6:	69b8      	ldr	r0, [r7, #24]
 8009fc8:	f7fa fd2a 	bl	8004a20 <pbuf_free>
        goto icmperr;
 8009fcc:	e05f      	b.n	800a08e <icmp_input+0x1d2>
      }
      /* free the original p */
      pbuf_free(p);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fa fd26 	bl	8004a20 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	e00c      	b.n	8009ff4 <icmp_input+0x138>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009fda:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009fdc:	f06f 030d 	mvn.w	r3, #13
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	b21b      	sxth	r3, r3
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7fa fcf5 	bl	80049d8 <pbuf_header>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d14b      	bne.n	800a08c <icmp_input+0x1d0>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, hlen)) {
 8009ffa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7fa fce9 	bl	80049d8 <pbuf_header>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d12b      	bne.n	800a064 <icmp_input+0x1a8>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a01a:	4b20      	ldr	r3, [pc, #128]	@ (800a09c <icmp_input+0x1e0>)
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2200      	movs	r2, #0
 800a02c:	709a      	strb	r2, [r3, #2]
 800a02e:	2200      	movs	r2, #0
 800a030:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	22ff      	movs	r2, #255	@ 0xff
 800a036:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2200      	movs	r2, #0
 800a03c:	729a      	strb	r2, [r3, #10]
 800a03e:	2200      	movs	r2, #0
 800a040:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	2301      	movs	r3, #1
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	23ff      	movs	r3, #255	@ 0xff
 800a050:	2200      	movs	r2, #0
 800a052:	69f9      	ldr	r1, [r7, #28]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fa3d 	bl	800a4d4 <ip4_output_if>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800a05e:	e001      	b.n	800a064 <icmp_input+0x1a8>
    break;
 800a060:	bf00      	nop
 800a062:	e000      	b.n	800a066 <icmp_input+0x1aa>
    break;
 800a064:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7fa fcda 	bl	8004a20 <pbuf_free>
  return;
 800a06c:	e013      	b.n	800a096 <icmp_input+0x1da>
    goto lenerr;
 800a06e:	bf00      	nop
 800a070:	e002      	b.n	800a078 <icmp_input+0x1bc>
    goto lenerr;
 800a072:	bf00      	nop
 800a074:	e000      	b.n	800a078 <icmp_input+0x1bc>
      goto lenerr;
 800a076:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7fa fcd1 	bl	8004a20 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a07e:	e00a      	b.n	800a096 <icmp_input+0x1da>
      goto icmperr;
 800a080:	bf00      	nop
 800a082:	e004      	b.n	800a08e <icmp_input+0x1d2>
      goto icmperr;
 800a084:	bf00      	nop
 800a086:	e002      	b.n	800a08e <icmp_input+0x1d2>
        goto icmperr;
 800a088:	bf00      	nop
 800a08a:	e000      	b.n	800a08e <icmp_input+0x1d2>
        goto icmperr;
 800a08c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7fa fcc6 	bl	8004a20 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a094:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a096:	3728      	adds	r7, #40	@ 0x28
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200031a0 	.word	0x200031a0
 800a0a0:	200031b4 	.word	0x200031b4

0800a0a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	2103      	movs	r1, #3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f814 	bl	800a0e4 <icmp_send_response>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	210b      	movs	r1, #11
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f804 	bl	800a0e4 <icmp_send_response>
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08c      	sub	sp, #48	@ 0x30
 800a0e8:	af04      	add	r7, sp, #16
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2124      	movs	r1, #36	@ 0x24
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	f7fa fa29 	bl	8004550 <pbuf_alloc>
 800a0fe:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d041      	beq.n	800a18a <icmp_send_response+0xa6>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	78fa      	ldrb	r2, [r7, #3]
 800a116:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	78ba      	ldrb	r2, [r7, #2]
 800a11c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2200      	movs	r2, #0
 800a122:	711a      	strb	r2, [r3, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	719a      	strb	r2, [r3, #6]
 800a12e:	2200      	movs	r2, #0
 800a130:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f103 0008 	add.w	r0, r3, #8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	221c      	movs	r2, #28
 800a140:	4619      	mov	r1, r3
 800a142:	f001 f865 	bl	800b210 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a14c:	f107 030c 	add.w	r3, r7, #12
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f81f 	bl	800a194 <ip4_route>
 800a156:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d011      	beq.n	800a182 <icmp_send_response+0x9e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2200      	movs	r2, #0
 800a162:	709a      	strb	r2, [r3, #2]
 800a164:	2200      	movs	r2, #0
 800a166:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a168:	f107 020c 	add.w	r2, r7, #12
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	9302      	str	r3, [sp, #8]
 800a170:	2301      	movs	r3, #1
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	2300      	movs	r3, #0
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	23ff      	movs	r3, #255	@ 0xff
 800a17a:	2100      	movs	r1, #0
 800a17c:	69f8      	ldr	r0, [r7, #28]
 800a17e:	f000 f9a9 	bl	800a4d4 <ip4_output_if>
  }
  pbuf_free(q);
 800a182:	69f8      	ldr	r0, [r7, #28]
 800a184:	f7fa fc4c 	bl	8004a20 <pbuf_free>
 800a188:	e000      	b.n	800a18c <icmp_send_response+0xa8>
    return;
 800a18a:	bf00      	nop
}
 800a18c:	3720      	adds	r7, #32
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a19c:	4b30      	ldr	r3, [pc, #192]	@ (800a260 <ip4_route+0xcc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	e036      	b.n	800a212 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d02b      	beq.n	800a20c <ip4_route+0x78>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d022      	beq.n	800a20c <ip4_route+0x78>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01d      	beq.n	800a20c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	405a      	eors	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3308      	adds	r3, #8
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	e033      	b.n	800a254 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d108      	bne.n	800a20c <ip4_route+0x78>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	330c      	adds	r3, #12
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d101      	bne.n	800a20c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	e023      	b.n	800a254 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1c5      	bne.n	800a1a4 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a218:	4b12      	ldr	r3, [pc, #72]	@ (800a264 <ip4_route+0xd0>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d015      	beq.n	800a24c <ip4_route+0xb8>
 800a220:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <ip4_route+0xd0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00d      	beq.n	800a24c <ip4_route+0xb8>
 800a230:	4b0c      	ldr	r3, [pc, #48]	@ (800a264 <ip4_route+0xd0>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800a240:	4b08      	ldr	r3, [pc, #32]	@ (800a264 <ip4_route+0xd0>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3304      	adds	r3, #4
 800a246:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e001      	b.n	800a254 <ip4_route+0xc0>
  }

  return netif_default;
 800a250:	4b04      	ldr	r3, [pc, #16]	@ (800a264 <ip4_route+0xd0>)
 800a252:	681b      	ldr	r3, [r3, #0]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	200066f0 	.word	0x200066f0
 800a264:	200066f4 	.word	0x200066f4

0800a268 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b04      	cmp	r3, #4
 800a282:	d004      	beq.n	800a28e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7fa fbcb 	bl	8004a20 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	e11a      	b.n	800a4c4 <ip4_input+0x25c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	f003 030f 	and.w	r3, r3, #15
 800a296:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a298:	897b      	ldrh	r3, [r7, #10]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	885b      	ldrh	r3, [r3, #2]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7f9 fcba 	bl	8003c1e <lwip_htons>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	891b      	ldrh	r3, [r3, #8]
 800a2b2:	893a      	ldrh	r2, [r7, #8]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d204      	bcs.n	800a2c2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800a2b8:	893b      	ldrh	r3, [r7, #8]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7fa faab 	bl	8004818 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	895b      	ldrh	r3, [r3, #10]
 800a2c6:	897a      	ldrh	r2, [r7, #10]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d807      	bhi.n	800a2dc <ip4_input+0x74>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	891b      	ldrh	r3, [r3, #8]
 800a2d0:	893a      	ldrh	r2, [r7, #8]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d802      	bhi.n	800a2dc <ip4_input+0x74>
 800a2d6:	897b      	ldrh	r3, [r7, #10]
 800a2d8:	2b13      	cmp	r3, #19
 800a2da:	d804      	bhi.n	800a2e6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7fa fb9f 	bl	8004a20 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e0ee      	b.n	800a4c4 <ip4_input+0x25c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	4a78      	ldr	r2, [pc, #480]	@ (800a4cc <ip4_input+0x264>)
 800a2ec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	4a76      	ldr	r2, [pc, #472]	@ (800a4cc <ip4_input+0x264>)
 800a2f4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a2f6:	4b75      	ldr	r3, [pc, #468]	@ (800a4cc <ip4_input+0x264>)
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a2fe:	2be0      	cmp	r3, #224	@ 0xe0
 800a300:	d112      	bne.n	800a328 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d007      	beq.n	800a322 <ip4_input+0xba>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	3304      	adds	r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <ip4_input+0xba>
      netif = inp;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	613b      	str	r3, [r7, #16]
 800a320:	e039      	b.n	800a396 <ip4_input+0x12e>
    } else {
      netif = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	e036      	b.n	800a396 <ip4_input+0x12e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a328:	2301      	movs	r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d014      	beq.n	800a36a <ip4_input+0x102>
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	3304      	adds	r3, #4
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00f      	beq.n	800a36a <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a34a:	4b60      	ldr	r3, [pc, #384]	@ (800a4cc <ip4_input+0x264>)
 800a34c:	695a      	ldr	r2, [r3, #20]
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	3304      	adds	r3, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d01e      	beq.n	800a396 <ip4_input+0x12e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a358:	4b5c      	ldr	r3, [pc, #368]	@ (800a4cc <ip4_input+0x264>)
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	6939      	ldr	r1, [r7, #16]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f96c 	bl	800a63c <ip4_addr_isbroadcast_u32>
 800a364:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a366:	2b00      	cmp	r3, #0
 800a368:	d115      	bne.n	800a396 <ip4_input+0x12e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <ip4_input+0x114>
        first = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800a374:	4b56      	ldr	r3, [pc, #344]	@ (800a4d0 <ip4_input+0x268>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	e002      	b.n	800a382 <ip4_input+0x11a>
      } else {
        netif = netif->next;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d102      	bne.n	800a390 <ip4_input+0x128>
        netif = netif->next;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1cc      	bne.n	800a330 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a396:	4b4d      	ldr	r3, [pc, #308]	@ (800a4cc <ip4_input+0x264>)
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f94d 	bl	800a63c <ip4_addr_isbroadcast_u32>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d105      	bne.n	800a3b4 <ip4_input+0x14c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a3a8:	4b48      	ldr	r3, [pc, #288]	@ (800a4cc <ip4_input+0x264>)
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a3b0:	2be0      	cmp	r3, #224	@ 0xe0
 800a3b2:	d104      	bne.n	800a3be <ip4_input+0x156>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7fa fb33 	bl	8004a20 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e082      	b.n	800a4c4 <ip4_input+0x25c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <ip4_input+0x166>
#endif /* IP_FORWARD */
    {
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7fa fb2b 	bl	8004a20 <pbuf_free>
    return ERR_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e07a      	b.n	800a4c4 <ip4_input+0x25c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	88db      	ldrh	r3, [r3, #6]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00b      	beq.n	800a3f8 <ip4_input+0x190>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fba9 	bl	800ab38 <ip4_reass>
 800a3e6:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <ip4_input+0x18a>
      return ERR_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e068      	b.n	800a4c4 <ip4_input+0x25c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a3f8:	4a34      	ldr	r2, [pc, #208]	@ (800a4cc <ip4_input+0x264>)
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a3fe:	4a33      	ldr	r2, [pc, #204]	@ (800a4cc <ip4_input+0x264>)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a404:	4a31      	ldr	r2, [pc, #196]	@ (800a4cc <ip4_input+0x264>)
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	f003 030f 	and.w	r3, r3, #15
 800a412:	b29b      	uxth	r3, r3
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	b29a      	uxth	r2, r3
 800a418:	4b2c      	ldr	r3, [pc, #176]	@ (800a4cc <ip4_input+0x264>)
 800a41a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a41c:	897b      	ldrh	r3, [r7, #10]
 800a41e:	425b      	negs	r3, r3
 800a420:	b29b      	uxth	r3, r3
 800a422:	b21b      	sxth	r3, r3
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7fa fad6 	bl	80049d8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	7a5b      	ldrb	r3, [r3, #9]
 800a430:	2b11      	cmp	r3, #17
 800a432:	d006      	beq.n	800a442 <ip4_input+0x1da>
 800a434:	2b11      	cmp	r3, #17
 800a436:	dc13      	bgt.n	800a460 <ip4_input+0x1f8>
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d00c      	beq.n	800a456 <ip4_input+0x1ee>
 800a43c:	2b06      	cmp	r3, #6
 800a43e:	d005      	beq.n	800a44c <ip4_input+0x1e4>
 800a440:	e00e      	b.n	800a460 <ip4_input+0x1f8>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7fe fd55 	bl	8008ef4 <udp_input>
      break;
 800a44a:	e028      	b.n	800a49e <ip4_input+0x236>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fb fd00 	bl	8005e54 <tcp_input>
      break;
 800a454:	e023      	b.n	800a49e <ip4_input+0x236>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff fd2f 	bl	8009ebc <icmp_input>
      break;
 800a45e:	e01e      	b.n	800a49e <ip4_input+0x236>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a460:	4b1a      	ldr	r3, [pc, #104]	@ (800a4cc <ip4_input+0x264>)
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	6939      	ldr	r1, [r7, #16]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 f8e8 	bl	800a63c <ip4_addr_isbroadcast_u32>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d112      	bne.n	800a498 <ip4_input+0x230>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a472:	4b16      	ldr	r3, [pc, #88]	@ (800a4cc <ip4_input+0x264>)
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a47a:	2be0      	cmp	r3, #224	@ 0xe0
 800a47c:	d00c      	beq.n	800a498 <ip4_input+0x230>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a47e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7fa fab9 	bl	80049fc <pbuf_header_force>
        p->payload = iphdr;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a490:	2102      	movs	r1, #2
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fe06 	bl	800a0a4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7fa fac1 	bl	8004a20 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a49e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4cc <ip4_input+0x264>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a4a4:	4b09      	ldr	r3, [pc, #36]	@ (800a4cc <ip4_input+0x264>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a4aa:	4b08      	ldr	r3, [pc, #32]	@ (800a4cc <ip4_input+0x264>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a4b0:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <ip4_input+0x264>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a4b6:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <ip4_input+0x264>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a4bc:	4b03      	ldr	r3, [pc, #12]	@ (800a4cc <ip4_input+0x264>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	200031a0 	.word	0x200031a0
 800a4d0:	200066f0 	.word	0x200066f0

0800a4d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	@ 0x28
 800a4d8:	af04      	add	r7, sp, #16
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <ip4_output_if+0x26>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d102      	bne.n	800a500 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a500:	78fa      	ldrb	r2, [r7, #3]
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	9302      	str	r3, [sp, #8]
 800a506:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	4613      	mov	r3, r2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f805 	bl	800a528 <ip4_output_if_src>
 800a51e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	70fb      	strb	r3, [r7, #3]
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d055      	beq.n	800a5e8 <ip4_output_if_src+0xc0>
    u16_t ip_hlen = IP_HLEN;
 800a53c:	2314      	movs	r3, #20
 800a53e:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a540:	2114      	movs	r1, #20
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7fa fa48 	bl	80049d8 <pbuf_header>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <ip4_output_if_src+0x2c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a54e:	f06f 0301 	mvn.w	r3, #1
 800a552:	e06a      	b.n	800a62a <ip4_output_if_src+0x102>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	78fa      	ldrb	r2, [r7, #3]
 800a55e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800a566:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a570:	8b7b      	ldrh	r3, [r7, #26]
 800a572:	089b      	lsrs	r3, r3, #2
 800a574:	b29b      	uxth	r3, r3
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a588:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	891b      	ldrh	r3, [r3, #8]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f9 fb45 	bl	8003c1e <lwip_htons>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	719a      	strb	r2, [r3, #6]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a5a6:	4b23      	ldr	r3, [pc, #140]	@ (800a634 <ip4_output_if_src+0x10c>)
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7f9 fb37 	bl	8003c1e <lwip_htons>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a634 <ip4_output_if_src+0x10c>)
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a634 <ip4_output_if_src+0x10c>)
 800a5c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d104      	bne.n	800a5d4 <ip4_output_if_src+0xac>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a5ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a638 <ip4_output_if_src+0x110>)
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	60da      	str	r2, [r3, #12]
 800a5d2:	e003      	b.n	800a5dc <ip4_output_if_src+0xb4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	729a      	strb	r2, [r3, #10]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	72da      	strb	r2, [r3, #11]
 800a5e6:	e008      	b.n	800a5fa <ip4_output_if_src+0xd2>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a5f4:	f107 0314 	add.w	r3, r7, #20
 800a5f8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00c      	beq.n	800a61c <ip4_output_if_src+0xf4>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	891a      	ldrh	r2, [r3, #8]
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d906      	bls.n	800a61c <ip4_output_if_src+0xf4>
    return ip4_frag(p, netif, dest);
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 fbe6 	bl	800ade4 <ip4_frag>
 800a618:	4603      	mov	r3, r0
 800a61a:	e006      	b.n	800a62a <ip4_output_if_src+0x102>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a626:	4798      	blx	r3
 800a628:	4603      	mov	r3, r0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3720      	adds	r7, #32
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	2000684e 	.word	0x2000684e
 800a638:	0800b34c 	.word	0x0800b34c

0800a63c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a650:	d002      	beq.n	800a658 <ip4_addr_isbroadcast_u32+0x1c>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a658:	2301      	movs	r3, #1
 800a65a:	e02a      	b.n	800a6b2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e021      	b.n	800a6b2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	3304      	adds	r3, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	429a      	cmp	r2, r3
 800a678:	d101      	bne.n	800a67e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e019      	b.n	800a6b2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	3304      	adds	r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	405a      	eors	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	3308      	adds	r3, #8
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10d      	bne.n	800a6b0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	3308      	adds	r3, #8
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	43da      	mvns	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d101      	bne.n	800a6b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a6b0:	2300      	movs	r3, #0
  }
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800a6ca:	4b12      	ldr	r3, [pc, #72]	@ (800a714 <ip_reass_tmr+0x54>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800a6d0:	e018      	b.n	800a704 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	7fdb      	ldrb	r3, [r3, #31]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00b      	beq.n	800a6f2 <ip_reass_tmr+0x32>
      r->timer--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	7fdb      	ldrb	r3, [r3, #31]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	e008      	b.n	800a704 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a6fc:	68b9      	ldr	r1, [r7, #8]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f80a 	bl	800a718 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e3      	bne.n	800a6d2 <ip_reass_tmr+0x12>
     }
   }
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20006850 	.word	0x20006850

0800a718 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	83fb      	strh	r3, [r7, #30]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	889b      	ldrh	r3, [r3, #4]
 800a732:	b29b      	uxth	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d11e      	bne.n	800a776 <ip_reass_free_complete_datagram+0x5e>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	6858      	ldr	r0, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3308      	adds	r3, #8
 800a74e:	2214      	movs	r2, #20
 800a750:	4619      	mov	r1, r3
 800a752:	f000 fd5d 	bl	800b210 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a756:	2101      	movs	r1, #1
 800a758:	69b8      	ldr	r0, [r7, #24]
 800a75a:	f7ff fcb3 	bl	800a0c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a75e:	69b8      	ldr	r0, [r7, #24]
 800a760:	f7fa f9af 	bl	8004ac2 <pbuf_clen>
 800a764:	4603      	mov	r3, r0
 800a766:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800a768:	8bfa      	ldrh	r2, [r7, #30]
 800a76a:	8a7b      	ldrh	r3, [r7, #18]
 800a76c:	4413      	add	r3, r2
 800a76e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a770:	69b8      	ldr	r0, [r7, #24]
 800a772:	f7fa f955 	bl	8004a20 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a77c:	e013      	b.n	800a7a6 <ip_reass_free_complete_datagram+0x8e>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7fa f997 	bl	8004ac2 <pbuf_clen>
 800a794:	4603      	mov	r3, r0
 800a796:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800a798:	8bfa      	ldrh	r2, [r7, #30]
 800a79a:	8a7b      	ldrh	r3, [r7, #18]
 800a79c:	4413      	add	r3, r2
 800a79e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7fa f93d 	bl	8004a20 <pbuf_free>
  while (p != NULL) {
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e8      	bne.n	800a77e <ip_reass_free_complete_datagram+0x66>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f8aa 	bl	800a908 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 800a7b4:	4b05      	ldr	r3, [pc, #20]	@ (800a7cc <ip_reass_free_complete_datagram+0xb4>)
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	8bfb      	ldrh	r3, [r7, #30]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	4b03      	ldr	r3, [pc, #12]	@ (800a7cc <ip_reass_free_complete_datagram+0xb4>)
 800a7c0:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a7c2:	8bfb      	ldrh	r3, [r7, #30]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3720      	adds	r7, #32
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20006854 	.word	0x20006854

0800a7d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08a      	sub	sp, #40	@ 0x28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a7ee:	4b28      	ldr	r3, [pc, #160]	@ (800a890 <ip_reass_remove_oldest_datagram+0xc0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800a7f4:	e030      	b.n	800a858 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d10c      	bne.n	800a81c <ip_reass_remove_oldest_datagram+0x4c>
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	699a      	ldr	r2, [r3, #24]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d106      	bne.n	800a81c <ip_reass_remove_oldest_datagram+0x4c>
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	899a      	ldrh	r2, [r3, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	889b      	ldrh	r3, [r3, #4]
 800a816:	b29b      	uxth	r3, r3
 800a818:	429a      	cmp	r2, r3
 800a81a:	d014      	beq.n	800a846 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	3301      	adds	r3, #1
 800a820:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	61bb      	str	r3, [r7, #24]
 800a830:	e009      	b.n	800a846 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	7fda      	ldrb	r2, [r3, #31]
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	7fdb      	ldrb	r3, [r3, #31]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d803      	bhi.n	800a846 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800a858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1cb      	bne.n	800a7f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d008      	beq.n	800a876 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a864:	69b9      	ldr	r1, [r7, #24]
 800a866:	6a38      	ldr	r0, [r7, #32]
 800a868:	f7ff ff56 	bl	800a718 <ip_reass_free_complete_datagram>
 800a86c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4413      	add	r3, r2
 800a874:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	da02      	bge.n	800a884 <ip_reass_remove_oldest_datagram+0xb4>
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b01      	cmp	r3, #1
 800a882:	dcac      	bgt.n	800a7de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a884:	697b      	ldr	r3, [r7, #20]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3728      	adds	r7, #40	@ 0x28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20006850 	.word	0x20006850

0800a894 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a89e:	2004      	movs	r0, #4
 800a8a0:	f7f9 fc8a 	bl	80041b8 <memp_malloc>
 800a8a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d110      	bne.n	800a8ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff ff8e 	bl	800a7d0 <ip_reass_remove_oldest_datagram>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	dc03      	bgt.n	800a8c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a8bc:	2004      	movs	r0, #4
 800a8be:	f7f9 fc7b 	bl	80041b8 <memp_malloc>
 800a8c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e016      	b.n	800a8fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fc5d 	bl	800b192 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2203      	movs	r2, #3
 800a8dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a8de:	4b09      	ldr	r3, [pc, #36]	@ (800a904 <ip_reass_enqueue_new_datagram+0x70>)
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a8e6:	4a07      	ldr	r2, [pc, #28]	@ (800a904 <ip_reass_enqueue_new_datagram+0x70>)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	2214      	movs	r2, #20
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fc8b 	bl	800b210 <memcpy>
  return ipr;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20006850 	.word	0x20006850

0800a908 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a912:	4b0b      	ldr	r3, [pc, #44]	@ (800a940 <ip_reass_dequeue_datagram+0x38>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d104      	bne.n	800a926 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a07      	ldr	r2, [pc, #28]	@ (800a940 <ip_reass_dequeue_datagram+0x38>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	e003      	b.n	800a92e <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	2004      	movs	r0, #4
 800a932:	f7f9 fc71 	bl	8004218 <memp_free>
}
 800a936:	bf00      	nop
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20006850 	.word	0x20006850

0800a944 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08a      	sub	sp, #40	@ 0x28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a952:	2301      	movs	r3, #1
 800a954:	61fb      	str	r3, [r7, #28]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	61bb      	str	r3, [r7, #24]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	885b      	ldrh	r3, [r3, #2]
 800a960:	b29b      	uxth	r3, r3
 800a962:	4618      	mov	r0, r3
 800a964:	f7f9 f95b 	bl	8003c1e <lwip_htons>
 800a968:	4603      	mov	r3, r0
 800a96a:	461a      	mov	r2, r3
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	f003 030f 	and.w	r3, r3, #15
 800a974:	b29b      	uxth	r3, r3
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	b29b      	uxth	r3, r3
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	82fb      	strh	r3, [r7, #22]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	88db      	ldrh	r3, [r3, #6]
 800a982:	b29b      	uxth	r3, r3
 800a984:	4618      	mov	r0, r3
 800a986:	f7f9 f94a 	bl	8003c1e <lwip_htons>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a990:	b29b      	uxth	r3, r3
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	82bb      	strh	r3, [r7, #20]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	613b      	str	r3, [r7, #16]
  iprh->next_pbuf = NULL;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	705a      	strb	r2, [r3, #1]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	709a      	strb	r2, [r3, #2]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	8aba      	ldrh	r2, [r7, #20]
 800a9b2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800a9b4:	8aba      	ldrh	r2, [r7, #20]
 800a9b6:	8afb      	ldrh	r3, [r7, #22]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	623b      	str	r3, [r7, #32]
 800a9c6:	e04b      	b.n	800aa60 <ip_reass_chain_frag_into_datagram_and_validate+0x11c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	889b      	ldrh	r3, [r3, #4]
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	889b      	ldrh	r3, [r3, #4]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d21e      	bcs.n	800aa1c <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	6a3a      	ldr	r2, [r7, #32]
 800a9e2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d014      	beq.n	800aa14 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	889b      	ldrh	r3, [r3, #4]
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	88db      	ldrh	r3, [r3, #6]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	f0c0 8083 	bcc.w	800ab02 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	88db      	ldrh	r3, [r3, #6]
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	889b      	ldrh	r3, [r3, #4]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d87a      	bhi.n	800ab02 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	601a      	str	r2, [r3, #0]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800aa12:	e028      	b.n	800aa66 <ip_reass_chain_frag_into_datagram_and_validate+0x122>
        ipr->p = new_p;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	605a      	str	r2, [r3, #4]
      break;
 800aa1a:	e024      	b.n	800aa66 <ip_reass_chain_frag_into_datagram_and_validate+0x122>
    } else if (iprh->start == iprh_tmp->start) {
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	889b      	ldrh	r3, [r3, #4]
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	889b      	ldrh	r3, [r3, #4]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d06c      	beq.n	800ab06 <ip_reass_chain_frag_into_datagram_and_validate+0x1c2>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	889b      	ldrh	r3, [r3, #4]
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	88db      	ldrh	r3, [r3, #6]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d366      	bcc.n	800ab0a <ip_reass_chain_frag_into_datagram_and_validate+0x1c6>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        if (iprh_prev->end != iprh_tmp->start) {
 800aa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa44:	88db      	ldrh	r3, [r3, #6]
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	889b      	ldrh	r3, [r3, #4]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d001      	beq.n	800aa56 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	623b      	str	r3, [r7, #32]
    iprh_prev = iprh_tmp;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (q = ipr->p; q != NULL;) {
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1b0      	bne.n	800a9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x84>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d113      	bne.n	800aa94 <ip_reass_chain_frag_into_datagram_and_validate+0x150>
    if (iprh_prev != NULL) {
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00d      	beq.n	800aa8e <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7a:	88db      	ldrh	r3, [r3, #6]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	889b      	ldrh	r3, [r3, #4]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d005      	beq.n	800aa94 <ip_reass_chain_frag_into_datagram_and_validate+0x150>
        valid = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	61fb      	str	r3, [r7, #28]
 800aa8c:	e002      	b.n	800aa94 <ip_reass_chain_frag_into_datagram_and_validate+0x150>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7f9b      	ldrb	r3, [r3, #30]
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d02e      	beq.n	800aafe <ip_reass_chain_frag_into_datagram_and_validate+0x1ba>
    /* and had no holes so far */
    if (valid) {
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d029      	beq.n	800aafa <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d006      	beq.n	800aabc <ip_reass_chain_frag_into_datagram_and_validate+0x178>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	889b      	ldrh	r3, [r3, #4]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
        valid = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	e01b      	b.n	800aafa <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
        q = iprh->next_pbuf;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
 800aacc:	e012      	b.n	800aaf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
          iprh = (struct ip_reass_helper*)q->payload;
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	613b      	str	r3, [r7, #16]
          if (iprh_prev->end != iprh->start) {
 800aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad6:	88db      	ldrh	r3, [r3, #6]
 800aad8:	b29a      	uxth	r2, r3
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	889b      	ldrh	r3, [r3, #4]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d002      	beq.n	800aaea <ip_reass_chain_frag_into_datagram_and_validate+0x1a6>
            valid = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61fb      	str	r3, [r7, #28]
            break;
 800aae8:	e007      	b.n	800aafa <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
          }
          iprh_prev = iprh;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	627b      	str	r3, [r7, #36]	@ 0x24
          q = iprh->next_pbuf;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1e9      	bne.n	800aace <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	e015      	b.n	800ab2a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
 800aafe:	2300      	movs	r3, #0
 800ab00:	e013      	b.n	800ab2a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
          goto freepbuf;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
      goto freepbuf;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
      goto freepbuf;
 800ab0a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800ab0c:	6838      	ldr	r0, [r7, #0]
 800ab0e:	f7f9 ffd8 	bl	8004ac2 <pbuf_clen>
 800ab12:	4603      	mov	r3, r0
 800ab14:	461a      	mov	r2, r3
 800ab16:	4b07      	ldr	r3, [pc, #28]	@ (800ab34 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	1a9b      	subs	r3, r3, r2
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	4b05      	ldr	r3, [pc, #20]	@ (800ab34 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
 800ab20:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800ab22:	6838      	ldr	r0, [r7, #0]
 800ab24:	f7f9 ff7c 	bl	8004a20 <pbuf_free>
  return 0;
 800ab28:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3728      	adds	r7, #40	@ 0x28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20006854 	.word	0x20006854

0800ab38 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	@ 0x28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	f003 030f 	and.w	r3, r3, #15
 800ab4e:	2b05      	cmp	r3, #5
 800ab50:	f040 810f 	bne.w	800ad72 <ip4_reass+0x23a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	88db      	ldrh	r3, [r3, #6]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f9 f85f 	bl	8003c1e <lwip_htons>
 800ab60:	4603      	mov	r3, r0
 800ab62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	82fb      	strh	r3, [r7, #22]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	885b      	ldrh	r3, [r3, #2]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7f9 f853 	bl	8003c1e <lwip_htons>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	f003 030f 	and.w	r3, r3, #15
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	82bb      	strh	r3, [r7, #20]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7f9 ff97 	bl	8004ac2 <pbuf_clen>
 800ab94:	4603      	mov	r3, r0
 800ab96:	827b      	strh	r3, [r7, #18]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ab98:	4b7b      	ldr	r3, [pc, #492]	@ (800ad88 <ip4_reass+0x250>)
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	8a7b      	ldrh	r3, [r7, #18]
 800aba0:	4413      	add	r3, r2
 800aba2:	2b0a      	cmp	r3, #10
 800aba4:	dd10      	ble.n	800abc8 <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800aba6:	8a7b      	ldrh	r3, [r7, #18]
 800aba8:	4619      	mov	r1, r3
 800abaa:	69b8      	ldr	r0, [r7, #24]
 800abac:	f7ff fe10 	bl	800a7d0 <ip_reass_remove_oldest_datagram>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80df 	beq.w	800ad76 <ip4_reass+0x23e>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800abb8:	4b73      	ldr	r3, [pc, #460]	@ (800ad88 <ip4_reass+0x250>)
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	8a7b      	ldrh	r3, [r7, #18]
 800abc0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800abc2:	2b0a      	cmp	r3, #10
 800abc4:	f300 80d7 	bgt.w	800ad76 <ip4_reass+0x23e>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800abc8:	4b70      	ldr	r3, [pc, #448]	@ (800ad8c <ip4_reass+0x254>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	623b      	str	r3, [r7, #32]
 800abce:	e015      	b.n	800abfc <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	695a      	ldr	r2, [r3, #20]
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d10c      	bne.n	800abf6 <ip4_reass+0xbe>
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	699a      	ldr	r2, [r3, #24]
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d106      	bne.n	800abf6 <ip4_reass+0xbe>
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	899a      	ldrh	r2, [r3, #12]
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	889b      	ldrh	r3, [r3, #4]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d006      	beq.n	800ac04 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	623b      	str	r3, [r7, #32]
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1e6      	bne.n	800abd0 <ip4_reass+0x98>
 800ac02:	e000      	b.n	800ac06 <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ac04:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d109      	bne.n	800ac20 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ac0c:	8a7b      	ldrh	r3, [r7, #18]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	69b8      	ldr	r0, [r7, #24]
 800ac12:	f7ff fe3f 	bl	800a894 <ip_reass_enqueue_new_datagram>
 800ac16:	6238      	str	r0, [r7, #32]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d11c      	bne.n	800ac58 <ip4_reass+0x120>
      goto nullreturn;
 800ac1e:	e0ab      	b.n	800ad78 <ip4_reass+0x240>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	88db      	ldrh	r3, [r3, #6]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f8 fff9 	bl	8003c1e <lwip_htons>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d110      	bne.n	800ac58 <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	89db      	ldrh	r3, [r3, #14]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f8 ffef 	bl	8003c1e <lwip_htons>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d006      	beq.n	800ac58 <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	2214      	movs	r2, #20
 800ac50:	69b9      	ldr	r1, [r7, #24]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fadc 	bl	800b210 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 800ac58:	4b4b      	ldr	r3, [pc, #300]	@ (800ad88 <ip4_reass+0x250>)
 800ac5a:	881a      	ldrh	r2, [r3, #0]
 800ac5c:	8a7b      	ldrh	r3, [r7, #18]
 800ac5e:	4413      	add	r3, r2
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	4b49      	ldr	r3, [pc, #292]	@ (800ad88 <ip4_reass+0x250>)
 800ac64:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	88db      	ldrh	r3, [r3, #6]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	f003 0320 	and.w	r3, r3, #32
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10c      	bne.n	800ac8e <ip4_reass+0x156>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	7f9b      	ldrb	r3, [r3, #30]
 800ac78:	f043 0301 	orr.w	r3, r3, #1
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
 800ac82:	8afa      	ldrh	r2, [r7, #22]
 800ac84:	8abb      	ldrh	r3, [r7, #20]
 800ac86:	4413      	add	r3, r2
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	839a      	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	6a38      	ldr	r0, [r7, #32]
 800ac92:	f7ff fe57 	bl	800a944 <ip_reass_chain_frag_into_datagram_and_validate>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d068      	beq.n	800ad6e <ip4_reass+0x236>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	8b9b      	ldrh	r3, [r3, #28]
 800aca0:	3314      	adds	r3, #20
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	3308      	adds	r3, #8
 800acbe:	2214      	movs	r2, #20
 800acc0:	4619      	mov	r1, r3
 800acc2:	69b8      	ldr	r0, [r7, #24]
 800acc4:	f000 faa4 	bl	800b210 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	8b9b      	ldrh	r3, [r3, #28]
 800accc:	4618      	mov	r0, r3
 800acce:	f7f8 ffa6 	bl	8003c1e <lwip_htons>
 800acd2:	4603      	mov	r3, r0
 800acd4:	461a      	mov	r2, r3
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	2200      	movs	r2, #0
 800acde:	719a      	strb	r2, [r3, #6]
 800ace0:	2200      	movs	r2, #0
 800ace2:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2200      	movs	r2, #0
 800ace8:	729a      	strb	r2, [r3, #10]
 800acea:	2200      	movs	r2, #0
 800acec:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800acf4:	e00e      	b.n	800ad14 <ip4_reass+0x1dc>
      iprh = (struct ip_reass_helper*)r->payload;
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800acfc:	f06f 0113 	mvn.w	r1, #19
 800ad00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad02:	f7f9 fe69 	bl	80049d8 <pbuf_header>
      pbuf_cat(p, r);
 800ad06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7f9 ff04 	bl	8004b16 <pbuf_cat>
      r = iprh->next_pbuf;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1ed      	bne.n	800acf6 <ip4_reass+0x1be>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ad1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ad8c <ip4_reass+0x254>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6a3a      	ldr	r2, [r7, #32]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d102      	bne.n	800ad2a <ip4_reass+0x1f2>
      ipr_prev = NULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]
 800ad28:	e010      	b.n	800ad4c <ip4_reass+0x214>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ad2a:	4b18      	ldr	r3, [pc, #96]	@ (800ad8c <ip4_reass+0x254>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	61fb      	str	r3, [r7, #28]
 800ad30:	e007      	b.n	800ad42 <ip4_reass+0x20a>
        if (ipr_prev->next == ipr) {
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d006      	beq.n	800ad4a <ip4_reass+0x212>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1f4      	bne.n	800ad32 <ip4_reass+0x1fa>
 800ad48:	e000      	b.n	800ad4c <ip4_reass+0x214>
          break;
 800ad4a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ad4c:	69f9      	ldr	r1, [r7, #28]
 800ad4e:	6a38      	ldr	r0, [r7, #32]
 800ad50:	f7ff fdda 	bl	800a908 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7f9 feb4 	bl	8004ac2 <pbuf_clen>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad88 <ip4_reass+0x250>)
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	4b08      	ldr	r3, [pc, #32]	@ (800ad88 <ip4_reass+0x250>)
 800ad68:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	e008      	b.n	800ad80 <ip4_reass+0x248>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e006      	b.n	800ad80 <ip4_reass+0x248>
    goto nullreturn;
 800ad72:	bf00      	nop
 800ad74:	e000      	b.n	800ad78 <ip4_reass+0x240>
      goto nullreturn;
 800ad76:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7f9 fe51 	bl	8004a20 <pbuf_free>
  return NULL;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3728      	adds	r7, #40	@ 0x28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20006854 	.word	0x20006854
 800ad8c:	20006850 	.word	0x20006850

0800ad90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ad94:	2005      	movs	r0, #5
 800ad96:	f7f9 fa0f 	bl	80041b8 <memp_malloc>
 800ad9a:	4603      	mov	r3, r0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	2005      	movs	r0, #5
 800adac:	f7f9 fa34 	bl	8004218 <memp_free>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	4618      	mov	r0, r3
 800add2:	f7f9 fe25 	bl	8004a20 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff ffe2 	bl	800ada0 <ip_frag_free_pbuf_custom_ref>
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b092      	sub	sp, #72	@ 0x48
 800ade8:	af02      	add	r7, sp, #8
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800adf4:	3b14      	subs	r3, #20
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da00      	bge.n	800adfc <ip4_frag+0x18>
 800adfa:	3307      	adds	r3, #7
 800adfc:	10db      	asrs	r3, r3, #3
 800adfe:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ae00:	2314      	movs	r3, #20
 800ae02:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t tmp;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t left_to_copy;
#endif

  original_iphdr = (struct ip_hdr *)p->payload;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 800ae0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae10:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d002      	beq.n	800ae24 <ip4_frag+0x40>
 800ae1e:	f06f 0305 	mvn.w	r3, #5
 800ae22:	e0d4      	b.n	800afce <ip4_frag+0x1ea>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ae24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae26:	88db      	ldrh	r3, [r3, #6]
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7f8 fef7 	bl	8003c1e <lwip_htons>
 800ae30:	4603      	mov	r3, r0
 800ae32:	873b      	strh	r3, [r7, #56]	@ 0x38
  ofo = tmp & IP_OFFMASK;
 800ae34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ae36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae3a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800ae3c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ae3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <ip4_frag+0x68>
 800ae46:	f06f 0305 	mvn.w	r3, #5
 800ae4a:	e0c0      	b.n	800afce <ip4_frag+0x1ea>

  left = p->tot_len - IP_HLEN;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	891b      	ldrh	r3, [r3, #8]
 800ae50:	3b14      	subs	r3, #20
 800ae52:	87fb      	strh	r3, [r7, #62]	@ 0x3e

  while (left) {
 800ae54:	e0b2      	b.n	800afbc <ip4_frag+0x1d8>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800ae56:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ae58:	00da      	lsls	r2, r3, #3
 800ae5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	bfa8      	it	ge
 800ae60:	4613      	movge	r3, r2
 800ae62:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ae64:	2200      	movs	r2, #0
 800ae66:	2114      	movs	r1, #20
 800ae68:	2002      	movs	r0, #2
 800ae6a:	f7f9 fb71 	bl	8004550 <pbuf_alloc>
 800ae6e:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 80a8 	beq.w	800afc8 <ip4_frag+0x1e4>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	2214      	movs	r2, #20
 800ae7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 f9c5 	bl	800b210 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 800ae8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae8e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    while (left_to_copy) {
 800ae90:	e04f      	b.n	800af32 <ip4_frag+0x14e>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	895a      	ldrh	r2, [r3, #10]
 800ae96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ae9c:	8b7a      	ldrh	r2, [r7, #26]
 800ae9e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800aea0:	4293      	cmp	r3, r2
 800aea2:	bf28      	it	cs
 800aea4:	4613      	movcs	r3, r2
 800aea6:	86fb      	strh	r3, [r7, #54]	@ 0x36
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800aea8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d105      	bne.n	800aeba <ip4_frag+0xd6>
        poff = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        p = p->next;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]
        continue;
 800aeb8:	e03b      	b.n	800af32 <ip4_frag+0x14e>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800aeba:	f7ff ff69 	bl	800ad90 <ip_frag_alloc_pbuf_custom_ref>
 800aebe:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <ip4_frag+0xea>
        pbuf_free(rambuf);
 800aec6:	6a38      	ldr	r0, [r7, #32]
 800aec8:	f7f9 fdaa 	bl	8004a20 <pbuf_free>
        goto memerr;
 800aecc:	e07d      	b.n	800afca <ip4_frag+0x1e6>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aece:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aed4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aed6:	4413      	add	r3, r2
 800aed8:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800aeda:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aedc:	9201      	str	r2, [sp, #4]
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4603      	mov	r3, r0
 800aee2:	2202      	movs	r2, #2
 800aee4:	2004      	movs	r0, #4
 800aee6:	f7f9 fc37 	bl	8004758 <pbuf_alloced_custom>
 800aeea:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <ip4_frag+0x11c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800aef2:	6978      	ldr	r0, [r7, #20]
 800aef4:	f7ff ff54 	bl	800ada0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800aef8:	6a38      	ldr	r0, [r7, #32]
 800aefa:	f7f9 fd91 	bl	8004a20 <pbuf_free>
        goto memerr;
 800aefe:	e064      	b.n	800afca <ip4_frag+0x1e6>
      }
      pbuf_ref(p);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7f9 fdf5 	bl	8004af0 <pbuf_ref>
      pcr->original = p;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	4a32      	ldr	r2, [pc, #200]	@ (800afd8 <ip4_frag+0x1f4>)
 800af10:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800af12:	6939      	ldr	r1, [r7, #16]
 800af14:	6a38      	ldr	r0, [r7, #32]
 800af16:	f7f9 fdfe 	bl	8004b16 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800af1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800af1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (left_to_copy) {
 800af22:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800af24:	2b00      	cmp	r3, #0
 800af26:	d004      	beq.n	800af32 <ip4_frag+0x14e>
        poff = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        p = p->next;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800af32:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1ac      	bne.n	800ae92 <ip4_frag+0xae>
      }
    }
    poff += newpbuflen;
 800af38:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800af3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af3c:	4413      	add	r3, r2
 800af3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800af44:	f1a3 0213 	sub.w	r2, r3, #19
 800af48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af4a:	429a      	cmp	r2, r3
 800af4c:	bfcc      	ite	gt
 800af4e:	2301      	movgt	r3, #1
 800af50:	2300      	movle	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800af56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800af58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af5c:	873b      	strh	r3, [r7, #56]	@ 0x38
    if (!last) {
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <ip4_frag+0x188>
      tmp = tmp | IP_MF;
 800af64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800af66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800af6a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800af6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800af6e:	4618      	mov	r0, r3
 800af70:	f7f8 fe55 	bl	8003c1e <lwip_htons>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800af7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af7e:	3314      	adds	r3, #20
 800af80:	b29b      	uxth	r3, r3
 800af82:	4618      	mov	r0, r3
 800af84:	f7f8 fe4b 	bl	8003c1e <lwip_htons>
 800af88:	4603      	mov	r3, r0
 800af8a:	461a      	mov	r2, r3
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	2200      	movs	r2, #0
 800af94:	729a      	strb	r2, [r3, #10]
 800af96:	2200      	movs	r2, #0
 800af98:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	6a39      	ldr	r1, [r7, #32]
 800afa2:	68b8      	ldr	r0, [r7, #8]
 800afa4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800afa6:	6a38      	ldr	r0, [r7, #32]
 800afa8:	f7f9 fd3a 	bl	8004a20 <pbuf_free>
    left -= fragsize;
 800afac:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800afae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    ofo += nfb;
 800afb4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800afb6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800afb8:	4413      	add	r3, r2
 800afba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  while (left) {
 800afbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f47f af49 	bne.w	800ae56 <ip4_frag+0x72>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e002      	b.n	800afce <ip4_frag+0x1ea>
      goto memerr;
 800afc8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800afca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3740      	adds	r7, #64	@ 0x40
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	0800adb9 	.word	0x0800adb9

0800afdc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800afe6:	230e      	movs	r3, #14
 800afe8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	895b      	ldrh	r3, [r3, #10]
 800afee:	2b0e      	cmp	r3, #14
 800aff0:	d977      	bls.n	800b0e2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	7b1a      	ldrb	r2, [r3, #12]
 800affc:	7b5b      	ldrb	r3, [r3, #13]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	4313      	orrs	r3, r2
 800b002:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d023      	beq.n	800b058 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d10f      	bne.n	800b038 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	785b      	ldrb	r3, [r3, #1]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d11b      	bne.n	800b058 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b024:	2b5e      	cmp	r3, #94	@ 0x5e
 800b026:	d117      	bne.n	800b058 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7b5b      	ldrb	r3, [r3, #13]
 800b02c:	f043 0310 	orr.w	r3, r3, #16
 800b030:	b2da      	uxtb	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	735a      	strb	r2, [r3, #13]
 800b036:	e00f      	b.n	800b058 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2206      	movs	r2, #6
 800b03c:	4931      	ldr	r1, [pc, #196]	@ (800b104 <ethernet_input+0x128>)
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 f897 	bl	800b172 <memcmp>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7b5b      	ldrb	r3, [r3, #13]
 800b04e:	f043 0308 	orr.w	r3, r3, #8
 800b052:	b2da      	uxtb	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b058:	89fb      	ldrh	r3, [r7, #14]
 800b05a:	2b08      	cmp	r3, #8
 800b05c:	d003      	beq.n	800b066 <ethernet_input+0x8a>
 800b05e:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800b062:	d01e      	beq.n	800b0a2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b064:	e046      	b.n	800b0f4 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800b06c:	f003 0308 	and.w	r3, r3, #8
 800b070:	2b00      	cmp	r3, #0
 800b072:	d038      	beq.n	800b0e6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	895b      	ldrh	r3, [r3, #10]
 800b078:	461a      	mov	r2, r3
 800b07a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b07e:	429a      	cmp	r2, r3
 800b080:	db33      	blt.n	800b0ea <ethernet_input+0x10e>
 800b082:	8afb      	ldrh	r3, [r7, #22]
 800b084:	425b      	negs	r3, r3
 800b086:	b29b      	uxth	r3, r3
 800b088:	b21b      	sxth	r3, r3
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7f9 fca3 	bl	80049d8 <pbuf_header>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d128      	bne.n	800b0ea <ethernet_input+0x10e>
        ip4_input(p, netif);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff f8e4 	bl	800a268 <ip4_input>
      break;
 800b0a0:	e01d      	b.n	800b0de <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800b0a8:	f003 0308 	and.w	r3, r3, #8
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01e      	beq.n	800b0ee <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	895b      	ldrh	r3, [r3, #10]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	db19      	blt.n	800b0f2 <ethernet_input+0x116>
 800b0be:	8afb      	ldrh	r3, [r7, #22]
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	b21b      	sxth	r3, r3
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7f9 fc85 	bl	80049d8 <pbuf_header>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10e      	bne.n	800b0f2 <ethernet_input+0x116>
        etharp_input(p, netif);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7fe fb7c 	bl	80097d4 <etharp_input>
      break;
 800b0dc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e00c      	b.n	800b0fc <ethernet_input+0x120>
    goto free_and_return;
 800b0e2:	bf00      	nop
 800b0e4:	e006      	b.n	800b0f4 <ethernet_input+0x118>
        goto free_and_return;
 800b0e6:	bf00      	nop
 800b0e8:	e004      	b.n	800b0f4 <ethernet_input+0x118>
        goto free_and_return;
 800b0ea:	bf00      	nop
 800b0ec:	e002      	b.n	800b0f4 <ethernet_input+0x118>
        goto free_and_return;
 800b0ee:	bf00      	nop
 800b0f0:	e000      	b.n	800b0f4 <ethernet_input+0x118>
        goto free_and_return;
 800b0f2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7f9 fc93 	bl	8004a20 <pbuf_free>
  return ERR_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	0800b350 	.word	0x0800b350

0800b108 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b116:	8c3b      	ldrh	r3, [r7, #32]
 800b118:	4618      	mov	r0, r3
 800b11a:	f7f8 fd80 	bl	8003c1e <lwip_htons>
 800b11e:	4603      	mov	r3, r0
 800b120:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b122:	210e      	movs	r1, #14
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f7f9 fc57 	bl	80049d8 <pbuf_header>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d119      	bne.n	800b164 <ethernet_output+0x5c>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	8afa      	ldrh	r2, [r7, #22]
 800b13a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	2206      	movs	r2, #6
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	4618      	mov	r0, r3
 800b144:	f000 f864 	bl	800b210 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	3306      	adds	r3, #6
 800b14c:	2206      	movs	r2, #6
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4618      	mov	r0, r3
 800b152:	f000 f85d 	bl	800b210 <memcpy>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	4798      	blx	r3
 800b160:	4603      	mov	r3, r0
 800b162:	e002      	b.n	800b16a <ethernet_output+0x62>
      goto pbuf_header_failed;
 800b164:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b166:	f06f 0301 	mvn.w	r3, #1
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <memcmp>:
 800b172:	b510      	push	{r4, lr}
 800b174:	3901      	subs	r1, #1
 800b176:	4402      	add	r2, r0
 800b178:	4290      	cmp	r0, r2
 800b17a:	d101      	bne.n	800b180 <memcmp+0xe>
 800b17c:	2000      	movs	r0, #0
 800b17e:	e005      	b.n	800b18c <memcmp+0x1a>
 800b180:	7803      	ldrb	r3, [r0, #0]
 800b182:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b186:	42a3      	cmp	r3, r4
 800b188:	d001      	beq.n	800b18e <memcmp+0x1c>
 800b18a:	1b18      	subs	r0, r3, r4
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	3001      	adds	r0, #1
 800b190:	e7f2      	b.n	800b178 <memcmp+0x6>

0800b192 <memset>:
 800b192:	4402      	add	r2, r0
 800b194:	4603      	mov	r3, r0
 800b196:	4293      	cmp	r3, r2
 800b198:	d100      	bne.n	800b19c <memset+0xa>
 800b19a:	4770      	bx	lr
 800b19c:	f803 1b01 	strb.w	r1, [r3], #1
 800b1a0:	e7f9      	b.n	800b196 <memset+0x4>

0800b1a2 <strncpy>:
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	3901      	subs	r1, #1
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	b132      	cbz	r2, 800b1b8 <strncpy+0x16>
 800b1aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1ae:	f803 4b01 	strb.w	r4, [r3], #1
 800b1b2:	3a01      	subs	r2, #1
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	d1f7      	bne.n	800b1a8 <strncpy+0x6>
 800b1b8:	441a      	add	r2, r3
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d100      	bne.n	800b1c2 <strncpy+0x20>
 800b1c0:	bd10      	pop	{r4, pc}
 800b1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c6:	e7f9      	b.n	800b1bc <strncpy+0x1a>

0800b1c8 <__libc_init_array>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	4d0d      	ldr	r5, [pc, #52]	@ (800b200 <__libc_init_array+0x38>)
 800b1cc:	4c0d      	ldr	r4, [pc, #52]	@ (800b204 <__libc_init_array+0x3c>)
 800b1ce:	1b64      	subs	r4, r4, r5
 800b1d0:	10a4      	asrs	r4, r4, #2
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	42a6      	cmp	r6, r4
 800b1d6:	d109      	bne.n	800b1ec <__libc_init_array+0x24>
 800b1d8:	4d0b      	ldr	r5, [pc, #44]	@ (800b208 <__libc_init_array+0x40>)
 800b1da:	4c0c      	ldr	r4, [pc, #48]	@ (800b20c <__libc_init_array+0x44>)
 800b1dc:	f000 f826 	bl	800b22c <_init>
 800b1e0:	1b64      	subs	r4, r4, r5
 800b1e2:	10a4      	asrs	r4, r4, #2
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	42a6      	cmp	r6, r4
 800b1e8:	d105      	bne.n	800b1f6 <__libc_init_array+0x2e>
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}
 800b1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1f0:	4798      	blx	r3
 800b1f2:	3601      	adds	r6, #1
 800b1f4:	e7ee      	b.n	800b1d4 <__libc_init_array+0xc>
 800b1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fa:	4798      	blx	r3
 800b1fc:	3601      	adds	r6, #1
 800b1fe:	e7f2      	b.n	800b1e6 <__libc_init_array+0x1e>
 800b200:	0800b360 	.word	0x0800b360
 800b204:	0800b360 	.word	0x0800b360
 800b208:	0800b360 	.word	0x0800b360
 800b20c:	0800b364 	.word	0x0800b364

0800b210 <memcpy>:
 800b210:	440a      	add	r2, r1
 800b212:	4291      	cmp	r1, r2
 800b214:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b218:	d100      	bne.n	800b21c <memcpy+0xc>
 800b21a:	4770      	bx	lr
 800b21c:	b510      	push	{r4, lr}
 800b21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b226:	4291      	cmp	r1, r2
 800b228:	d1f9      	bne.n	800b21e <memcpy+0xe>
 800b22a:	bd10      	pop	{r4, pc}

0800b22c <_init>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	bf00      	nop
 800b230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b232:	bc08      	pop	{r3}
 800b234:	469e      	mov	lr, r3
 800b236:	4770      	bx	lr

0800b238 <_fini>:
 800b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23a:	bf00      	nop
 800b23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23e:	bc08      	pop	{r3}
 800b240:	469e      	mov	lr, r3
 800b242:	4770      	bx	lr
